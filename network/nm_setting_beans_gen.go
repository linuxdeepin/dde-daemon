// Generated by nm-generator
//nolint
package network

// General get setting key default value
func generalGetSettingDefaultValue(setting, key string) (defvalue interface{}) {
	switch setting {
	default:
		logger.Error("invalid key:", setting, key)
	case "802-1x":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "altsubject-matches":
			defvalue = []string{}
		case "anonymous-identity":
			defvalue = ""
		case "auth-timeout":
			defvalue = int32(0)
		case "ca-cert":
			defvalue = []byte{}
		case "ca-cert-password":
			defvalue = ""
		case "ca-cert-password-flags":
			defvalue = uint32(0x0)
		case "ca-path":
			defvalue = ""
		case "client-cert":
			defvalue = []byte{}
		case "client-cert-password":
			defvalue = ""
		case "client-cert-password-flags":
			defvalue = uint32(0x0)
		case "domain-suffix-match":
			defvalue = ""
		case "eap":
			defvalue = []string{}
		case "identity":
			defvalue = ""
		case "pac-file":
			defvalue = ""
		case "password":
			defvalue = ""
		case "password-flags":
			defvalue = uint32(0x0)
		case "password-raw":
			defvalue = []byte{}
		case "password-raw-flags":
			defvalue = uint32(0x0)
		case "phase1-auth-flags":
			defvalue = uint32(0x0)
		case "phase1-fast-provisioning":
			defvalue = ""
		case "phase1-peaplabel":
			defvalue = ""
		case "phase1-peapver":
			defvalue = ""
		case "phase2-altsubject-matches":
			defvalue = []string{}
		case "phase2-auth":
			defvalue = ""
		case "phase2-autheap":
			defvalue = ""
		case "phase2-ca-cert":
			defvalue = []byte{}
		case "phase2-ca-cert-password":
			defvalue = ""
		case "phase2-ca-cert-password-flags":
			defvalue = uint32(0x0)
		case "phase2-ca-path":
			defvalue = ""
		case "phase2-client-cert":
			defvalue = []byte{}
		case "phase2-client-cert-password":
			defvalue = ""
		case "phase2-client-cert-password-flags":
			defvalue = uint32(0x0)
		case "phase2-domain-suffix-match":
			defvalue = ""
		case "phase2-private-key":
			defvalue = []byte{}
		case "phase2-private-key-password":
			defvalue = ""
		case "phase2-private-key-password-flags":
			defvalue = uint32(0x0)
		case "phase2-subject-match":
			defvalue = ""
		case "pin":
			defvalue = ""
		case "pin-flags":
			defvalue = uint32(0x0)
		case "private-key":
			defvalue = []byte{}
		case "private-key-password":
			defvalue = ""
		case "private-key-password-flags":
			defvalue = uint32(0x0)
		case "subject-match":
			defvalue = ""
		case "system-ca-certs":
			defvalue = false
		}
	case "adsl":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "encapsulation":
			defvalue = ""
		case "password":
			defvalue = ""
		case "password-flags":
			defvalue = uint32(0x0)
		case "protocol":
			defvalue = ""
		case "username":
			defvalue = ""
		case "vci":
			defvalue = uint32(0x0)
		case "vpi":
			defvalue = uint32(0x0)
		}
	case "bluetooth":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "bdaddr":
			defvalue = []byte{}
		case "type":
			defvalue = ""
		}
	case "bond":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "options":
			defvalue = map[string]string{"mode": "balance-rr"}
		}
	case "bridge":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "ageing-time":
			defvalue = uint32(0x12c)
		case "forward-delay":
			defvalue = uint32(0xf)
		case "group-forward-mask":
			defvalue = uint32(0x0)
		case "hello-time":
			defvalue = uint32(0x2)
		case "mac-address":
			defvalue = []byte{}
		case "max-age":
			defvalue = uint32(0x14)
		case "multicast-snooping":
			defvalue = true
		case "priority":
			defvalue = uint32(0x8000)
		case "stp":
			defvalue = true
		}
	case "bridge-port":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "hairpin-mode":
			defvalue = false
		case "path-cost":
			defvalue = uint32(0x64)
		case "priority":
			defvalue = uint32(0x20)
		}
	case "cdma":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "mtu":
			defvalue = uint32(0x0)
		case "number":
			defvalue = ""
		case "password":
			defvalue = ""
		case "password-flags":
			defvalue = uint32(0x0)
		case "username":
			defvalue = ""
		}
	case "connection":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "auth-retries":
			defvalue = int32(-1)
		case "autoconnect":
			defvalue = true
		case "autoconnect-priority":
			defvalue = int32(0)
		case "autoconnect-retries":
			defvalue = int32(-1)
		case "autoconnect-slaves":
			defvalue = int32(0)
		case "gateway-ping-timeout":
			defvalue = uint32(0x0)
		case "id":
			defvalue = ""
		case "interface-name":
			defvalue = ""
		case "lldp":
			defvalue = int32(-1)
		case "master":
			defvalue = ""
		case "metered":
			defvalue = int32(0)
		case "permissions":
			defvalue = []string{}
		case "read-only":
			defvalue = false
		case "secondaries":
			defvalue = []string{}
		case "slave-type":
			defvalue = ""
		case "stable-id":
			defvalue = ""
		case "timestamp":
			defvalue = uint64(0x0)
		case "type":
			defvalue = ""
		case "uuid":
			defvalue = ""
		case "zone":
			defvalue = ""
		}
	case "dcb":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "app-fcoe-flags":
			defvalue = uint32(0x0)
		case "app-fcoe-mode":
			defvalue = "fabric"
		case "app-fcoe-priority":
			defvalue = int32(-1)
		case "app-fip-flags":
			defvalue = uint32(0x0)
		case "app-fip-priority":
			defvalue = int32(-1)
		case "app-iscsi-flags":
			defvalue = uint32(0x0)
		case "app-iscsi-priority":
			defvalue = int32(-1)
		case "priority-bandwidth":
			defvalue = []uint32{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}
		case "priority-flow-control":
			defvalue = []uint32{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}
		case "priority-flow-control-flags":
			defvalue = uint32(0x0)
		case "priority-group-bandwidth":
			defvalue = []uint32{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}
		case "priority-group-flags":
			defvalue = uint32(0x0)
		case "priority-group-id":
			defvalue = []uint32{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}
		case "priority-strict-bandwidth":
			defvalue = []uint32{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}
		case "priority-traffic-class":
			defvalue = []uint32{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}
		}
	case "dummy":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		}
	case "generic":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		}
	case "gsm":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "apn":
			defvalue = ""
		case "device-id":
			defvalue = ""
		case "home-only":
			defvalue = false
		case "mtu":
			defvalue = uint32(0x0)
		case "network-id":
			defvalue = ""
		case "number":
			defvalue = ""
		case "password":
			defvalue = ""
		case "password-flags":
			defvalue = uint32(0x0)
		case "pin":
			defvalue = ""
		case "pin-flags":
			defvalue = uint32(0x0)
		case "sim-id":
			defvalue = ""
		case "sim-operator-id":
			defvalue = ""
		case "username":
			defvalue = ""
		}
	case "infiniband":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "mac-address":
			defvalue = []byte{}
		case "mtu":
			defvalue = uint32(0x0)
		case "p-key":
			defvalue = int32(-1)
		case "parent":
			defvalue = ""
		case "transport-mode":
			defvalue = ""
		}
	case "ipv4":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "addresses":
			defvalue = [][]uint32{}
		case "dad-timeout":
			defvalue = int32(-1)
		case "dhcp-client-id":
			defvalue = ""
		case "dhcp-fqdn":
			defvalue = ""
		case "dhcp-hostname":
			defvalue = ""
		case "dhcp-send-hostname":
			defvalue = true
		case "dhcp-timeout":
			defvalue = int32(0)
		case "dns":
			defvalue = []uint32{}
		case "dns-options":
			defvalue = []string{}
		case "dns-priority":
			defvalue = int32(0)
		case "dns-search":
			defvalue = []string{}
		case "gateway":
			defvalue = ""
		case "ignore-auto-dns":
			defvalue = false
		case "ignore-auto-routes":
			defvalue = false
		case "may-fail":
			defvalue = true
		case "method":
			defvalue = ""
		case "never-default":
			defvalue = false
		case "route-metric":
			defvalue = int64(-1)
		case "route-table":
			defvalue = uint32(0x0)
		case "routes":
			defvalue = [][]uint32{}
		}
	case "ipv6":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "addr-gen-mode":
			defvalue = int32(1)
		case "addresses":
			defvalue = make(ipv6Addresses, 0)
		case "dad-timeout":
			defvalue = int32(-1)
		case "dhcp-hostname":
			defvalue = ""
		case "dhcp-send-hostname":
			defvalue = true
		case "dhcp-timeout":
			defvalue = int32(0)
		case "dns":
			defvalue = [][]uint8{}
		case "dns-options":
			defvalue = []string{}
		case "dns-priority":
			defvalue = int32(0)
		case "dns-search":
			defvalue = []string{}
		case "gateway":
			defvalue = ""
		case "ignore-auto-dns":
			defvalue = false
		case "ignore-auto-routes":
			defvalue = false
		case "ip6-privacy":
			defvalue = int32(0)
		case "may-fail":
			defvalue = true
		case "method":
			defvalue = ""
		case "never-default":
			defvalue = false
		case "route-metric":
			defvalue = int64(-1)
		case "route-table":
			defvalue = uint32(0x0)
		case "routes":
			defvalue = make(ipv6Routes, 0)
		case "token":
			defvalue = ""
		}
	case "ip-tunnel":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "encapsulation-limit":
			defvalue = uint32(0x0)
		case "flow-label":
			defvalue = uint32(0x0)
		case "input-key":
			defvalue = ""
		case "local":
			defvalue = ""
		case "mode":
			defvalue = uint32(0x0)
		case "mtu":
			defvalue = uint32(0x0)
		case "output-key":
			defvalue = ""
		case "parent":
			defvalue = ""
		case "path-mtu-discovery":
			defvalue = true
		case "remote":
			defvalue = ""
		case "tos":
			defvalue = uint32(0x0)
		case "ttl":
			defvalue = uint32(0x0)
		}
	case "macsec":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "encrypt":
			defvalue = true
		case "mka-cak":
			defvalue = ""
		case "mka-cak-flags":
			defvalue = uint32(0x0)
		case "mka-ckn":
			defvalue = ""
		case "mode":
			defvalue = int32(0)
		case "parent":
			defvalue = ""
		case "port":
			defvalue = int32(1)
		case "validation":
			defvalue = int32(2)
		}
	case "macvlan":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "mode":
			defvalue = uint32(0x0)
		case "parent":
			defvalue = ""
		case "promiscuous":
			defvalue = true
		case "tap":
			defvalue = false
		}
	case "802-11-olpc-mesh":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "channel":
			defvalue = uint32(0x0)
		case "dhcp-anycast-address":
			defvalue = []byte{}
		case "ssid":
			defvalue = []byte{}
		}
	case "ovs-bridge":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "fail-mode":
			defvalue = ""
		case "mcast-snooping-enable":
			defvalue = false
		case "rstp-enable":
			defvalue = false
		case "stp-enable":
			defvalue = false
		}
	case "ovs-interface":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "type":
			defvalue = ""
		}
	case "ovs-patch":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "peer":
			defvalue = ""
		}
	case "ovs-port":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "bond-downdelay":
			defvalue = uint32(0x0)
		case "bond-mode":
			defvalue = ""
		case "bond-updelay":
			defvalue = uint32(0x0)
		case "lacp":
			defvalue = ""
		case "tag":
			defvalue = uint32(0x0)
		case "vlan-mode":
			defvalue = ""
		}
	case "ppp":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "baud":
			defvalue = uint32(0x0)
		case "crtscts":
			defvalue = false
		case "lcp-echo-failure":
			defvalue = uint32(0x0)
		case "lcp-echo-interval":
			defvalue = uint32(0x0)
		case "mppe-stateful":
			defvalue = false
		case "mru":
			defvalue = uint32(0x0)
		case "mtu":
			defvalue = uint32(0x0)
		case "no-vj-comp":
			defvalue = false
		case "noauth":
			defvalue = true
		case "nobsdcomp":
			defvalue = false
		case "nodeflate":
			defvalue = false
		case "refuse-chap":
			defvalue = false
		case "refuse-eap":
			defvalue = false
		case "refuse-mschap":
			defvalue = false
		case "refuse-mschapv2":
			defvalue = false
		case "refuse-pap":
			defvalue = false
		case "require-mppe":
			defvalue = false
		case "require-mppe-128":
			defvalue = false
		}
	case "pppoe":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "parent":
			defvalue = ""
		case "password":
			defvalue = ""
		case "password-flags":
			defvalue = uint32(0x0)
		case "service":
			defvalue = ""
		case "username":
			defvalue = ""
		}
	case "proxy":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "browser-only":
			defvalue = false
		case "method":
			defvalue = int32(0)
		case "pac-script":
			defvalue = ""
		case "pac-url":
			defvalue = ""
		}
	case "serial":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "baud":
			defvalue = uint32(0xe100)
		case "bits":
			defvalue = uint32(0x8)
		case "parity":
			defvalue = byte(0x0)
		case "send-delay":
			defvalue = uint64(0x0)
		case "stopbits":
			defvalue = uint32(0x1)
		}
	case "tc":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		}
	case "team":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "config":
			defvalue = ""
		case "mcast-rejoin-count":
			defvalue = int32(0)
		case "mcast-rejoin-interval":
			defvalue = int32(0)
		case "notify-peers-count":
			defvalue = int32(0)
		case "notify-peers-interval":
			defvalue = int32(0)
		case "runner":
			defvalue = "roundrobin"
		case "runner-active":
			defvalue = false
		case "runner-agg-select-policy":
			defvalue = ""
		case "runner-fast-rate":
			defvalue = false
		case "runner-hwaddr-policy":
			defvalue = ""
		case "runner-min-ports":
			defvalue = int32(-1)
		case "runner-sys-prio":
			defvalue = int32(-1)
		case "runner-tx-balancer":
			defvalue = ""
		case "runner-tx-balancer-interval":
			defvalue = int32(-1)
		case "runner-tx-hash":
			defvalue = []string{}
		}
	case "team-port":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "config":
			defvalue = ""
		case "lacp-key":
			defvalue = int32(0)
		case "lacp-prio":
			defvalue = int32(255)
		case "prio":
			defvalue = int32(0)
		case "queue-id":
			defvalue = int32(-1)
		case "sticky":
			defvalue = false
		}
	case "tun":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "group":
			defvalue = ""
		case "mode":
			defvalue = uint32(0x1)
		case "multi-queue":
			defvalue = false
		case "owner":
			defvalue = ""
		case "pi":
			defvalue = false
		case "vnet-hdr":
			defvalue = false
		}
	case "user":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "data":
			defvalue = map[string]string{}
		}
	case "vlan":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "egress-priority-map":
			defvalue = []string{}
		case "flags":
			defvalue = uint32(0x0)
		case "id":
			defvalue = uint32(0x0)
		case "ingress-priority-map":
			defvalue = []string{}
		case "parent":
			defvalue = ""
		}
	case "vpn":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "data":
			defvalue = map[string]string{}
		case "persistent":
			defvalue = false
		case "secrets":
			defvalue = map[string]string{}
		case "service-type":
			defvalue = ""
		case "timeout":
			defvalue = uint32(0x0)
		case "user-name":
			defvalue = ""
		}
	case "vxlan":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "ageing":
			defvalue = uint32(0x12c)
		case "destination-port":
			defvalue = uint32(0x2118)
		case "id":
			defvalue = uint32(0x0)
		case "l2-miss":
			defvalue = false
		case "l3-miss":
			defvalue = false
		case "learning":
			defvalue = true
		case "limit":
			defvalue = uint32(0x0)
		case "local":
			defvalue = ""
		case "parent":
			defvalue = ""
		case "proxy":
			defvalue = false
		case "remote":
			defvalue = ""
		case "rsc":
			defvalue = false
		case "source-port-max":
			defvalue = uint32(0x0)
		case "source-port-min":
			defvalue = uint32(0x0)
		case "tos":
			defvalue = uint32(0x0)
		case "ttl":
			defvalue = uint32(0x0)
		}
	case "wimax":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "mac-address":
			defvalue = []byte{}
		case "network-name":
			defvalue = ""
		}
	case "802-3-ethernet":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "auto-negotiate":
			defvalue = false
		case "cloned-mac-address":
			defvalue = []byte{}
		case "duplex":
			defvalue = ""
		case "generate-mac-address-mask":
			defvalue = ""
		case "mac-address":
			defvalue = []byte{}
		case "mac-address-blacklist":
			defvalue = []string{}
		case "mtu":
			defvalue = uint32(0x0)
		case "port":
			defvalue = ""
		case "s390-nettype":
			defvalue = ""
		case "s390-options":
			defvalue = map[string]string{}
		case "s390-subchannels":
			defvalue = []string{}
		case "speed":
			defvalue = uint32(0x0)
		case "wake-on-lan":
			defvalue = uint32(0x1)
		case "wake-on-lan-password":
			defvalue = ""
		}
	case "802-11-wireless":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "band":
			defvalue = ""
		case "bssid":
			defvalue = []byte{}
		case "channel":
			defvalue = uint32(0x0)
		case "cloned-mac-address":
			defvalue = []byte{}
		case "generate-mac-address-mask":
			defvalue = ""
		case "hidden":
			defvalue = false
		case "mac-address":
			defvalue = []byte{}
		case "mac-address-blacklist":
			defvalue = []string{}
		case "mac-address-randomization":
			defvalue = uint32(0x0)
		case "mode":
			defvalue = ""
		case "mtu":
			defvalue = uint32(0x0)
		case "powersave":
			defvalue = uint32(0x0)
		case "rate":
			defvalue = uint32(0x0)
		case "seen-bssids":
			defvalue = []string{}
		case "ssid":
			defvalue = []byte{}
		case "tx-power":
			defvalue = uint32(0x0)
		}
	case "802-11-wireless-security":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "auth-alg":
			defvalue = ""
		case "group":
			defvalue = []string{}
		case "key-mgmt":
			defvalue = ""
		case "leap-password":
			defvalue = ""
		case "leap-password-flags":
			defvalue = uint32(0x0)
		case "leap-username":
			defvalue = ""
		case "pairwise":
			defvalue = []string{}
		case "pmf":
			defvalue = int32(0)
		case "proto":
			defvalue = []string{}
		case "psk":
			defvalue = ""
		case "psk-flags":
			defvalue = uint32(0x0)
		case "wep-key-flags":
			defvalue = uint32(0x0)
		case "wep-key-type":
			defvalue = uint32(0x0)
		case "wep-key0":
			defvalue = ""
		case "wep-key1":
			defvalue = ""
		case "wep-key2":
			defvalue = ""
		case "wep-key3":
			defvalue = ""
		case "wep-tx-keyidx":
			defvalue = uint32(0x0)
		case "wps-method":
			defvalue = uint32(0x0)
		}
	case "alias-vpn-l2tp":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "gateway":
			defvalue = ""
		case "user":
			defvalue = ""
		case "password-flags":
			defvalue = uint32(0x0)
		case "password":
			defvalue = ""
		case "domain":
			defvalue = ""
		}
	case "alias-vpn-l2tp-ppp":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "require-mppe":
			defvalue = false
		case "require-mppe-40":
			defvalue = false
		case "require-mppe-128":
			defvalue = false
		case "mppe-stateful":
			defvalue = false
		case "refuse-eap":
			defvalue = false
		case "refuse-pap":
			defvalue = false
		case "refuse-chap":
			defvalue = false
		case "refuse-mschap":
			defvalue = false
		case "refuse-mschapv2":
			defvalue = false
		case "nobsdcomp":
			defvalue = false
		case "nodeflate":
			defvalue = false
		case "no-vj-comp":
			defvalue = false
		case "nopcomp":
			defvalue = false
		case "noaccomp":
			defvalue = false
		case "lcp-echo-failure":
			defvalue = uint32(0x0)
		case "lcp-echo-interval":
			defvalue = uint32(0x0)
		}
	case "alias-vpn-l2tp-ipsec":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "ipsec-enabled":
			defvalue = false
		case "ipsec-group-name":
			defvalue = ""
		case "ipsec-gateway-id":
			defvalue = ""
		case "ipsec-psk":
			defvalue = ""
		case "ipsec-ike":
			defvalue = ""
		case "ipsec-esp":
			defvalue = ""
		}
	case "alias-vpn-openconnect":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "gateway":
			defvalue = ""
		case "cacert":
			defvalue = ""
		case "proxy":
			defvalue = ""
		case "enable_csd_trojan":
			defvalue = false
		case "csd_wrapper":
			defvalue = ""
		case "usercert":
			defvalue = ""
		case "userkey":
			defvalue = ""
		case "pem_passphrase_fsid":
			defvalue = false
		case "cookie":
			defvalue = ""
		case "gwcert":
			defvalue = ""
		case "authtype":
			defvalue = ""
		case "mtu":
			defvalue = ""
		case "stoken_source":
			defvalue = ""
		case "stoken_string":
			defvalue = ""
		}
	case "alias-vpn-openvpn":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "remote":
			defvalue = ""
		case "connection-type":
			defvalue = ""
		case "username":
			defvalue = ""
		case "password-flags":
			defvalue = uint32(0x0)
		case "password":
			defvalue = ""
		case "ca":
			defvalue = ""
		case "cert":
			defvalue = ""
		case "key":
			defvalue = ""
		case "cert-pass-flags":
			defvalue = uint32(0x0)
		case "cert-pass":
			defvalue = ""
		case "static-key":
			defvalue = ""
		case "static-key-direction":
			defvalue = uint32(0x0)
		case "remote-ip":
			defvalue = ""
		case "local-ip":
			defvalue = ""
		}
	case "alias-vpn-openvpn-advanced":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "port":
			defvalue = uint32(0x4aa)
		case "reneg-seconds":
			defvalue = uint32(0x0)
		case "comp-lzo":
			defvalue = false
		case "proto-tcp":
			defvalue = false
		case "tap-dev":
			defvalue = false
		case "tunnel-mtu":
			defvalue = uint32(0x5dc)
		case "fragment-size":
			defvalue = uint32(0x514)
		case "mssfix":
			defvalue = false
		case "remote-random":
			defvalue = false
		}
	case "alias-vpn-openvpn-security":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "cipher":
			defvalue = ""
		case "auth":
			defvalue = ""
		}
	case "alias-vpn-openvpn-tlsauth":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "tls-remote":
			defvalue = ""
		case "remote-cert-tls":
			defvalue = ""
		case "ta":
			defvalue = ""
		case "ta-dir":
			defvalue = uint32(0x0)
		}
	case "alias-vpn-openvpn-proxies":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "proxy-type":
			defvalue = "none"
		case "proxy-server":
			defvalue = ""
		case "proxy-port":
			defvalue = uint32(0x0)
		case "proxy-retry":
			defvalue = false
		case "http-proxy-username":
			defvalue = ""
		case "http-proxy-password":
			defvalue = ""
		case "http-proxy-password-flags":
			defvalue = uint32(0x0)
		}
	case "alias-vpn-pptp":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "gateway":
			defvalue = ""
		case "user":
			defvalue = ""
		case "password-flags":
			defvalue = uint32(0x0)
		case "password":
			defvalue = ""
		case "domain":
			defvalue = ""
		}
	case "alias-vpn-pptp-ppp":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "require-mppe":
			defvalue = false
		case "require-mppe-40":
			defvalue = false
		case "require-mppe-128":
			defvalue = false
		case "mppe-stateful":
			defvalue = false
		case "refuse-eap":
			defvalue = false
		case "refuse-pap":
			defvalue = false
		case "refuse-chap":
			defvalue = false
		case "refuse-mschap":
			defvalue = false
		case "refuse-mschapv2":
			defvalue = false
		case "nobsdcomp":
			defvalue = false
		case "nodeflate":
			defvalue = false
		case "no-vj-comp":
			defvalue = false
		case "lcp-echo-failure":
			defvalue = uint32(0x0)
		case "lcp-echo-interval":
			defvalue = uint32(0x0)
		}
	case "alias-vpn-strongswan":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "address":
			defvalue = ""
		case "certificate":
			defvalue = ""
		case "method":
			defvalue = ""
		case "user":
			defvalue = ""
		case "usercert":
			defvalue = ""
		case "userkey":
			defvalue = ""
		case "password":
			defvalue = ""
		case "password-flags":
			defvalue = uint32(0x0)
		case "virtual":
			defvalue = false
		case "encap":
			defvalue = false
		case "ipcomp":
			defvalue = false
		}
	case "alias-vpn-vpnc":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "IPSec gateway":
			defvalue = ""
		case "Xauth username":
			defvalue = ""
		case "xauth-password-type":
			defvalue = ""
		case "Xauth password-flags":
			defvalue = uint32(0x0)
		case "Xauth password":
			defvalue = ""
		case "IPSec ID":
			defvalue = ""
		case "ipsec-secret-type":
			defvalue = ""
		case "IPSec secret-flags":
			defvalue = uint32(0x0)
		case "IPSec secret":
			defvalue = ""
		case "IKE Authmode":
			defvalue = ""
		case "CA-File":
			defvalue = ""
		}
	case "alias-vpn-vpnc-advanced":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "Domain":
			defvalue = ""
		case "Vendor":
			defvalue = ""
		case "Application Version":
			defvalue = ""
		case "Enable Single DES":
			defvalue = false
		case "Enable no encryption":
			defvalue = false
		case "NAT Traversal Mode":
			defvalue = ""
		case "IKE DH Group":
			defvalue = ""
		case "Perfect Forward Secrecy":
			defvalue = ""
		case "Local Port":
			defvalue = uint32(0x0)
		case "DPD idle timeout (our side)":
			defvalue = uint32(0x0)
		case "Cisco UDP Encapsulation Port":
			defvalue = uint32(0x0)
		}
	}
	return
}

// Check is key exists
func isSetting8021xAltsubjectMatchesExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-1x", "altsubject-matches")
}
func isSetting8021xAnonymousIdentityExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-1x", "anonymous-identity")
}
func isSetting8021xAuthTimeoutExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-1x", "auth-timeout")
}
func isSetting8021xCaCertExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-1x", "ca-cert")
}
func isSetting8021xCaCertPasswordExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-1x", "ca-cert-password")
}
func isSetting8021xCaCertPasswordFlagsExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-1x", "ca-cert-password-flags")
}
func isSetting8021xCaPathExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-1x", "ca-path")
}
func isSetting8021xClientCertExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-1x", "client-cert")
}
func isSetting8021xClientCertPasswordExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-1x", "client-cert-password")
}
func isSetting8021xClientCertPasswordFlagsExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-1x", "client-cert-password-flags")
}
func isSetting8021xDomainSuffixMatchExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-1x", "domain-suffix-match")
}
func isSetting8021xEapExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-1x", "eap")
}
func isSetting8021xIdentityExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-1x", "identity")
}
func isSetting8021xPacFileExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-1x", "pac-file")
}
func isSetting8021xPasswordExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-1x", "password")
}
func isSetting8021xPasswordFlagsExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-1x", "password-flags")
}
func isSetting8021xPasswordRawExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-1x", "password-raw")
}
func isSetting8021xPasswordRawFlagsExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-1x", "password-raw-flags")
}
func isSetting8021xPhase1AuthFlagsExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-1x", "phase1-auth-flags")
}
func isSetting8021xPhase1FastProvisioningExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-1x", "phase1-fast-provisioning")
}
func isSetting8021xPhase1PeaplabelExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-1x", "phase1-peaplabel")
}
func isSetting8021xPhase1PeapverExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-1x", "phase1-peapver")
}
func isSetting8021xPhase2AltsubjectMatchesExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-1x", "phase2-altsubject-matches")
}
func isSetting8021xPhase2AuthExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-1x", "phase2-auth")
}
func isSetting8021xPhase2AutheapExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-1x", "phase2-autheap")
}
func isSetting8021xPhase2CaCertExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-1x", "phase2-ca-cert")
}
func isSetting8021xPhase2CaCertPasswordExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-1x", "phase2-ca-cert-password")
}
func isSetting8021xPhase2CaCertPasswordFlagsExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-1x", "phase2-ca-cert-password-flags")
}
func isSetting8021xPhase2CaPathExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-1x", "phase2-ca-path")
}
func isSetting8021xPhase2ClientCertExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-1x", "phase2-client-cert")
}
func isSetting8021xPhase2ClientCertPasswordExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-1x", "phase2-client-cert-password")
}
func isSetting8021xPhase2ClientCertPasswordFlagsExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-1x", "phase2-client-cert-password-flags")
}
func isSetting8021xPhase2DomainSuffixMatchExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-1x", "phase2-domain-suffix-match")
}
func isSetting8021xPhase2PrivateKeyExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-1x", "phase2-private-key")
}
func isSetting8021xPhase2PrivateKeyPasswordExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-1x", "phase2-private-key-password")
}
func isSetting8021xPhase2PrivateKeyPasswordFlagsExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-1x", "phase2-private-key-password-flags")
}
func isSetting8021xPhase2SubjectMatchExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-1x", "phase2-subject-match")
}
func isSetting8021xPinExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-1x", "pin")
}
func isSetting8021xPinFlagsExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-1x", "pin-flags")
}
func isSetting8021xPrivateKeyExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-1x", "private-key")
}
func isSetting8021xPrivateKeyPasswordExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-1x", "private-key-password")
}
func isSetting8021xPrivateKeyPasswordFlagsExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-1x", "private-key-password-flags")
}
func isSetting8021xSubjectMatchExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-1x", "subject-match")
}
func isSetting8021xSystemCaCertsExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-1x", "system-ca-certs")
}
func isSettingAdslEncapsulationExists(data connectionData) bool {
	return isSettingKeyExists(data, "adsl", "encapsulation")
}
func isSettingAdslPasswordExists(data connectionData) bool {
	return isSettingKeyExists(data, "adsl", "password")
}
func isSettingAdslPasswordFlagsExists(data connectionData) bool {
	return isSettingKeyExists(data, "adsl", "password-flags")
}
func isSettingAdslProtocolExists(data connectionData) bool {
	return isSettingKeyExists(data, "adsl", "protocol")
}
func isSettingAdslUsernameExists(data connectionData) bool {
	return isSettingKeyExists(data, "adsl", "username")
}
func isSettingAdslVciExists(data connectionData) bool {
	return isSettingKeyExists(data, "adsl", "vci")
}
func isSettingAdslVpiExists(data connectionData) bool {
	return isSettingKeyExists(data, "adsl", "vpi")
}
func isSettingBluetoothBdaddrExists(data connectionData) bool {
	return isSettingKeyExists(data, "bluetooth", "bdaddr")
}
func isSettingBluetoothTypeExists(data connectionData) bool {
	return isSettingKeyExists(data, "bluetooth", "type")
}
func isSettingBondOptionsExists(data connectionData) bool {
	return isSettingKeyExists(data, "bond", "options")
}
func isSettingBridgeAgeingTimeExists(data connectionData) bool {
	return isSettingKeyExists(data, "bridge", "ageing-time")
}
func isSettingBridgeForwardDelayExists(data connectionData) bool {
	return isSettingKeyExists(data, "bridge", "forward-delay")
}
func isSettingBridgeGroupForwardMaskExists(data connectionData) bool {
	return isSettingKeyExists(data, "bridge", "group-forward-mask")
}
func isSettingBridgeHelloTimeExists(data connectionData) bool {
	return isSettingKeyExists(data, "bridge", "hello-time")
}
func isSettingBridgeMacAddressExists(data connectionData) bool {
	return isSettingKeyExists(data, "bridge", "mac-address")
}
func isSettingBridgeMaxAgeExists(data connectionData) bool {
	return isSettingKeyExists(data, "bridge", "max-age")
}
func isSettingBridgeMulticastSnoopingExists(data connectionData) bool {
	return isSettingKeyExists(data, "bridge", "multicast-snooping")
}
func isSettingBridgePriorityExists(data connectionData) bool {
	return isSettingKeyExists(data, "bridge", "priority")
}
func isSettingBridgeStpExists(data connectionData) bool {
	return isSettingKeyExists(data, "bridge", "stp")
}
func isSettingBridgePortHairpinModeExists(data connectionData) bool {
	return isSettingKeyExists(data, "bridge-port", "hairpin-mode")
}
func isSettingBridgePortPathCostExists(data connectionData) bool {
	return isSettingKeyExists(data, "bridge-port", "path-cost")
}
func isSettingBridgePortPriorityExists(data connectionData) bool {
	return isSettingKeyExists(data, "bridge-port", "priority")
}
func isSettingCdmaMtuExists(data connectionData) bool {
	return isSettingKeyExists(data, "cdma", "mtu")
}
func isSettingCdmaNumberExists(data connectionData) bool {
	return isSettingKeyExists(data, "cdma", "number")
}
func isSettingCdmaPasswordExists(data connectionData) bool {
	return isSettingKeyExists(data, "cdma", "password")
}
func isSettingCdmaPasswordFlagsExists(data connectionData) bool {
	return isSettingKeyExists(data, "cdma", "password-flags")
}
func isSettingCdmaUsernameExists(data connectionData) bool {
	return isSettingKeyExists(data, "cdma", "username")
}
func isSettingConnectionAuthRetriesExists(data connectionData) bool {
	return isSettingKeyExists(data, "connection", "auth-retries")
}
func isSettingConnectionAutoconnectExists(data connectionData) bool {
	return isSettingKeyExists(data, "connection", "autoconnect")
}
func isSettingConnectionAutoconnectPriorityExists(data connectionData) bool {
	return isSettingKeyExists(data, "connection", "autoconnect-priority")
}
func isSettingConnectionAutoconnectRetriesExists(data connectionData) bool {
	return isSettingKeyExists(data, "connection", "autoconnect-retries")
}
func isSettingConnectionAutoconnectSlavesExists(data connectionData) bool {
	return isSettingKeyExists(data, "connection", "autoconnect-slaves")
}
func isSettingConnectionGatewayPingTimeoutExists(data connectionData) bool {
	return isSettingKeyExists(data, "connection", "gateway-ping-timeout")
}
func isSettingConnectionIdExists(data connectionData) bool {
	return isSettingKeyExists(data, "connection", "id")
}
func isSettingConnectionInterfaceNameExists(data connectionData) bool {
	return isSettingKeyExists(data, "connection", "interface-name")
}
func isSettingConnectionLldpExists(data connectionData) bool {
	return isSettingKeyExists(data, "connection", "lldp")
}
func isSettingConnectionMasterExists(data connectionData) bool {
	return isSettingKeyExists(data, "connection", "master")
}
func isSettingConnectionMeteredExists(data connectionData) bool {
	return isSettingKeyExists(data, "connection", "metered")
}
func isSettingConnectionPermissionsExists(data connectionData) bool {
	return isSettingKeyExists(data, "connection", "permissions")
}
func isSettingConnectionReadOnlyExists(data connectionData) bool {
	return isSettingKeyExists(data, "connection", "read-only")
}
func isSettingConnectionSecondariesExists(data connectionData) bool {
	return isSettingKeyExists(data, "connection", "secondaries")
}
func isSettingConnectionSlaveTypeExists(data connectionData) bool {
	return isSettingKeyExists(data, "connection", "slave-type")
}
func isSettingConnectionStableIdExists(data connectionData) bool {
	return isSettingKeyExists(data, "connection", "stable-id")
}
func isSettingConnectionTimestampExists(data connectionData) bool {
	return isSettingKeyExists(data, "connection", "timestamp")
}
func isSettingConnectionTypeExists(data connectionData) bool {
	return isSettingKeyExists(data, "connection", "type")
}
func isSettingConnectionUuidExists(data connectionData) bool {
	return isSettingKeyExists(data, "connection", "uuid")
}
func isSettingConnectionZoneExists(data connectionData) bool {
	return isSettingKeyExists(data, "connection", "zone")
}
func isSettingDcbAppFcoeFlagsExists(data connectionData) bool {
	return isSettingKeyExists(data, "dcb", "app-fcoe-flags")
}
func isSettingDcbAppFcoeModeExists(data connectionData) bool {
	return isSettingKeyExists(data, "dcb", "app-fcoe-mode")
}
func isSettingDcbAppFcoePriorityExists(data connectionData) bool {
	return isSettingKeyExists(data, "dcb", "app-fcoe-priority")
}
func isSettingDcbAppFipFlagsExists(data connectionData) bool {
	return isSettingKeyExists(data, "dcb", "app-fip-flags")
}
func isSettingDcbAppFipPriorityExists(data connectionData) bool {
	return isSettingKeyExists(data, "dcb", "app-fip-priority")
}
func isSettingDcbAppIscsiFlagsExists(data connectionData) bool {
	return isSettingKeyExists(data, "dcb", "app-iscsi-flags")
}
func isSettingDcbAppIscsiPriorityExists(data connectionData) bool {
	return isSettingKeyExists(data, "dcb", "app-iscsi-priority")
}
func isSettingDcbPriorityBandwidthExists(data connectionData) bool {
	return isSettingKeyExists(data, "dcb", "priority-bandwidth")
}
func isSettingDcbPriorityFlowControlExists(data connectionData) bool {
	return isSettingKeyExists(data, "dcb", "priority-flow-control")
}
func isSettingDcbPriorityFlowControlFlagsExists(data connectionData) bool {
	return isSettingKeyExists(data, "dcb", "priority-flow-control-flags")
}
func isSettingDcbPriorityGroupBandwidthExists(data connectionData) bool {
	return isSettingKeyExists(data, "dcb", "priority-group-bandwidth")
}
func isSettingDcbPriorityGroupFlagsExists(data connectionData) bool {
	return isSettingKeyExists(data, "dcb", "priority-group-flags")
}
func isSettingDcbPriorityGroupIdExists(data connectionData) bool {
	return isSettingKeyExists(data, "dcb", "priority-group-id")
}
func isSettingDcbPriorityStrictBandwidthExists(data connectionData) bool {
	return isSettingKeyExists(data, "dcb", "priority-strict-bandwidth")
}
func isSettingDcbPriorityTrafficClassExists(data connectionData) bool {
	return isSettingKeyExists(data, "dcb", "priority-traffic-class")
}
func isSettingGsmApnExists(data connectionData) bool {
	return isSettingKeyExists(data, "gsm", "apn")
}
func isSettingGsmDeviceIdExists(data connectionData) bool {
	return isSettingKeyExists(data, "gsm", "device-id")
}
func isSettingGsmHomeOnlyExists(data connectionData) bool {
	return isSettingKeyExists(data, "gsm", "home-only")
}
func isSettingGsmMtuExists(data connectionData) bool {
	return isSettingKeyExists(data, "gsm", "mtu")
}
func isSettingGsmNetworkIdExists(data connectionData) bool {
	return isSettingKeyExists(data, "gsm", "network-id")
}
func isSettingGsmNumberExists(data connectionData) bool {
	return isSettingKeyExists(data, "gsm", "number")
}
func isSettingGsmPasswordExists(data connectionData) bool {
	return isSettingKeyExists(data, "gsm", "password")
}
func isSettingGsmPasswordFlagsExists(data connectionData) bool {
	return isSettingKeyExists(data, "gsm", "password-flags")
}
func isSettingGsmPinExists(data connectionData) bool {
	return isSettingKeyExists(data, "gsm", "pin")
}
func isSettingGsmPinFlagsExists(data connectionData) bool {
	return isSettingKeyExists(data, "gsm", "pin-flags")
}
func isSettingGsmSimIdExists(data connectionData) bool {
	return isSettingKeyExists(data, "gsm", "sim-id")
}
func isSettingGsmSimOperatorIdExists(data connectionData) bool {
	return isSettingKeyExists(data, "gsm", "sim-operator-id")
}
func isSettingGsmUsernameExists(data connectionData) bool {
	return isSettingKeyExists(data, "gsm", "username")
}
func isSettingInfinibandMacAddressExists(data connectionData) bool {
	return isSettingKeyExists(data, "infiniband", "mac-address")
}
func isSettingInfinibandMtuExists(data connectionData) bool {
	return isSettingKeyExists(data, "infiniband", "mtu")
}
func isSettingInfinibandPKeyExists(data connectionData) bool {
	return isSettingKeyExists(data, "infiniband", "p-key")
}
func isSettingInfinibandParentExists(data connectionData) bool {
	return isSettingKeyExists(data, "infiniband", "parent")
}
func isSettingInfinibandTransportModeExists(data connectionData) bool {
	return isSettingKeyExists(data, "infiniband", "transport-mode")
}
func isSettingIP4ConfigAddressesExists(data connectionData) bool {
	return isSettingKeyExists(data, "ipv4", "addresses")
}
func isSettingIP4ConfigDadTimeoutExists(data connectionData) bool {
	return isSettingKeyExists(data, "ipv4", "dad-timeout")
}
func isSettingIP4ConfigDhcpClientIdExists(data connectionData) bool {
	return isSettingKeyExists(data, "ipv4", "dhcp-client-id")
}
func isSettingIP4ConfigDhcpFqdnExists(data connectionData) bool {
	return isSettingKeyExists(data, "ipv4", "dhcp-fqdn")
}
func isSettingIP4ConfigDhcpHostnameExists(data connectionData) bool {
	return isSettingKeyExists(data, "ipv4", "dhcp-hostname")
}
func isSettingIP4ConfigDhcpSendHostnameExists(data connectionData) bool {
	return isSettingKeyExists(data, "ipv4", "dhcp-send-hostname")
}
func isSettingIP4ConfigDhcpTimeoutExists(data connectionData) bool {
	return isSettingKeyExists(data, "ipv4", "dhcp-timeout")
}
func isSettingIP4ConfigDnsExists(data connectionData) bool {
	return isSettingKeyExists(data, "ipv4", "dns")
}
func isSettingIP4ConfigDnsOptionsExists(data connectionData) bool {
	return isSettingKeyExists(data, "ipv4", "dns-options")
}
func isSettingIP4ConfigDnsPriorityExists(data connectionData) bool {
	return isSettingKeyExists(data, "ipv4", "dns-priority")
}
func isSettingIP4ConfigDnsSearchExists(data connectionData) bool {
	return isSettingKeyExists(data, "ipv4", "dns-search")
}
func isSettingIP4ConfigGatewayExists(data connectionData) bool {
	return isSettingKeyExists(data, "ipv4", "gateway")
}
func isSettingIP4ConfigIgnoreAutoDnsExists(data connectionData) bool {
	return isSettingKeyExists(data, "ipv4", "ignore-auto-dns")
}
func isSettingIP4ConfigIgnoreAutoRoutesExists(data connectionData) bool {
	return isSettingKeyExists(data, "ipv4", "ignore-auto-routes")
}
func isSettingIP4ConfigMayFailExists(data connectionData) bool {
	return isSettingKeyExists(data, "ipv4", "may-fail")
}
func isSettingIP4ConfigMethodExists(data connectionData) bool {
	return isSettingKeyExists(data, "ipv4", "method")
}
func isSettingIP4ConfigNeverDefaultExists(data connectionData) bool {
	return isSettingKeyExists(data, "ipv4", "never-default")
}
func isSettingIP4ConfigRouteMetricExists(data connectionData) bool {
	return isSettingKeyExists(data, "ipv4", "route-metric")
}
func isSettingIP4ConfigRouteTableExists(data connectionData) bool {
	return isSettingKeyExists(data, "ipv4", "route-table")
}
func isSettingIP4ConfigRoutesExists(data connectionData) bool {
	return isSettingKeyExists(data, "ipv4", "routes")
}
func isSettingIP6ConfigAddrGenModeExists(data connectionData) bool {
	return isSettingKeyExists(data, "ipv6", "addr-gen-mode")
}
func isSettingIP6ConfigAddressesExists(data connectionData) bool {
	return isSettingKeyExists(data, "ipv6", "addresses")
}
func isSettingIP6ConfigDadTimeoutExists(data connectionData) bool {
	return isSettingKeyExists(data, "ipv6", "dad-timeout")
}
func isSettingIP6ConfigDhcpHostnameExists(data connectionData) bool {
	return isSettingKeyExists(data, "ipv6", "dhcp-hostname")
}
func isSettingIP6ConfigDhcpSendHostnameExists(data connectionData) bool {
	return isSettingKeyExists(data, "ipv6", "dhcp-send-hostname")
}
func isSettingIP6ConfigDhcpTimeoutExists(data connectionData) bool {
	return isSettingKeyExists(data, "ipv6", "dhcp-timeout")
}
func isSettingIP6ConfigDnsExists(data connectionData) bool {
	return isSettingKeyExists(data, "ipv6", "dns")
}
func isSettingIP6ConfigDnsOptionsExists(data connectionData) bool {
	return isSettingKeyExists(data, "ipv6", "dns-options")
}
func isSettingIP6ConfigDnsPriorityExists(data connectionData) bool {
	return isSettingKeyExists(data, "ipv6", "dns-priority")
}
func isSettingIP6ConfigDnsSearchExists(data connectionData) bool {
	return isSettingKeyExists(data, "ipv6", "dns-search")
}
func isSettingIP6ConfigGatewayExists(data connectionData) bool {
	return isSettingKeyExists(data, "ipv6", "gateway")
}
func isSettingIP6ConfigIgnoreAutoDnsExists(data connectionData) bool {
	return isSettingKeyExists(data, "ipv6", "ignore-auto-dns")
}
func isSettingIP6ConfigIgnoreAutoRoutesExists(data connectionData) bool {
	return isSettingKeyExists(data, "ipv6", "ignore-auto-routes")
}
func isSettingIP6ConfigIp6PrivacyExists(data connectionData) bool {
	return isSettingKeyExists(data, "ipv6", "ip6-privacy")
}
func isSettingIP6ConfigMayFailExists(data connectionData) bool {
	return isSettingKeyExists(data, "ipv6", "may-fail")
}
func isSettingIP6ConfigMethodExists(data connectionData) bool {
	return isSettingKeyExists(data, "ipv6", "method")
}
func isSettingIP6ConfigNeverDefaultExists(data connectionData) bool {
	return isSettingKeyExists(data, "ipv6", "never-default")
}
func isSettingIP6ConfigRouteMetricExists(data connectionData) bool {
	return isSettingKeyExists(data, "ipv6", "route-metric")
}
func isSettingIP6ConfigRouteTableExists(data connectionData) bool {
	return isSettingKeyExists(data, "ipv6", "route-table")
}
func isSettingIP6ConfigRoutesExists(data connectionData) bool {
	return isSettingKeyExists(data, "ipv6", "routes")
}
func isSettingIP6ConfigTokenExists(data connectionData) bool {
	return isSettingKeyExists(data, "ipv6", "token")
}
func isSettingIPTunnelEncapsulationLimitExists(data connectionData) bool {
	return isSettingKeyExists(data, "ip-tunnel", "encapsulation-limit")
}
func isSettingIPTunnelFlowLabelExists(data connectionData) bool {
	return isSettingKeyExists(data, "ip-tunnel", "flow-label")
}
func isSettingIPTunnelInputKeyExists(data connectionData) bool {
	return isSettingKeyExists(data, "ip-tunnel", "input-key")
}
func isSettingIPTunnelLocalExists(data connectionData) bool {
	return isSettingKeyExists(data, "ip-tunnel", "local")
}
func isSettingIPTunnelModeExists(data connectionData) bool {
	return isSettingKeyExists(data, "ip-tunnel", "mode")
}
func isSettingIPTunnelMtuExists(data connectionData) bool {
	return isSettingKeyExists(data, "ip-tunnel", "mtu")
}
func isSettingIPTunnelOutputKeyExists(data connectionData) bool {
	return isSettingKeyExists(data, "ip-tunnel", "output-key")
}
func isSettingIPTunnelParentExists(data connectionData) bool {
	return isSettingKeyExists(data, "ip-tunnel", "parent")
}
func isSettingIPTunnelPathMtuDiscoveryExists(data connectionData) bool {
	return isSettingKeyExists(data, "ip-tunnel", "path-mtu-discovery")
}
func isSettingIPTunnelRemoteExists(data connectionData) bool {
	return isSettingKeyExists(data, "ip-tunnel", "remote")
}
func isSettingIPTunnelTosExists(data connectionData) bool {
	return isSettingKeyExists(data, "ip-tunnel", "tos")
}
func isSettingIPTunnelTtlExists(data connectionData) bool {
	return isSettingKeyExists(data, "ip-tunnel", "ttl")
}
func isSettingMacsecEncryptExists(data connectionData) bool {
	return isSettingKeyExists(data, "macsec", "encrypt")
}
func isSettingMacsecMkaCakExists(data connectionData) bool {
	return isSettingKeyExists(data, "macsec", "mka-cak")
}
func isSettingMacsecMkaCakFlagsExists(data connectionData) bool {
	return isSettingKeyExists(data, "macsec", "mka-cak-flags")
}
func isSettingMacsecMkaCknExists(data connectionData) bool {
	return isSettingKeyExists(data, "macsec", "mka-ckn")
}
func isSettingMacsecModeExists(data connectionData) bool {
	return isSettingKeyExists(data, "macsec", "mode")
}
func isSettingMacsecParentExists(data connectionData) bool {
	return isSettingKeyExists(data, "macsec", "parent")
}
func isSettingMacsecPortExists(data connectionData) bool {
	return isSettingKeyExists(data, "macsec", "port")
}
func isSettingMacsecValidationExists(data connectionData) bool {
	return isSettingKeyExists(data, "macsec", "validation")
}
func isSettingMacvlanModeExists(data connectionData) bool {
	return isSettingKeyExists(data, "macvlan", "mode")
}
func isSettingMacvlanParentExists(data connectionData) bool {
	return isSettingKeyExists(data, "macvlan", "parent")
}
func isSettingMacvlanPromiscuousExists(data connectionData) bool {
	return isSettingKeyExists(data, "macvlan", "promiscuous")
}
func isSettingMacvlanTapExists(data connectionData) bool {
	return isSettingKeyExists(data, "macvlan", "tap")
}
func isSettingOlpcMeshChannelExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-11-olpc-mesh", "channel")
}
func isSettingOlpcMeshDhcpAnycastAddressExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-11-olpc-mesh", "dhcp-anycast-address")
}
func isSettingOlpcMeshSsidExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-11-olpc-mesh", "ssid")
}
func isSettingOvsBridgeFailModeExists(data connectionData) bool {
	return isSettingKeyExists(data, "ovs-bridge", "fail-mode")
}
func isSettingOvsBridgeMcastSnoopingEnableExists(data connectionData) bool {
	return isSettingKeyExists(data, "ovs-bridge", "mcast-snooping-enable")
}
func isSettingOvsBridgeRstpEnableExists(data connectionData) bool {
	return isSettingKeyExists(data, "ovs-bridge", "rstp-enable")
}
func isSettingOvsBridgeStpEnableExists(data connectionData) bool {
	return isSettingKeyExists(data, "ovs-bridge", "stp-enable")
}
func isSettingOvsInterfaceTypeExists(data connectionData) bool {
	return isSettingKeyExists(data, "ovs-interface", "type")
}
func isSettingOvsPatchPeerExists(data connectionData) bool {
	return isSettingKeyExists(data, "ovs-patch", "peer")
}
func isSettingOvsPortBondDowndelayExists(data connectionData) bool {
	return isSettingKeyExists(data, "ovs-port", "bond-downdelay")
}
func isSettingOvsPortBondModeExists(data connectionData) bool {
	return isSettingKeyExists(data, "ovs-port", "bond-mode")
}
func isSettingOvsPortBondUpdelayExists(data connectionData) bool {
	return isSettingKeyExists(data, "ovs-port", "bond-updelay")
}
func isSettingOvsPortLacpExists(data connectionData) bool {
	return isSettingKeyExists(data, "ovs-port", "lacp")
}
func isSettingOvsPortTagExists(data connectionData) bool {
	return isSettingKeyExists(data, "ovs-port", "tag")
}
func isSettingOvsPortVlanModeExists(data connectionData) bool {
	return isSettingKeyExists(data, "ovs-port", "vlan-mode")
}
func isSettingPppBaudExists(data connectionData) bool {
	return isSettingKeyExists(data, "ppp", "baud")
}
func isSettingPppCrtsctsExists(data connectionData) bool {
	return isSettingKeyExists(data, "ppp", "crtscts")
}
func isSettingPppLcpEchoFailureExists(data connectionData) bool {
	return isSettingKeyExists(data, "ppp", "lcp-echo-failure")
}
func isSettingPppLcpEchoIntervalExists(data connectionData) bool {
	return isSettingKeyExists(data, "ppp", "lcp-echo-interval")
}
func isSettingPppMppeStatefulExists(data connectionData) bool {
	return isSettingKeyExists(data, "ppp", "mppe-stateful")
}
func isSettingPppMruExists(data connectionData) bool {
	return isSettingKeyExists(data, "ppp", "mru")
}
func isSettingPppMtuExists(data connectionData) bool {
	return isSettingKeyExists(data, "ppp", "mtu")
}
func isSettingPppNoVjCompExists(data connectionData) bool {
	return isSettingKeyExists(data, "ppp", "no-vj-comp")
}
func isSettingPppNoauthExists(data connectionData) bool {
	return isSettingKeyExists(data, "ppp", "noauth")
}
func isSettingPppNobsdcompExists(data connectionData) bool {
	return isSettingKeyExists(data, "ppp", "nobsdcomp")
}
func isSettingPppNodeflateExists(data connectionData) bool {
	return isSettingKeyExists(data, "ppp", "nodeflate")
}
func isSettingPppRefuseChapExists(data connectionData) bool {
	return isSettingKeyExists(data, "ppp", "refuse-chap")
}
func isSettingPppRefuseEapExists(data connectionData) bool {
	return isSettingKeyExists(data, "ppp", "refuse-eap")
}
func isSettingPppRefuseMschapExists(data connectionData) bool {
	return isSettingKeyExists(data, "ppp", "refuse-mschap")
}
func isSettingPppRefuseMschapv2Exists(data connectionData) bool {
	return isSettingKeyExists(data, "ppp", "refuse-mschapv2")
}
func isSettingPppRefusePapExists(data connectionData) bool {
	return isSettingKeyExists(data, "ppp", "refuse-pap")
}
func isSettingPppRequireMppeExists(data connectionData) bool {
	return isSettingKeyExists(data, "ppp", "require-mppe")
}
func isSettingPppRequireMppe128Exists(data connectionData) bool {
	return isSettingKeyExists(data, "ppp", "require-mppe-128")
}
func isSettingPppoeParentExists(data connectionData) bool {
	return isSettingKeyExists(data, "pppoe", "parent")
}
func isSettingPppoePasswordExists(data connectionData) bool {
	return isSettingKeyExists(data, "pppoe", "password")
}
func isSettingPppoePasswordFlagsExists(data connectionData) bool {
	return isSettingKeyExists(data, "pppoe", "password-flags")
}
func isSettingPppoeServiceExists(data connectionData) bool {
	return isSettingKeyExists(data, "pppoe", "service")
}
func isSettingPppoeUsernameExists(data connectionData) bool {
	return isSettingKeyExists(data, "pppoe", "username")
}
func isSettingProxyBrowserOnlyExists(data connectionData) bool {
	return isSettingKeyExists(data, "proxy", "browser-only")
}
func isSettingProxyMethodExists(data connectionData) bool {
	return isSettingKeyExists(data, "proxy", "method")
}
func isSettingProxyPacScriptExists(data connectionData) bool {
	return isSettingKeyExists(data, "proxy", "pac-script")
}
func isSettingProxyPacUrlExists(data connectionData) bool {
	return isSettingKeyExists(data, "proxy", "pac-url")
}
func isSettingSerialBaudExists(data connectionData) bool {
	return isSettingKeyExists(data, "serial", "baud")
}
func isSettingSerialBitsExists(data connectionData) bool {
	return isSettingKeyExists(data, "serial", "bits")
}
func isSettingSerialParityExists(data connectionData) bool {
	return isSettingKeyExists(data, "serial", "parity")
}
func isSettingSerialSendDelayExists(data connectionData) bool {
	return isSettingKeyExists(data, "serial", "send-delay")
}
func isSettingSerialStopbitsExists(data connectionData) bool {
	return isSettingKeyExists(data, "serial", "stopbits")
}
func isSettingTeamConfigExists(data connectionData) bool {
	return isSettingKeyExists(data, "team", "config")
}
func isSettingTeamMcastRejoinCountExists(data connectionData) bool {
	return isSettingKeyExists(data, "team", "mcast-rejoin-count")
}
func isSettingTeamMcastRejoinIntervalExists(data connectionData) bool {
	return isSettingKeyExists(data, "team", "mcast-rejoin-interval")
}
func isSettingTeamNotifyPeersCountExists(data connectionData) bool {
	return isSettingKeyExists(data, "team", "notify-peers-count")
}
func isSettingTeamNotifyPeersIntervalExists(data connectionData) bool {
	return isSettingKeyExists(data, "team", "notify-peers-interval")
}
func isSettingTeamRunnerExists(data connectionData) bool {
	return isSettingKeyExists(data, "team", "runner")
}
func isSettingTeamRunnerActiveExists(data connectionData) bool {
	return isSettingKeyExists(data, "team", "runner-active")
}
func isSettingTeamRunnerAggSelectPolicyExists(data connectionData) bool {
	return isSettingKeyExists(data, "team", "runner-agg-select-policy")
}
func isSettingTeamRunnerFastRateExists(data connectionData) bool {
	return isSettingKeyExists(data, "team", "runner-fast-rate")
}
func isSettingTeamRunnerHwaddrPolicyExists(data connectionData) bool {
	return isSettingKeyExists(data, "team", "runner-hwaddr-policy")
}
func isSettingTeamRunnerMinPortsExists(data connectionData) bool {
	return isSettingKeyExists(data, "team", "runner-min-ports")
}
func isSettingTeamRunnerSysPrioExists(data connectionData) bool {
	return isSettingKeyExists(data, "team", "runner-sys-prio")
}
func isSettingTeamRunnerTxBalancerExists(data connectionData) bool {
	return isSettingKeyExists(data, "team", "runner-tx-balancer")
}
func isSettingTeamRunnerTxBalancerIntervalExists(data connectionData) bool {
	return isSettingKeyExists(data, "team", "runner-tx-balancer-interval")
}
func isSettingTeamRunnerTxHashExists(data connectionData) bool {
	return isSettingKeyExists(data, "team", "runner-tx-hash")
}
func isSettingTeamPortConfigExists(data connectionData) bool {
	return isSettingKeyExists(data, "team-port", "config")
}
func isSettingTeamPortLacpKeyExists(data connectionData) bool {
	return isSettingKeyExists(data, "team-port", "lacp-key")
}
func isSettingTeamPortLacpPrioExists(data connectionData) bool {
	return isSettingKeyExists(data, "team-port", "lacp-prio")
}
func isSettingTeamPortPrioExists(data connectionData) bool {
	return isSettingKeyExists(data, "team-port", "prio")
}
func isSettingTeamPortQueueIdExists(data connectionData) bool {
	return isSettingKeyExists(data, "team-port", "queue-id")
}
func isSettingTeamPortStickyExists(data connectionData) bool {
	return isSettingKeyExists(data, "team-port", "sticky")
}
func isSettingTunGroupExists(data connectionData) bool {
	return isSettingKeyExists(data, "tun", "group")
}
func isSettingTunModeExists(data connectionData) bool {
	return isSettingKeyExists(data, "tun", "mode")
}
func isSettingTunMultiQueueExists(data connectionData) bool {
	return isSettingKeyExists(data, "tun", "multi-queue")
}
func isSettingTunOwnerExists(data connectionData) bool {
	return isSettingKeyExists(data, "tun", "owner")
}
func isSettingTunPiExists(data connectionData) bool {
	return isSettingKeyExists(data, "tun", "pi")
}
func isSettingTunVnetHdrExists(data connectionData) bool {
	return isSettingKeyExists(data, "tun", "vnet-hdr")
}
func isSettingUserDataExists(data connectionData) bool {
	return isSettingKeyExists(data, "user", "data")
}
func isSettingVlanEgressPriorityMapExists(data connectionData) bool {
	return isSettingKeyExists(data, "vlan", "egress-priority-map")
}
func isSettingVlanFlagsExists(data connectionData) bool {
	return isSettingKeyExists(data, "vlan", "flags")
}
func isSettingVlanIdExists(data connectionData) bool {
	return isSettingKeyExists(data, "vlan", "id")
}
func isSettingVlanIngressPriorityMapExists(data connectionData) bool {
	return isSettingKeyExists(data, "vlan", "ingress-priority-map")
}
func isSettingVlanParentExists(data connectionData) bool {
	return isSettingKeyExists(data, "vlan", "parent")
}
func isSettingVpnDataExists(data connectionData) bool {
	return isSettingKeyExists(data, "vpn", "data")
}
func isSettingVpnPersistentExists(data connectionData) bool {
	return isSettingKeyExists(data, "vpn", "persistent")
}
func isSettingVpnSecretsExists(data connectionData) bool {
	return isSettingKeyExists(data, "vpn", "secrets")
}
func isSettingVpnServiceTypeExists(data connectionData) bool {
	return isSettingKeyExists(data, "vpn", "service-type")
}
func isSettingVpnTimeoutExists(data connectionData) bool {
	return isSettingKeyExists(data, "vpn", "timeout")
}
func isSettingVpnUserNameExists(data connectionData) bool {
	return isSettingKeyExists(data, "vpn", "user-name")
}
func isSettingVxlanAgeingExists(data connectionData) bool {
	return isSettingKeyExists(data, "vxlan", "ageing")
}
func isSettingVxlanDestinationPortExists(data connectionData) bool {
	return isSettingKeyExists(data, "vxlan", "destination-port")
}
func isSettingVxlanIdExists(data connectionData) bool {
	return isSettingKeyExists(data, "vxlan", "id")
}
func isSettingVxlanL2MissExists(data connectionData) bool {
	return isSettingKeyExists(data, "vxlan", "l2-miss")
}
func isSettingVxlanL3MissExists(data connectionData) bool {
	return isSettingKeyExists(data, "vxlan", "l3-miss")
}
func isSettingVxlanLearningExists(data connectionData) bool {
	return isSettingKeyExists(data, "vxlan", "learning")
}
func isSettingVxlanLimitExists(data connectionData) bool {
	return isSettingKeyExists(data, "vxlan", "limit")
}
func isSettingVxlanLocalExists(data connectionData) bool {
	return isSettingKeyExists(data, "vxlan", "local")
}
func isSettingVxlanParentExists(data connectionData) bool {
	return isSettingKeyExists(data, "vxlan", "parent")
}
func isSettingVxlanProxyExists(data connectionData) bool {
	return isSettingKeyExists(data, "vxlan", "proxy")
}
func isSettingVxlanRemoteExists(data connectionData) bool {
	return isSettingKeyExists(data, "vxlan", "remote")
}
func isSettingVxlanRscExists(data connectionData) bool {
	return isSettingKeyExists(data, "vxlan", "rsc")
}
func isSettingVxlanSourcePortMaxExists(data connectionData) bool {
	return isSettingKeyExists(data, "vxlan", "source-port-max")
}
func isSettingVxlanSourcePortMinExists(data connectionData) bool {
	return isSettingKeyExists(data, "vxlan", "source-port-min")
}
func isSettingVxlanTosExists(data connectionData) bool {
	return isSettingKeyExists(data, "vxlan", "tos")
}
func isSettingVxlanTtlExists(data connectionData) bool {
	return isSettingKeyExists(data, "vxlan", "ttl")
}
func isSettingWimaxMacAddressExists(data connectionData) bool {
	return isSettingKeyExists(data, "wimax", "mac-address")
}
func isSettingWimaxNetworkNameExists(data connectionData) bool {
	return isSettingKeyExists(data, "wimax", "network-name")
}
func isSettingWiredAutoNegotiateExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-3-ethernet", "auto-negotiate")
}
func isSettingWiredClonedMacAddressExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-3-ethernet", "cloned-mac-address")
}
func isSettingWiredDuplexExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-3-ethernet", "duplex")
}
func isSettingWiredGenerateMacAddressMaskExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-3-ethernet", "generate-mac-address-mask")
}
func isSettingWiredMacAddressExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-3-ethernet", "mac-address")
}
func isSettingWiredMacAddressBlacklistExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-3-ethernet", "mac-address-blacklist")
}
func isSettingWiredMtuExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-3-ethernet", "mtu")
}
func isSettingWiredPortExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-3-ethernet", "port")
}
func isSettingWiredS390NettypeExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-3-ethernet", "s390-nettype")
}
func isSettingWiredS390OptionsExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-3-ethernet", "s390-options")
}
func isSettingWiredS390SubchannelsExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-3-ethernet", "s390-subchannels")
}
func isSettingWiredSpeedExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-3-ethernet", "speed")
}
func isSettingWiredWakeOnLanExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-3-ethernet", "wake-on-lan")
}
func isSettingWiredWakeOnLanPasswordExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-3-ethernet", "wake-on-lan-password")
}
func isSettingWirelessBandExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-11-wireless", "band")
}
func isSettingWirelessBssidExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-11-wireless", "bssid")
}
func isSettingWirelessChannelExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-11-wireless", "channel")
}
func isSettingWirelessClonedMacAddressExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-11-wireless", "cloned-mac-address")
}
func isSettingWirelessGenerateMacAddressMaskExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-11-wireless", "generate-mac-address-mask")
}
func isSettingWirelessHiddenExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-11-wireless", "hidden")
}
func isSettingWirelessMacAddressExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-11-wireless", "mac-address")
}
func isSettingWirelessMacAddressBlacklistExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-11-wireless", "mac-address-blacklist")
}
func isSettingWirelessMacAddressRandomizationExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-11-wireless", "mac-address-randomization")
}
func isSettingWirelessModeExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-11-wireless", "mode")
}
func isSettingWirelessMtuExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-11-wireless", "mtu")
}
func isSettingWirelessPowersaveExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-11-wireless", "powersave")
}
func isSettingWirelessRateExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-11-wireless", "rate")
}
func isSettingWirelessSeenBssidsExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-11-wireless", "seen-bssids")
}
func isSettingWirelessSsidExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-11-wireless", "ssid")
}
func isSettingWirelessTxPowerExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-11-wireless", "tx-power")
}
func isSettingWirelessSecurityAuthAlgExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-11-wireless-security", "auth-alg")
}
func isSettingWirelessSecurityGroupExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-11-wireless-security", "group")
}
func isSettingWirelessSecurityKeyMgmtExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-11-wireless-security", "key-mgmt")
}
func isSettingWirelessSecurityLeapPasswordExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-11-wireless-security", "leap-password")
}
func isSettingWirelessSecurityLeapPasswordFlagsExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-11-wireless-security", "leap-password-flags")
}
func isSettingWirelessSecurityLeapUsernameExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-11-wireless-security", "leap-username")
}
func isSettingWirelessSecurityPairwiseExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-11-wireless-security", "pairwise")
}
func isSettingWirelessSecurityPmfExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-11-wireless-security", "pmf")
}
func isSettingWirelessSecurityProtoExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-11-wireless-security", "proto")
}
func isSettingWirelessSecurityPskExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-11-wireless-security", "psk")
}
func isSettingWirelessSecurityPskFlagsExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-11-wireless-security", "psk-flags")
}
func isSettingWirelessSecurityWepKeyFlagsExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-11-wireless-security", "wep-key-flags")
}
func isSettingWirelessSecurityWepKeyTypeExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-11-wireless-security", "wep-key-type")
}
func isSettingWirelessSecurityWepKey0Exists(data connectionData) bool {
	return isSettingKeyExists(data, "802-11-wireless-security", "wep-key0")
}
func isSettingWirelessSecurityWepKey1Exists(data connectionData) bool {
	return isSettingKeyExists(data, "802-11-wireless-security", "wep-key1")
}
func isSettingWirelessSecurityWepKey2Exists(data connectionData) bool {
	return isSettingKeyExists(data, "802-11-wireless-security", "wep-key2")
}
func isSettingWirelessSecurityWepKey3Exists(data connectionData) bool {
	return isSettingKeyExists(data, "802-11-wireless-security", "wep-key3")
}
func isSettingWirelessSecurityWepTxKeyidxExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-11-wireless-security", "wep-tx-keyidx")
}
func isSettingWirelessSecurityWpsMethodExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-11-wireless-security", "wps-method")
}
func isSettingVpnL2tpKeyGatewayExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-l2tp", "gateway")
}
func isSettingVpnL2tpKeyUserExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-l2tp", "user")
}
func isSettingVpnL2tpKeyPasswordFlagsExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-l2tp", "password-flags")
}
func isSettingVpnL2tpKeyPasswordExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-l2tp", "password")
}
func isSettingVpnL2tpKeyDomainExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-l2tp", "domain")
}
func isSettingVpnL2tpKeyRequireMppeExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-l2tp-ppp", "require-mppe")
}
func isSettingVpnL2tpKeyRequireMppe40Exists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-l2tp-ppp", "require-mppe-40")
}
func isSettingVpnL2tpKeyRequireMppe128Exists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-l2tp-ppp", "require-mppe-128")
}
func isSettingVpnL2tpKeyMppeStatefulExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-l2tp-ppp", "mppe-stateful")
}
func isSettingVpnL2tpKeyRefuseEapExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-l2tp-ppp", "refuse-eap")
}
func isSettingVpnL2tpKeyRefusePapExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-l2tp-ppp", "refuse-pap")
}
func isSettingVpnL2tpKeyRefuseChapExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-l2tp-ppp", "refuse-chap")
}
func isSettingVpnL2tpKeyRefuseMschapExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-l2tp-ppp", "refuse-mschap")
}
func isSettingVpnL2tpKeyRefuseMschapv2Exists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-l2tp-ppp", "refuse-mschapv2")
}
func isSettingVpnL2tpKeyNobsdcompExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-l2tp-ppp", "nobsdcomp")
}
func isSettingVpnL2tpKeyNodeflateExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-l2tp-ppp", "nodeflate")
}
func isSettingVpnL2tpKeyNoVjCompExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-l2tp-ppp", "no-vj-comp")
}
func isSettingVpnL2tpKeyNoPcompExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-l2tp-ppp", "nopcomp")
}
func isSettingVpnL2tpKeyNoAccompExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-l2tp-ppp", "noaccomp")
}
func isSettingVpnL2tpKeyLcpEchoFailureExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-l2tp-ppp", "lcp-echo-failure")
}
func isSettingVpnL2tpKeyLcpEchoIntervalExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-l2tp-ppp", "lcp-echo-interval")
}
func isSettingVpnL2tpKeyIpsecEnableExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-l2tp-ipsec", "ipsec-enabled")
}
func isSettingVpnL2tpKeyIpsecGroupNameExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-l2tp-ipsec", "ipsec-group-name")
}
func isSettingVpnL2tpKeyIpsecGatewayIdExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-l2tp-ipsec", "ipsec-gateway-id")
}
func isSettingVpnL2tpKeyIpsecPskExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-l2tp-ipsec", "ipsec-psk")
}
func isSettingVpnL2tpKeyIpsecIkeExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-l2tp-ipsec", "ipsec-ike")
}
func isSettingVpnL2tpKeyIpsecEspExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-l2tp-ipsec", "ipsec-esp")
}
func isSettingVpnOpenconnectKeyGatewayExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openconnect", "gateway")
}
func isSettingVpnOpenconnectKeyCacertExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openconnect", "cacert")
}
func isSettingVpnOpenconnectKeyProxyExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openconnect", "proxy")
}
func isSettingVpnOpenconnectKeyCsdEnableExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openconnect", "enable_csd_trojan")
}
func isSettingVpnOpenconnectKeyCsdWrapperExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openconnect", "csd_wrapper")
}
func isSettingVpnOpenconnectKeyUsercertExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openconnect", "usercert")
}
func isSettingVpnOpenconnectKeyPrivkeyExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openconnect", "userkey")
}
func isSettingVpnOpenconnectKeyPemPassphraseFsidExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openconnect", "pem_passphrase_fsid")
}
func isSettingVpnOpenconnectKeyCookieExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openconnect", "cookie")
}
func isSettingVpnOpenconnectKeyGwcertExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openconnect", "gwcert")
}
func isSettingVpnOpenconnectKeyAuthtypeExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openconnect", "authtype")
}
func isSettingVpnOpenconnectKeyMtuExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openconnect", "mtu")
}
func isSettingVpnOpenconnectKeyStokenSourceExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openconnect", "stoken_source")
}
func isSettingVpnOpenconnectKeyStokenStringExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openconnect", "stoken_string")
}
func isSettingVpnOpenvpnKeyRemoteExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openvpn", "remote")
}
func isSettingVpnOpenvpnKeyConnectionTypeExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openvpn", "connection-type")
}
func isSettingVpnOpenvpnKeyUsernameExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openvpn", "username")
}
func isSettingVpnOpenvpnKeyPasswordFlagsExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openvpn", "password-flags")
}
func isSettingVpnOpenvpnKeyPasswordExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openvpn", "password")
}
func isSettingVpnOpenvpnKeyCaExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openvpn", "ca")
}
func isSettingVpnOpenvpnKeyCertExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openvpn", "cert")
}
func isSettingVpnOpenvpnKeyKeyExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openvpn", "key")
}
func isSettingVpnOpenvpnKeyCertpassFlagsExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openvpn", "cert-pass-flags")
}
func isSettingVpnOpenvpnKeyCertpassExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openvpn", "cert-pass")
}
func isSettingVpnOpenvpnKeyStaticKeyExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openvpn", "static-key")
}
func isSettingVpnOpenvpnKeyStaticKeyDirectionExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openvpn", "static-key-direction")
}
func isSettingVpnOpenvpnKeyRemoteIpExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openvpn", "remote-ip")
}
func isSettingVpnOpenvpnKeyLocalIpExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openvpn", "local-ip")
}
func isSettingVpnOpenvpnKeyPortExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openvpn-advanced", "port")
}
func isSettingVpnOpenvpnKeyRenegSecondsExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openvpn-advanced", "reneg-seconds")
}
func isSettingVpnOpenvpnKeyCompLzoExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openvpn-advanced", "comp-lzo")
}
func isSettingVpnOpenvpnKeyProtoTcpExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openvpn-advanced", "proto-tcp")
}
func isSettingVpnOpenvpnKeyTapDevExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openvpn-advanced", "tap-dev")
}
func isSettingVpnOpenvpnKeyTunnelMtuExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openvpn-advanced", "tunnel-mtu")
}
func isSettingVpnOpenvpnKeyFragmentSizeExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openvpn-advanced", "fragment-size")
}
func isSettingVpnOpenvpnKeyMssfixExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openvpn-advanced", "mssfix")
}
func isSettingVpnOpenvpnKeyRemoteRandomExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openvpn-advanced", "remote-random")
}
func isSettingVpnOpenvpnKeyCipherExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openvpn-security", "cipher")
}
func isSettingVpnOpenvpnKeyAuthExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openvpn-security", "auth")
}
func isSettingVpnOpenvpnKeyTlsRemoteExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openvpn-tlsauth", "tls-remote")
}
func isSettingVpnOpenvpnKeyRemoteCertTlsExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openvpn-tlsauth", "remote-cert-tls")
}
func isSettingVpnOpenvpnKeyTaExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openvpn-tlsauth", "ta")
}
func isSettingVpnOpenvpnKeyTaDirExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openvpn-tlsauth", "ta-dir")
}
func isSettingVpnOpenvpnKeyProxyTypeExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openvpn-proxies", "proxy-type")
}
func isSettingVpnOpenvpnKeyProxyServerExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openvpn-proxies", "proxy-server")
}
func isSettingVpnOpenvpnKeyProxyPortExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openvpn-proxies", "proxy-port")
}
func isSettingVpnOpenvpnKeyProxyRetryExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openvpn-proxies", "proxy-retry")
}
func isSettingVpnOpenvpnKeyHttpProxyUsernameExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openvpn-proxies", "http-proxy-username")
}
func isSettingVpnOpenvpnKeyHttpProxyPasswordExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openvpn-proxies", "http-proxy-password")
}
func isSettingVpnOpenvpnKeyHttpProxyPasswordFlagsExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openvpn-proxies", "http-proxy-password-flags")
}
func isSettingVpnPptpKeyGatewayExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-pptp", "gateway")
}
func isSettingVpnPptpKeyUserExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-pptp", "user")
}
func isSettingVpnPptpKeyPasswordFlagsExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-pptp", "password-flags")
}
func isSettingVpnPptpKeyPasswordExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-pptp", "password")
}
func isSettingVpnPptpKeyDomainExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-pptp", "domain")
}
func isSettingVpnPptpKeyRequireMppeExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-pptp-ppp", "require-mppe")
}
func isSettingVpnPptpKeyRequireMppe40Exists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-pptp-ppp", "require-mppe-40")
}
func isSettingVpnPptpKeyRequireMppe128Exists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-pptp-ppp", "require-mppe-128")
}
func isSettingVpnPptpKeyMppeStatefulExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-pptp-ppp", "mppe-stateful")
}
func isSettingVpnPptpKeyRefuseEapExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-pptp-ppp", "refuse-eap")
}
func isSettingVpnPptpKeyRefusePapExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-pptp-ppp", "refuse-pap")
}
func isSettingVpnPptpKeyRefuseChapExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-pptp-ppp", "refuse-chap")
}
func isSettingVpnPptpKeyRefuseMschapExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-pptp-ppp", "refuse-mschap")
}
func isSettingVpnPptpKeyRefuseMschapv2Exists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-pptp-ppp", "refuse-mschapv2")
}
func isSettingVpnPptpKeyNobsdcompExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-pptp-ppp", "nobsdcomp")
}
func isSettingVpnPptpKeyNodeflateExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-pptp-ppp", "nodeflate")
}
func isSettingVpnPptpKeyNoVjCompExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-pptp-ppp", "no-vj-comp")
}
func isSettingVpnPptpKeyLcpEchoFailureExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-pptp-ppp", "lcp-echo-failure")
}
func isSettingVpnPptpKeyLcpEchoIntervalExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-pptp-ppp", "lcp-echo-interval")
}
func isSettingVpnStrongswanKeyAddressExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-strongswan", "address")
}
func isSettingVpnStrongswanKeyCertificateExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-strongswan", "certificate")
}
func isSettingVpnStrongswanKeyMethodExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-strongswan", "method")
}
func isSettingVpnStrongswanKeyUserExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-strongswan", "user")
}
func isSettingVpnStrongswanKeyUsercertExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-strongswan", "usercert")
}
func isSettingVpnStrongswanKeyUserkeyExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-strongswan", "userkey")
}
func isSettingVpnStrongswanKeyPasswordExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-strongswan", "password")
}
func isSettingVpnStrongswanKeyPasswordFlagsExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-strongswan", "password-flags")
}
func isSettingVpnStrongswanKeyVirtualExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-strongswan", "virtual")
}
func isSettingVpnStrongswanKeyEncapExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-strongswan", "encap")
}
func isSettingVpnStrongswanKeyIpcompExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-strongswan", "ipcomp")
}
func isSettingVpnVpncKeyGatewayExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-vpnc", "IPSec gateway")
}
func isSettingVpnVpncKeyXauthUserExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-vpnc", "Xauth username")
}
func isSettingVpnVpncKeyXauthPasswordTypeExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-vpnc", "xauth-password-type")
}
func isSettingVpnVpncKeyXauthPasswordFlagsExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-vpnc", "Xauth password-flags")
}
func isSettingVpnVpncKeyXauthPasswordExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-vpnc", "Xauth password")
}
func isSettingVpnVpncKeyIdExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-vpnc", "IPSec ID")
}
func isSettingVpnVpncKeySecretTypeExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-vpnc", "ipsec-secret-type")
}
func isSettingVpnVpncKeySecretFlagsExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-vpnc", "IPSec secret-flags")
}
func isSettingVpnVpncKeySecretExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-vpnc", "IPSec secret")
}
func isSettingVpnVpncKeyAuthmodeExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-vpnc", "IKE Authmode")
}
func isSettingVpnVpncKeyCaFileExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-vpnc", "CA-File")
}
func isSettingVpnVpncKeyDomainExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-vpnc-advanced", "Domain")
}
func isSettingVpnVpncKeyVendorExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-vpnc-advanced", "Vendor")
}
func isSettingVpnVpncKeyAppVersionExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-vpnc-advanced", "Application Version")
}
func isSettingVpnVpncKeySingleDesExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-vpnc-advanced", "Enable Single DES")
}
func isSettingVpnVpncKeyNoEncryptionExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-vpnc-advanced", "Enable no encryption")
}
func isSettingVpnVpncKeyNatTraversalModeExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-vpnc-advanced", "NAT Traversal Mode")
}
func isSettingVpnVpncKeyDhgroupExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-vpnc-advanced", "IKE DH Group")
}
func isSettingVpnVpncKeyPerfectForwardExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-vpnc-advanced", "Perfect Forward Secrecy")
}
func isSettingVpnVpncKeyLocalPortExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-vpnc-advanced", "Local Port")
}
func isSettingVpnVpncKeyDpdIdleTimeoutExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-vpnc-advanced", "DPD idle timeout (our side)")
}
func isSettingVpnVpncKeyCiscoUdpEncapsPortExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-vpnc-advanced", "Cisco UDP Encapsulation Port")
}

// Getter
func getSetting8021xAltsubjectMatches(data connectionData) (value []string) {
	ivalue := getSettingKey(data, "802-1x", "altsubject-matches")
	value = interfaceToArrayString(ivalue)
	return
}
func getSetting8021xAnonymousIdentity(data connectionData) (value string) {
	ivalue := getSettingKey(data, "802-1x", "anonymous-identity")
	value = interfaceToString(ivalue)
	return
}
func getSetting8021xAuthTimeout(data connectionData) (value int32) {
	ivalue := getSettingKey(data, "802-1x", "auth-timeout")
	value = interfaceToInt32(ivalue)
	return
}
func getSetting8021xCaCert(data connectionData) (value []byte) {
	ivalue := getSettingKey(data, "802-1x", "ca-cert")
	value = interfaceToArrayByte(ivalue)
	return
}
func getSetting8021xCaCertPassword(data connectionData) (value string) {
	ivalue := getSettingKey(data, "802-1x", "ca-cert-password")
	value = interfaceToString(ivalue)
	return
}
func getSetting8021xCaCertPasswordFlags(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "802-1x", "ca-cert-password-flags")
	value = interfaceToUint32(ivalue)
	return
}
func getSetting8021xCaPath(data connectionData) (value string) {
	ivalue := getSettingKey(data, "802-1x", "ca-path")
	value = interfaceToString(ivalue)
	return
}
func getSetting8021xClientCert(data connectionData) (value []byte) {
	ivalue := getSettingKey(data, "802-1x", "client-cert")
	value = interfaceToArrayByte(ivalue)
	return
}
func getSetting8021xClientCertPassword(data connectionData) (value string) {
	ivalue := getSettingKey(data, "802-1x", "client-cert-password")
	value = interfaceToString(ivalue)
	return
}
func getSetting8021xClientCertPasswordFlags(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "802-1x", "client-cert-password-flags")
	value = interfaceToUint32(ivalue)
	return
}
func getSetting8021xDomainSuffixMatch(data connectionData) (value string) {
	ivalue := getSettingKey(data, "802-1x", "domain-suffix-match")
	value = interfaceToString(ivalue)
	return
}
func getSetting8021xEap(data connectionData) (value []string) {
	ivalue := getSettingKey(data, "802-1x", "eap")
	value = interfaceToArrayString(ivalue)
	return
}
func getSetting8021xIdentity(data connectionData) (value string) {
	ivalue := getSettingKey(data, "802-1x", "identity")
	value = interfaceToString(ivalue)
	return
}
func getSetting8021xPacFile(data connectionData) (value string) {
	ivalue := getSettingKey(data, "802-1x", "pac-file")
	value = interfaceToString(ivalue)
	return
}
func getSetting8021xPassword(data connectionData) (value string) {
	ivalue := getSettingKey(data, "802-1x", "password")
	value = interfaceToString(ivalue)
	return
}
func getSetting8021xPasswordFlags(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "802-1x", "password-flags")
	value = interfaceToUint32(ivalue)
	return
}
func getSetting8021xPasswordRaw(data connectionData) (value []byte) {
	ivalue := getSettingKey(data, "802-1x", "password-raw")
	value = interfaceToArrayByte(ivalue)
	return
}
func getSetting8021xPasswordRawFlags(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "802-1x", "password-raw-flags")
	value = interfaceToUint32(ivalue)
	return
}
func getSetting8021xPhase1AuthFlags(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "802-1x", "phase1-auth-flags")
	value = interfaceToUint32(ivalue)
	return
}
func getSetting8021xPhase1FastProvisioning(data connectionData) (value string) {
	ivalue := getSettingKey(data, "802-1x", "phase1-fast-provisioning")
	value = interfaceToString(ivalue)
	return
}
func getSetting8021xPhase1Peaplabel(data connectionData) (value string) {
	ivalue := getSettingKey(data, "802-1x", "phase1-peaplabel")
	value = interfaceToString(ivalue)
	return
}
func getSetting8021xPhase1Peapver(data connectionData) (value string) {
	ivalue := getSettingKey(data, "802-1x", "phase1-peapver")
	value = interfaceToString(ivalue)
	return
}
func getSetting8021xPhase2AltsubjectMatches(data connectionData) (value []string) {
	ivalue := getSettingKey(data, "802-1x", "phase2-altsubject-matches")
	value = interfaceToArrayString(ivalue)
	return
}
func getSetting8021xPhase2Auth(data connectionData) (value string) {
	ivalue := getSettingKey(data, "802-1x", "phase2-auth")
	value = interfaceToString(ivalue)
	return
}
func getSetting8021xPhase2Autheap(data connectionData) (value string) {
	ivalue := getSettingKey(data, "802-1x", "phase2-autheap")
	value = interfaceToString(ivalue)
	return
}
func getSetting8021xPhase2CaCert(data connectionData) (value []byte) {
	ivalue := getSettingKey(data, "802-1x", "phase2-ca-cert")
	value = interfaceToArrayByte(ivalue)
	return
}
func getSetting8021xPhase2CaCertPassword(data connectionData) (value string) {
	ivalue := getSettingKey(data, "802-1x", "phase2-ca-cert-password")
	value = interfaceToString(ivalue)
	return
}
func getSetting8021xPhase2CaCertPasswordFlags(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "802-1x", "phase2-ca-cert-password-flags")
	value = interfaceToUint32(ivalue)
	return
}
func getSetting8021xPhase2CaPath(data connectionData) (value string) {
	ivalue := getSettingKey(data, "802-1x", "phase2-ca-path")
	value = interfaceToString(ivalue)
	return
}
func getSetting8021xPhase2ClientCert(data connectionData) (value []byte) {
	ivalue := getSettingKey(data, "802-1x", "phase2-client-cert")
	value = interfaceToArrayByte(ivalue)
	return
}
func getSetting8021xPhase2ClientCertPassword(data connectionData) (value string) {
	ivalue := getSettingKey(data, "802-1x", "phase2-client-cert-password")
	value = interfaceToString(ivalue)
	return
}
func getSetting8021xPhase2ClientCertPasswordFlags(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "802-1x", "phase2-client-cert-password-flags")
	value = interfaceToUint32(ivalue)
	return
}
func getSetting8021xPhase2DomainSuffixMatch(data connectionData) (value string) {
	ivalue := getSettingKey(data, "802-1x", "phase2-domain-suffix-match")
	value = interfaceToString(ivalue)
	return
}
func getSetting8021xPhase2PrivateKey(data connectionData) (value []byte) {
	ivalue := getSettingKey(data, "802-1x", "phase2-private-key")
	value = interfaceToArrayByte(ivalue)
	return
}
func getSetting8021xPhase2PrivateKeyPassword(data connectionData) (value string) {
	ivalue := getSettingKey(data, "802-1x", "phase2-private-key-password")
	value = interfaceToString(ivalue)
	return
}
func getSetting8021xPhase2PrivateKeyPasswordFlags(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "802-1x", "phase2-private-key-password-flags")
	value = interfaceToUint32(ivalue)
	return
}
func getSetting8021xPhase2SubjectMatch(data connectionData) (value string) {
	ivalue := getSettingKey(data, "802-1x", "phase2-subject-match")
	value = interfaceToString(ivalue)
	return
}
func getSetting8021xPin(data connectionData) (value string) {
	ivalue := getSettingKey(data, "802-1x", "pin")
	value = interfaceToString(ivalue)
	return
}
func getSetting8021xPinFlags(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "802-1x", "pin-flags")
	value = interfaceToUint32(ivalue)
	return
}
func getSetting8021xPrivateKey(data connectionData) (value []byte) {
	ivalue := getSettingKey(data, "802-1x", "private-key")
	value = interfaceToArrayByte(ivalue)
	return
}
func getSetting8021xPrivateKeyPassword(data connectionData) (value string) {
	ivalue := getSettingKey(data, "802-1x", "private-key-password")
	value = interfaceToString(ivalue)
	return
}
func getSetting8021xPrivateKeyPasswordFlags(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "802-1x", "private-key-password-flags")
	value = interfaceToUint32(ivalue)
	return
}
func getSetting8021xSubjectMatch(data connectionData) (value string) {
	ivalue := getSettingKey(data, "802-1x", "subject-match")
	value = interfaceToString(ivalue)
	return
}
func getSetting8021xSystemCaCerts(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "802-1x", "system-ca-certs")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingAdslEncapsulation(data connectionData) (value string) {
	ivalue := getSettingKey(data, "adsl", "encapsulation")
	value = interfaceToString(ivalue)
	return
}
func getSettingAdslPassword(data connectionData) (value string) {
	ivalue := getSettingKey(data, "adsl", "password")
	value = interfaceToString(ivalue)
	return
}
func getSettingAdslPasswordFlags(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "adsl", "password-flags")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingAdslProtocol(data connectionData) (value string) {
	ivalue := getSettingKey(data, "adsl", "protocol")
	value = interfaceToString(ivalue)
	return
}
func getSettingAdslUsername(data connectionData) (value string) {
	ivalue := getSettingKey(data, "adsl", "username")
	value = interfaceToString(ivalue)
	return
}
func getSettingAdslVci(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "adsl", "vci")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingAdslVpi(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "adsl", "vpi")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingBluetoothBdaddr(data connectionData) (value []byte) {
	ivalue := getSettingKey(data, "bluetooth", "bdaddr")
	value = interfaceToArrayByte(ivalue)
	return
}
func getSettingBluetoothType(data connectionData) (value string) {
	ivalue := getSettingKey(data, "bluetooth", "type")
	value = interfaceToString(ivalue)
	return
}
func getSettingBondOptions(data connectionData) (value map[string]string) {
	ivalue := getSettingKey(data, "bond", "options")
	value = interfaceToDictStringString(ivalue)
	return
}
func getSettingBridgeAgeingTime(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "bridge", "ageing-time")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingBridgeForwardDelay(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "bridge", "forward-delay")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingBridgeGroupForwardMask(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "bridge", "group-forward-mask")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingBridgeHelloTime(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "bridge", "hello-time")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingBridgeMacAddress(data connectionData) (value []byte) {
	ivalue := getSettingKey(data, "bridge", "mac-address")
	value = interfaceToArrayByte(ivalue)
	return
}
func getSettingBridgeMaxAge(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "bridge", "max-age")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingBridgeMulticastSnooping(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "bridge", "multicast-snooping")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingBridgePriority(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "bridge", "priority")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingBridgeStp(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "bridge", "stp")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingBridgePortHairpinMode(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "bridge-port", "hairpin-mode")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingBridgePortPathCost(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "bridge-port", "path-cost")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingBridgePortPriority(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "bridge-port", "priority")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingCdmaMtu(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "cdma", "mtu")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingCdmaNumber(data connectionData) (value string) {
	ivalue := getSettingKey(data, "cdma", "number")
	value = interfaceToString(ivalue)
	return
}
func getSettingCdmaPassword(data connectionData) (value string) {
	ivalue := getSettingKey(data, "cdma", "password")
	value = interfaceToString(ivalue)
	return
}
func getSettingCdmaPasswordFlags(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "cdma", "password-flags")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingCdmaUsername(data connectionData) (value string) {
	ivalue := getSettingKey(data, "cdma", "username")
	value = interfaceToString(ivalue)
	return
}
func getSettingConnectionAuthRetries(data connectionData) (value int32) {
	ivalue := getSettingKey(data, "connection", "auth-retries")
	value = interfaceToInt32(ivalue)
	return
}
func getSettingConnectionAutoconnect(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "connection", "autoconnect")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingConnectionAutoconnectPriority(data connectionData) (value int32) {
	ivalue := getSettingKey(data, "connection", "autoconnect-priority")
	value = interfaceToInt32(ivalue)
	return
}
func getSettingConnectionAutoconnectRetries(data connectionData) (value int32) {
	ivalue := getSettingKey(data, "connection", "autoconnect-retries")
	value = interfaceToInt32(ivalue)
	return
}
func getSettingConnectionAutoconnectSlaves(data connectionData) (value int32) {
	ivalue := getSettingKey(data, "connection", "autoconnect-slaves")
	value = interfaceToInt32(ivalue)
	return
}
func getSettingConnectionGatewayPingTimeout(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "connection", "gateway-ping-timeout")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingConnectionId(data connectionData) (value string) {
	ivalue := getSettingKey(data, "connection", "id")
	value = interfaceToString(ivalue)
	return
}
func getSettingConnectionInterfaceName(data connectionData) (value string) {
	ivalue := getSettingKey(data, "connection", "interface-name")
	value = interfaceToString(ivalue)
	return
}
func getSettingConnectionLldp(data connectionData) (value int32) {
	ivalue := getSettingKey(data, "connection", "lldp")
	value = interfaceToInt32(ivalue)
	return
}
func getSettingConnectionMaster(data connectionData) (value string) {
	ivalue := getSettingKey(data, "connection", "master")
	value = interfaceToString(ivalue)
	return
}
func getSettingConnectionMetered(data connectionData) (value int32) {
	ivalue := getSettingKey(data, "connection", "metered")
	value = interfaceToInt32(ivalue)
	return
}
func getSettingConnectionPermissions(data connectionData) (value []string) {
	ivalue := getSettingKey(data, "connection", "permissions")
	value = interfaceToArrayString(ivalue)
	return
}
func getSettingConnectionReadOnly(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "connection", "read-only")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingConnectionSecondaries(data connectionData) (value []string) {
	ivalue := getSettingKey(data, "connection", "secondaries")
	value = interfaceToArrayString(ivalue)
	return
}
func getSettingConnectionSlaveType(data connectionData) (value string) {
	ivalue := getSettingKey(data, "connection", "slave-type")
	value = interfaceToString(ivalue)
	return
}
func getSettingConnectionStableId(data connectionData) (value string) {
	ivalue := getSettingKey(data, "connection", "stable-id")
	value = interfaceToString(ivalue)
	return
}
func getSettingConnectionTimestamp(data connectionData) (value uint64) {
	ivalue := getSettingKey(data, "connection", "timestamp")
	value = interfaceToUint64(ivalue)
	return
}
func getSettingConnectionType(data connectionData) (value string) {
	ivalue := getSettingKey(data, "connection", "type")
	value = interfaceToString(ivalue)
	return
}
func getSettingConnectionUuid(data connectionData) (value string) {
	ivalue := getSettingKey(data, "connection", "uuid")
	value = interfaceToString(ivalue)
	return
}
func getSettingConnectionZone(data connectionData) (value string) {
	ivalue := getSettingKey(data, "connection", "zone")
	value = interfaceToString(ivalue)
	return
}
func getSettingDcbAppFcoeFlags(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "dcb", "app-fcoe-flags")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingDcbAppFcoeMode(data connectionData) (value string) {
	ivalue := getSettingKey(data, "dcb", "app-fcoe-mode")
	value = interfaceToString(ivalue)
	return
}
func getSettingDcbAppFcoePriority(data connectionData) (value int32) {
	ivalue := getSettingKey(data, "dcb", "app-fcoe-priority")
	value = interfaceToInt32(ivalue)
	return
}
func getSettingDcbAppFipFlags(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "dcb", "app-fip-flags")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingDcbAppFipPriority(data connectionData) (value int32) {
	ivalue := getSettingKey(data, "dcb", "app-fip-priority")
	value = interfaceToInt32(ivalue)
	return
}
func getSettingDcbAppIscsiFlags(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "dcb", "app-iscsi-flags")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingDcbAppIscsiPriority(data connectionData) (value int32) {
	ivalue := getSettingKey(data, "dcb", "app-iscsi-priority")
	value = interfaceToInt32(ivalue)
	return
}
func getSettingDcbPriorityBandwidth(data connectionData) (value []uint32) {
	ivalue := getSettingKey(data, "dcb", "priority-bandwidth")
	value = interfaceToArrayUint32(ivalue)
	return
}
func getSettingDcbPriorityFlowControl(data connectionData) (value []uint32) {
	ivalue := getSettingKey(data, "dcb", "priority-flow-control")
	value = interfaceToArrayUint32(ivalue)
	return
}
func getSettingDcbPriorityFlowControlFlags(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "dcb", "priority-flow-control-flags")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingDcbPriorityGroupBandwidth(data connectionData) (value []uint32) {
	ivalue := getSettingKey(data, "dcb", "priority-group-bandwidth")
	value = interfaceToArrayUint32(ivalue)
	return
}
func getSettingDcbPriorityGroupFlags(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "dcb", "priority-group-flags")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingDcbPriorityGroupId(data connectionData) (value []uint32) {
	ivalue := getSettingKey(data, "dcb", "priority-group-id")
	value = interfaceToArrayUint32(ivalue)
	return
}
func getSettingDcbPriorityStrictBandwidth(data connectionData) (value []uint32) {
	ivalue := getSettingKey(data, "dcb", "priority-strict-bandwidth")
	value = interfaceToArrayUint32(ivalue)
	return
}
func getSettingDcbPriorityTrafficClass(data connectionData) (value []uint32) {
	ivalue := getSettingKey(data, "dcb", "priority-traffic-class")
	value = interfaceToArrayUint32(ivalue)
	return
}
func getSettingGsmApn(data connectionData) (value string) {
	ivalue := getSettingKey(data, "gsm", "apn")
	value = interfaceToString(ivalue)
	return
}
func getSettingGsmDeviceId(data connectionData) (value string) {
	ivalue := getSettingKey(data, "gsm", "device-id")
	value = interfaceToString(ivalue)
	return
}
func getSettingGsmHomeOnly(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "gsm", "home-only")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingGsmMtu(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "gsm", "mtu")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingGsmNetworkId(data connectionData) (value string) {
	ivalue := getSettingKey(data, "gsm", "network-id")
	value = interfaceToString(ivalue)
	return
}
func getSettingGsmNumber(data connectionData) (value string) {
	ivalue := getSettingKey(data, "gsm", "number")
	value = interfaceToString(ivalue)
	return
}
func getSettingGsmPassword(data connectionData) (value string) {
	ivalue := getSettingKey(data, "gsm", "password")
	value = interfaceToString(ivalue)
	return
}
func getSettingGsmPasswordFlags(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "gsm", "password-flags")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingGsmPin(data connectionData) (value string) {
	ivalue := getSettingKey(data, "gsm", "pin")
	value = interfaceToString(ivalue)
	return
}
func getSettingGsmPinFlags(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "gsm", "pin-flags")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingGsmSimId(data connectionData) (value string) {
	ivalue := getSettingKey(data, "gsm", "sim-id")
	value = interfaceToString(ivalue)
	return
}
func getSettingGsmSimOperatorId(data connectionData) (value string) {
	ivalue := getSettingKey(data, "gsm", "sim-operator-id")
	value = interfaceToString(ivalue)
	return
}
func getSettingGsmUsername(data connectionData) (value string) {
	ivalue := getSettingKey(data, "gsm", "username")
	value = interfaceToString(ivalue)
	return
}
func getSettingInfinibandMacAddress(data connectionData) (value []byte) {
	ivalue := getSettingKey(data, "infiniband", "mac-address")
	value = interfaceToArrayByte(ivalue)
	return
}
func getSettingInfinibandMtu(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "infiniband", "mtu")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingInfinibandPKey(data connectionData) (value int32) {
	ivalue := getSettingKey(data, "infiniband", "p-key")
	value = interfaceToInt32(ivalue)
	return
}
func getSettingInfinibandParent(data connectionData) (value string) {
	ivalue := getSettingKey(data, "infiniband", "parent")
	value = interfaceToString(ivalue)
	return
}
func getSettingInfinibandTransportMode(data connectionData) (value string) {
	ivalue := getSettingKey(data, "infiniband", "transport-mode")
	value = interfaceToString(ivalue)
	return
}
func getSettingIP4ConfigAddresses(data connectionData) (value [][]uint32) {
	ivalue := getSettingKey(data, "ipv4", "addresses")
	value = interfaceToArrayArrayUint32(ivalue)
	return
}
func getSettingIP4ConfigDadTimeout(data connectionData) (value int32) {
	ivalue := getSettingKey(data, "ipv4", "dad-timeout")
	value = interfaceToInt32(ivalue)
	return
}
func getSettingIP4ConfigDhcpClientId(data connectionData) (value string) {
	ivalue := getSettingKey(data, "ipv4", "dhcp-client-id")
	value = interfaceToString(ivalue)
	return
}
func getSettingIP4ConfigDhcpFqdn(data connectionData) (value string) {
	ivalue := getSettingKey(data, "ipv4", "dhcp-fqdn")
	value = interfaceToString(ivalue)
	return
}
func getSettingIP4ConfigDhcpHostname(data connectionData) (value string) {
	ivalue := getSettingKey(data, "ipv4", "dhcp-hostname")
	value = interfaceToString(ivalue)
	return
}
func getSettingIP4ConfigDhcpSendHostname(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "ipv4", "dhcp-send-hostname")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingIP4ConfigDhcpTimeout(data connectionData) (value int32) {
	ivalue := getSettingKey(data, "ipv4", "dhcp-timeout")
	value = interfaceToInt32(ivalue)
	return
}
func getSettingIP4ConfigDns(data connectionData) (value []uint32) {
	ivalue := getSettingKey(data, "ipv4", "dns")
	value = interfaceToArrayUint32(ivalue)
	return
}
func getSettingIP4ConfigDnsOptions(data connectionData) (value []string) {
	ivalue := getSettingKey(data, "ipv4", "dns-options")
	value = interfaceToArrayString(ivalue)
	return
}
func getSettingIP4ConfigDnsPriority(data connectionData) (value int32) {
	ivalue := getSettingKey(data, "ipv4", "dns-priority")
	value = interfaceToInt32(ivalue)
	return
}
func getSettingIP4ConfigDnsSearch(data connectionData) (value []string) {
	ivalue := getSettingKey(data, "ipv4", "dns-search")
	value = interfaceToArrayString(ivalue)
	return
}
func getSettingIP4ConfigGateway(data connectionData) (value string) {
	ivalue := getSettingKey(data, "ipv4", "gateway")
	value = interfaceToString(ivalue)
	return
}
func getSettingIP4ConfigIgnoreAutoDns(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "ipv4", "ignore-auto-dns")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingIP4ConfigIgnoreAutoRoutes(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "ipv4", "ignore-auto-routes")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingIP4ConfigMayFail(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "ipv4", "may-fail")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingIP4ConfigMethod(data connectionData) (value string) {
	ivalue := getSettingKey(data, "ipv4", "method")
	value = interfaceToString(ivalue)
	return
}
func getSettingIP4ConfigNeverDefault(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "ipv4", "never-default")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingIP4ConfigRouteMetric(data connectionData) (value int64) {
	ivalue := getSettingKey(data, "ipv4", "route-metric")
	value = interfaceToInt64(ivalue)
	return
}
func getSettingIP4ConfigRouteTable(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "ipv4", "route-table")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingIP4ConfigRoutes(data connectionData) (value [][]uint32) {
	ivalue := getSettingKey(data, "ipv4", "routes")
	value = interfaceToArrayArrayUint32(ivalue)
	return
}
func getSettingIP6ConfigAddrGenMode(data connectionData) (value int32) {
	ivalue := getSettingKey(data, "ipv6", "addr-gen-mode")
	value = interfaceToInt32(ivalue)
	return
}
func getSettingIP6ConfigAddresses(data connectionData) (value ipv6Addresses) {
	ivalue := getSettingKey(data, "ipv6", "addresses")
	value = interfaceToIpv6Addresses(ivalue)
	return
}
func getSettingIP6ConfigDadTimeout(data connectionData) (value int32) {
	ivalue := getSettingKey(data, "ipv6", "dad-timeout")
	value = interfaceToInt32(ivalue)
	return
}
func getSettingIP6ConfigDhcpHostname(data connectionData) (value string) {
	ivalue := getSettingKey(data, "ipv6", "dhcp-hostname")
	value = interfaceToString(ivalue)
	return
}
func getSettingIP6ConfigDhcpSendHostname(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "ipv6", "dhcp-send-hostname")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingIP6ConfigDhcpTimeout(data connectionData) (value int32) {
	ivalue := getSettingKey(data, "ipv6", "dhcp-timeout")
	value = interfaceToInt32(ivalue)
	return
}
func getSettingIP6ConfigDns(data connectionData) (value [][]byte) {
	ivalue := getSettingKey(data, "ipv6", "dns")
	value = interfaceToArrayArrayByte(ivalue)
	return
}
func getSettingIP6ConfigDnsOptions(data connectionData) (value []string) {
	ivalue := getSettingKey(data, "ipv6", "dns-options")
	value = interfaceToArrayString(ivalue)
	return
}
func getSettingIP6ConfigDnsPriority(data connectionData) (value int32) {
	ivalue := getSettingKey(data, "ipv6", "dns-priority")
	value = interfaceToInt32(ivalue)
	return
}
func getSettingIP6ConfigDnsSearch(data connectionData) (value []string) {
	ivalue := getSettingKey(data, "ipv6", "dns-search")
	value = interfaceToArrayString(ivalue)
	return
}
func getSettingIP6ConfigGateway(data connectionData) (value string) {
	ivalue := getSettingKey(data, "ipv6", "gateway")
	value = interfaceToString(ivalue)
	return
}
func getSettingIP6ConfigIgnoreAutoDns(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "ipv6", "ignore-auto-dns")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingIP6ConfigIgnoreAutoRoutes(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "ipv6", "ignore-auto-routes")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingIP6ConfigIp6Privacy(data connectionData) (value int32) {
	ivalue := getSettingKey(data, "ipv6", "ip6-privacy")
	value = interfaceToInt32(ivalue)
	return
}
func getSettingIP6ConfigMayFail(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "ipv6", "may-fail")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingIP6ConfigMethod(data connectionData) (value string) {
	ivalue := getSettingKey(data, "ipv6", "method")
	value = interfaceToString(ivalue)
	return
}
func getSettingIP6ConfigNeverDefault(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "ipv6", "never-default")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingIP6ConfigRouteMetric(data connectionData) (value int64) {
	ivalue := getSettingKey(data, "ipv6", "route-metric")
	value = interfaceToInt64(ivalue)
	return
}
func getSettingIP6ConfigRouteTable(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "ipv6", "route-table")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingIP6ConfigRoutes(data connectionData) (value ipv6Routes) {
	ivalue := getSettingKey(data, "ipv6", "routes")
	value = interfaceToIpv6Routes(ivalue)
	return
}
func getSettingIP6ConfigToken(data connectionData) (value string) {
	ivalue := getSettingKey(data, "ipv6", "token")
	value = interfaceToString(ivalue)
	return
}
func getSettingIPTunnelEncapsulationLimit(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "ip-tunnel", "encapsulation-limit")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingIPTunnelFlowLabel(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "ip-tunnel", "flow-label")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingIPTunnelInputKey(data connectionData) (value string) {
	ivalue := getSettingKey(data, "ip-tunnel", "input-key")
	value = interfaceToString(ivalue)
	return
}
func getSettingIPTunnelLocal(data connectionData) (value string) {
	ivalue := getSettingKey(data, "ip-tunnel", "local")
	value = interfaceToString(ivalue)
	return
}
func getSettingIPTunnelMode(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "ip-tunnel", "mode")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingIPTunnelMtu(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "ip-tunnel", "mtu")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingIPTunnelOutputKey(data connectionData) (value string) {
	ivalue := getSettingKey(data, "ip-tunnel", "output-key")
	value = interfaceToString(ivalue)
	return
}
func getSettingIPTunnelParent(data connectionData) (value string) {
	ivalue := getSettingKey(data, "ip-tunnel", "parent")
	value = interfaceToString(ivalue)
	return
}
func getSettingIPTunnelPathMtuDiscovery(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "ip-tunnel", "path-mtu-discovery")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingIPTunnelRemote(data connectionData) (value string) {
	ivalue := getSettingKey(data, "ip-tunnel", "remote")
	value = interfaceToString(ivalue)
	return
}
func getSettingIPTunnelTos(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "ip-tunnel", "tos")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingIPTunnelTtl(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "ip-tunnel", "ttl")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingMacsecEncrypt(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "macsec", "encrypt")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingMacsecMkaCak(data connectionData) (value string) {
	ivalue := getSettingKey(data, "macsec", "mka-cak")
	value = interfaceToString(ivalue)
	return
}
func getSettingMacsecMkaCakFlags(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "macsec", "mka-cak-flags")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingMacsecMkaCkn(data connectionData) (value string) {
	ivalue := getSettingKey(data, "macsec", "mka-ckn")
	value = interfaceToString(ivalue)
	return
}
func getSettingMacsecMode(data connectionData) (value int32) {
	ivalue := getSettingKey(data, "macsec", "mode")
	value = interfaceToInt32(ivalue)
	return
}
func getSettingMacsecParent(data connectionData) (value string) {
	ivalue := getSettingKey(data, "macsec", "parent")
	value = interfaceToString(ivalue)
	return
}
func getSettingMacsecPort(data connectionData) (value int32) {
	ivalue := getSettingKey(data, "macsec", "port")
	value = interfaceToInt32(ivalue)
	return
}
func getSettingMacsecValidation(data connectionData) (value int32) {
	ivalue := getSettingKey(data, "macsec", "validation")
	value = interfaceToInt32(ivalue)
	return
}
func getSettingMacvlanMode(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "macvlan", "mode")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingMacvlanParent(data connectionData) (value string) {
	ivalue := getSettingKey(data, "macvlan", "parent")
	value = interfaceToString(ivalue)
	return
}
func getSettingMacvlanPromiscuous(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "macvlan", "promiscuous")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingMacvlanTap(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "macvlan", "tap")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingOlpcMeshChannel(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "802-11-olpc-mesh", "channel")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingOlpcMeshDhcpAnycastAddress(data connectionData) (value []byte) {
	ivalue := getSettingKey(data, "802-11-olpc-mesh", "dhcp-anycast-address")
	value = interfaceToArrayByte(ivalue)
	return
}
func getSettingOlpcMeshSsid(data connectionData) (value []byte) {
	ivalue := getSettingKey(data, "802-11-olpc-mesh", "ssid")
	value = interfaceToArrayByte(ivalue)
	return
}
func getSettingOvsBridgeFailMode(data connectionData) (value string) {
	ivalue := getSettingKey(data, "ovs-bridge", "fail-mode")
	value = interfaceToString(ivalue)
	return
}
func getSettingOvsBridgeMcastSnoopingEnable(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "ovs-bridge", "mcast-snooping-enable")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingOvsBridgeRstpEnable(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "ovs-bridge", "rstp-enable")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingOvsBridgeStpEnable(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "ovs-bridge", "stp-enable")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingOvsInterfaceType(data connectionData) (value string) {
	ivalue := getSettingKey(data, "ovs-interface", "type")
	value = interfaceToString(ivalue)
	return
}
func getSettingOvsPatchPeer(data connectionData) (value string) {
	ivalue := getSettingKey(data, "ovs-patch", "peer")
	value = interfaceToString(ivalue)
	return
}
func getSettingOvsPortBondDowndelay(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "ovs-port", "bond-downdelay")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingOvsPortBondMode(data connectionData) (value string) {
	ivalue := getSettingKey(data, "ovs-port", "bond-mode")
	value = interfaceToString(ivalue)
	return
}
func getSettingOvsPortBondUpdelay(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "ovs-port", "bond-updelay")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingOvsPortLacp(data connectionData) (value string) {
	ivalue := getSettingKey(data, "ovs-port", "lacp")
	value = interfaceToString(ivalue)
	return
}
func getSettingOvsPortTag(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "ovs-port", "tag")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingOvsPortVlanMode(data connectionData) (value string) {
	ivalue := getSettingKey(data, "ovs-port", "vlan-mode")
	value = interfaceToString(ivalue)
	return
}
func getSettingPppBaud(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "ppp", "baud")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingPppCrtscts(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "ppp", "crtscts")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingPppLcpEchoFailure(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "ppp", "lcp-echo-failure")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingPppLcpEchoInterval(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "ppp", "lcp-echo-interval")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingPppMppeStateful(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "ppp", "mppe-stateful")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingPppMru(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "ppp", "mru")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingPppMtu(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "ppp", "mtu")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingPppNoVjComp(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "ppp", "no-vj-comp")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingPppNoauth(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "ppp", "noauth")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingPppNobsdcomp(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "ppp", "nobsdcomp")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingPppNodeflate(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "ppp", "nodeflate")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingPppRefuseChap(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "ppp", "refuse-chap")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingPppRefuseEap(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "ppp", "refuse-eap")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingPppRefuseMschap(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "ppp", "refuse-mschap")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingPppRefuseMschapv2(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "ppp", "refuse-mschapv2")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingPppRefusePap(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "ppp", "refuse-pap")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingPppRequireMppe(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "ppp", "require-mppe")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingPppRequireMppe128(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "ppp", "require-mppe-128")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingPppoeParent(data connectionData) (value string) {
	ivalue := getSettingKey(data, "pppoe", "parent")
	value = interfaceToString(ivalue)
	return
}
func getSettingPppoePassword(data connectionData) (value string) {
	ivalue := getSettingKey(data, "pppoe", "password")
	value = interfaceToString(ivalue)
	return
}
func getSettingPppoePasswordFlags(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "pppoe", "password-flags")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingPppoeService(data connectionData) (value string) {
	ivalue := getSettingKey(data, "pppoe", "service")
	value = interfaceToString(ivalue)
	return
}
func getSettingPppoeUsername(data connectionData) (value string) {
	ivalue := getSettingKey(data, "pppoe", "username")
	value = interfaceToString(ivalue)
	return
}
func getSettingProxyBrowserOnly(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "proxy", "browser-only")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingProxyMethod(data connectionData) (value int32) {
	ivalue := getSettingKey(data, "proxy", "method")
	value = interfaceToInt32(ivalue)
	return
}
func getSettingProxyPacScript(data connectionData) (value string) {
	ivalue := getSettingKey(data, "proxy", "pac-script")
	value = interfaceToString(ivalue)
	return
}
func getSettingProxyPacUrl(data connectionData) (value string) {
	ivalue := getSettingKey(data, "proxy", "pac-url")
	value = interfaceToString(ivalue)
	return
}
func getSettingSerialBaud(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "serial", "baud")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingSerialBits(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "serial", "bits")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingSerialParity(data connectionData) (value byte) {
	ivalue := getSettingKey(data, "serial", "parity")
	value = interfaceToByte(ivalue)
	return
}
func getSettingSerialSendDelay(data connectionData) (value uint64) {
	ivalue := getSettingKey(data, "serial", "send-delay")
	value = interfaceToUint64(ivalue)
	return
}
func getSettingSerialStopbits(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "serial", "stopbits")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingTeamConfig(data connectionData) (value string) {
	ivalue := getSettingKey(data, "team", "config")
	value = interfaceToString(ivalue)
	return
}
func getSettingTeamMcastRejoinCount(data connectionData) (value int32) {
	ivalue := getSettingKey(data, "team", "mcast-rejoin-count")
	value = interfaceToInt32(ivalue)
	return
}
func getSettingTeamMcastRejoinInterval(data connectionData) (value int32) {
	ivalue := getSettingKey(data, "team", "mcast-rejoin-interval")
	value = interfaceToInt32(ivalue)
	return
}
func getSettingTeamNotifyPeersCount(data connectionData) (value int32) {
	ivalue := getSettingKey(data, "team", "notify-peers-count")
	value = interfaceToInt32(ivalue)
	return
}
func getSettingTeamNotifyPeersInterval(data connectionData) (value int32) {
	ivalue := getSettingKey(data, "team", "notify-peers-interval")
	value = interfaceToInt32(ivalue)
	return
}
func getSettingTeamRunner(data connectionData) (value string) {
	ivalue := getSettingKey(data, "team", "runner")
	value = interfaceToString(ivalue)
	return
}
func getSettingTeamRunnerActive(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "team", "runner-active")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingTeamRunnerAggSelectPolicy(data connectionData) (value string) {
	ivalue := getSettingKey(data, "team", "runner-agg-select-policy")
	value = interfaceToString(ivalue)
	return
}
func getSettingTeamRunnerFastRate(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "team", "runner-fast-rate")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingTeamRunnerHwaddrPolicy(data connectionData) (value string) {
	ivalue := getSettingKey(data, "team", "runner-hwaddr-policy")
	value = interfaceToString(ivalue)
	return
}
func getSettingTeamRunnerMinPorts(data connectionData) (value int32) {
	ivalue := getSettingKey(data, "team", "runner-min-ports")
	value = interfaceToInt32(ivalue)
	return
}
func getSettingTeamRunnerSysPrio(data connectionData) (value int32) {
	ivalue := getSettingKey(data, "team", "runner-sys-prio")
	value = interfaceToInt32(ivalue)
	return
}
func getSettingTeamRunnerTxBalancer(data connectionData) (value string) {
	ivalue := getSettingKey(data, "team", "runner-tx-balancer")
	value = interfaceToString(ivalue)
	return
}
func getSettingTeamRunnerTxBalancerInterval(data connectionData) (value int32) {
	ivalue := getSettingKey(data, "team", "runner-tx-balancer-interval")
	value = interfaceToInt32(ivalue)
	return
}
func getSettingTeamRunnerTxHash(data connectionData) (value []string) {
	ivalue := getSettingKey(data, "team", "runner-tx-hash")
	value = interfaceToArrayString(ivalue)
	return
}
func getSettingTeamPortConfig(data connectionData) (value string) {
	ivalue := getSettingKey(data, "team-port", "config")
	value = interfaceToString(ivalue)
	return
}
func getSettingTeamPortLacpKey(data connectionData) (value int32) {
	ivalue := getSettingKey(data, "team-port", "lacp-key")
	value = interfaceToInt32(ivalue)
	return
}
func getSettingTeamPortLacpPrio(data connectionData) (value int32) {
	ivalue := getSettingKey(data, "team-port", "lacp-prio")
	value = interfaceToInt32(ivalue)
	return
}
func getSettingTeamPortPrio(data connectionData) (value int32) {
	ivalue := getSettingKey(data, "team-port", "prio")
	value = interfaceToInt32(ivalue)
	return
}
func getSettingTeamPortQueueId(data connectionData) (value int32) {
	ivalue := getSettingKey(data, "team-port", "queue-id")
	value = interfaceToInt32(ivalue)
	return
}
func getSettingTeamPortSticky(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "team-port", "sticky")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingTunGroup(data connectionData) (value string) {
	ivalue := getSettingKey(data, "tun", "group")
	value = interfaceToString(ivalue)
	return
}
func getSettingTunMode(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "tun", "mode")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingTunMultiQueue(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "tun", "multi-queue")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingTunOwner(data connectionData) (value string) {
	ivalue := getSettingKey(data, "tun", "owner")
	value = interfaceToString(ivalue)
	return
}
func getSettingTunPi(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "tun", "pi")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingTunVnetHdr(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "tun", "vnet-hdr")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingUserData(data connectionData) (value map[string]string) {
	ivalue := getSettingKey(data, "user", "data")
	value = interfaceToDictStringString(ivalue)
	return
}
func getSettingVlanEgressPriorityMap(data connectionData) (value []string) {
	ivalue := getSettingKey(data, "vlan", "egress-priority-map")
	value = interfaceToArrayString(ivalue)
	return
}
func getSettingVlanFlags(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "vlan", "flags")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingVlanId(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "vlan", "id")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingVlanIngressPriorityMap(data connectionData) (value []string) {
	ivalue := getSettingKey(data, "vlan", "ingress-priority-map")
	value = interfaceToArrayString(ivalue)
	return
}
func getSettingVlanParent(data connectionData) (value string) {
	ivalue := getSettingKey(data, "vlan", "parent")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnData(data connectionData) (value map[string]string) {
	ivalue := getSettingKey(data, "vpn", "data")
	value = interfaceToDictStringString(ivalue)
	return
}
func getSettingVpnPersistent(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "vpn", "persistent")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnSecrets(data connectionData) (value map[string]string) {
	ivalue := getSettingKey(data, "vpn", "secrets")
	value = interfaceToDictStringString(ivalue)
	return
}
func getSettingVpnServiceType(data connectionData) (value string) {
	ivalue := getSettingKey(data, "vpn", "service-type")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnTimeout(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "vpn", "timeout")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingVpnUserName(data connectionData) (value string) {
	ivalue := getSettingKey(data, "vpn", "user-name")
	value = interfaceToString(ivalue)
	return
}
func getSettingVxlanAgeing(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "vxlan", "ageing")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingVxlanDestinationPort(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "vxlan", "destination-port")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingVxlanId(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "vxlan", "id")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingVxlanL2Miss(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "vxlan", "l2-miss")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVxlanL3Miss(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "vxlan", "l3-miss")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVxlanLearning(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "vxlan", "learning")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVxlanLimit(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "vxlan", "limit")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingVxlanLocal(data connectionData) (value string) {
	ivalue := getSettingKey(data, "vxlan", "local")
	value = interfaceToString(ivalue)
	return
}
func getSettingVxlanParent(data connectionData) (value string) {
	ivalue := getSettingKey(data, "vxlan", "parent")
	value = interfaceToString(ivalue)
	return
}
func getSettingVxlanProxy(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "vxlan", "proxy")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVxlanRemote(data connectionData) (value string) {
	ivalue := getSettingKey(data, "vxlan", "remote")
	value = interfaceToString(ivalue)
	return
}
func getSettingVxlanRsc(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "vxlan", "rsc")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVxlanSourcePortMax(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "vxlan", "source-port-max")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingVxlanSourcePortMin(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "vxlan", "source-port-min")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingVxlanTos(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "vxlan", "tos")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingVxlanTtl(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "vxlan", "ttl")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingWimaxMacAddress(data connectionData) (value []byte) {
	ivalue := getSettingKey(data, "wimax", "mac-address")
	value = interfaceToArrayByte(ivalue)
	return
}
func getSettingWimaxNetworkName(data connectionData) (value string) {
	ivalue := getSettingKey(data, "wimax", "network-name")
	value = interfaceToString(ivalue)
	return
}
func getSettingWiredAutoNegotiate(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "802-3-ethernet", "auto-negotiate")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingWiredClonedMacAddress(data connectionData) (value []byte) {
	ivalue := getSettingKey(data, "802-3-ethernet", "cloned-mac-address")
	value = interfaceToArrayByte(ivalue)
	return
}
func getSettingWiredDuplex(data connectionData) (value string) {
	ivalue := getSettingKey(data, "802-3-ethernet", "duplex")
	value = interfaceToString(ivalue)
	return
}
func getSettingWiredGenerateMacAddressMask(data connectionData) (value string) {
	ivalue := getSettingKey(data, "802-3-ethernet", "generate-mac-address-mask")
	value = interfaceToString(ivalue)
	return
}
func getSettingWiredMacAddress(data connectionData) (value []byte) {
	ivalue := getSettingKey(data, "802-3-ethernet", "mac-address")
	value = interfaceToArrayByte(ivalue)
	return
}
func getSettingWiredMacAddressBlacklist(data connectionData) (value []string) {
	ivalue := getSettingKey(data, "802-3-ethernet", "mac-address-blacklist")
	value = interfaceToArrayString(ivalue)
	return
}
func getSettingWiredMtu(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "802-3-ethernet", "mtu")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingWiredPort(data connectionData) (value string) {
	ivalue := getSettingKey(data, "802-3-ethernet", "port")
	value = interfaceToString(ivalue)
	return
}
func getSettingWiredS390Nettype(data connectionData) (value string) {
	ivalue := getSettingKey(data, "802-3-ethernet", "s390-nettype")
	value = interfaceToString(ivalue)
	return
}
func getSettingWiredS390Options(data connectionData) (value map[string]string) {
	ivalue := getSettingKey(data, "802-3-ethernet", "s390-options")
	value = interfaceToDictStringString(ivalue)
	return
}
func getSettingWiredS390Subchannels(data connectionData) (value []string) {
	ivalue := getSettingKey(data, "802-3-ethernet", "s390-subchannels")
	value = interfaceToArrayString(ivalue)
	return
}
func getSettingWiredSpeed(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "802-3-ethernet", "speed")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingWiredWakeOnLan(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "802-3-ethernet", "wake-on-lan")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingWiredWakeOnLanPassword(data connectionData) (value string) {
	ivalue := getSettingKey(data, "802-3-ethernet", "wake-on-lan-password")
	value = interfaceToString(ivalue)
	return
}
func getSettingWirelessBand(data connectionData) (value string) {
	ivalue := getSettingKey(data, "802-11-wireless", "band")
	value = interfaceToString(ivalue)
	return
}
func getSettingWirelessBssid(data connectionData) (value []byte) {
	ivalue := getSettingKey(data, "802-11-wireless", "bssid")
	value = interfaceToArrayByte(ivalue)
	return
}
func getSettingWirelessChannel(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "802-11-wireless", "channel")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingWirelessClonedMacAddress(data connectionData) (value []byte) {
	ivalue := getSettingKey(data, "802-11-wireless", "cloned-mac-address")
	value = interfaceToArrayByte(ivalue)
	return
}
func getSettingWirelessGenerateMacAddressMask(data connectionData) (value string) {
	ivalue := getSettingKey(data, "802-11-wireless", "generate-mac-address-mask")
	value = interfaceToString(ivalue)
	return
}
func getSettingWirelessHidden(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "802-11-wireless", "hidden")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingWirelessMacAddress(data connectionData) (value []byte) {
	ivalue := getSettingKey(data, "802-11-wireless", "mac-address")
	value = interfaceToArrayByte(ivalue)
	return
}
func getSettingWirelessMacAddressBlacklist(data connectionData) (value []string) {
	ivalue := getSettingKey(data, "802-11-wireless", "mac-address-blacklist")
	value = interfaceToArrayString(ivalue)
	return
}
func getSettingWirelessMacAddressRandomization(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "802-11-wireless", "mac-address-randomization")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingWirelessMode(data connectionData) (value string) {
	ivalue := getSettingKey(data, "802-11-wireless", "mode")
	value = interfaceToString(ivalue)
	return
}
func getSettingWirelessMtu(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "802-11-wireless", "mtu")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingWirelessPowersave(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "802-11-wireless", "powersave")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingWirelessRate(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "802-11-wireless", "rate")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingWirelessSeenBssids(data connectionData) (value []string) {
	ivalue := getSettingKey(data, "802-11-wireless", "seen-bssids")
	value = interfaceToArrayString(ivalue)
	return
}
func getSettingWirelessSsid(data connectionData) (value []byte) {
	ivalue := getSettingKey(data, "802-11-wireless", "ssid")
	value = interfaceToArrayByte(ivalue)
	return
}
func getSettingWirelessTxPower(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "802-11-wireless", "tx-power")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingWirelessSecurityAuthAlg(data connectionData) (value string) {
	ivalue := getSettingKey(data, "802-11-wireless-security", "auth-alg")
	value = interfaceToString(ivalue)
	return
}
func getSettingWirelessSecurityGroup(data connectionData) (value []string) {
	ivalue := getSettingKey(data, "802-11-wireless-security", "group")
	value = interfaceToArrayString(ivalue)
	return
}
func getSettingWirelessSecurityKeyMgmt(data connectionData) (value string) {
	ivalue := getSettingKey(data, "802-11-wireless-security", "key-mgmt")
	value = interfaceToString(ivalue)
	return
}
func getSettingWirelessSecurityLeapPassword(data connectionData) (value string) {
	ivalue := getSettingKey(data, "802-11-wireless-security", "leap-password")
	value = interfaceToString(ivalue)
	return
}
func getSettingWirelessSecurityLeapPasswordFlags(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "802-11-wireless-security", "leap-password-flags")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingWirelessSecurityLeapUsername(data connectionData) (value string) {
	ivalue := getSettingKey(data, "802-11-wireless-security", "leap-username")
	value = interfaceToString(ivalue)
	return
}
func getSettingWirelessSecurityPairwise(data connectionData) (value []string) {
	ivalue := getSettingKey(data, "802-11-wireless-security", "pairwise")
	value = interfaceToArrayString(ivalue)
	return
}
func getSettingWirelessSecurityPmf(data connectionData) (value int32) {
	ivalue := getSettingKey(data, "802-11-wireless-security", "pmf")
	value = interfaceToInt32(ivalue)
	return
}
func getSettingWirelessSecurityProto(data connectionData) (value []string) {
	ivalue := getSettingKey(data, "802-11-wireless-security", "proto")
	value = interfaceToArrayString(ivalue)
	return
}
func getSettingWirelessSecurityPsk(data connectionData) (value string) {
	ivalue := getSettingKey(data, "802-11-wireless-security", "psk")
	value = interfaceToString(ivalue)
	return
}
func getSettingWirelessSecurityPskFlags(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "802-11-wireless-security", "psk-flags")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingWirelessSecurityWepKeyFlags(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "802-11-wireless-security", "wep-key-flags")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingWirelessSecurityWepKeyType(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "802-11-wireless-security", "wep-key-type")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingWirelessSecurityWepKey0(data connectionData) (value string) {
	ivalue := getSettingKey(data, "802-11-wireless-security", "wep-key0")
	value = interfaceToString(ivalue)
	return
}
func getSettingWirelessSecurityWepKey1(data connectionData) (value string) {
	ivalue := getSettingKey(data, "802-11-wireless-security", "wep-key1")
	value = interfaceToString(ivalue)
	return
}
func getSettingWirelessSecurityWepKey2(data connectionData) (value string) {
	ivalue := getSettingKey(data, "802-11-wireless-security", "wep-key2")
	value = interfaceToString(ivalue)
	return
}
func getSettingWirelessSecurityWepKey3(data connectionData) (value string) {
	ivalue := getSettingKey(data, "802-11-wireless-security", "wep-key3")
	value = interfaceToString(ivalue)
	return
}
func getSettingWirelessSecurityWepTxKeyidx(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "802-11-wireless-security", "wep-tx-keyidx")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingWirelessSecurityWpsMethod(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "802-11-wireless-security", "wps-method")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingVpnL2tpKeyGateway(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-l2tp", "gateway")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnL2tpKeyUser(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-l2tp", "user")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnL2tpKeyPasswordFlags(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "alias-vpn-l2tp", "password-flags")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingVpnL2tpKeyPassword(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-l2tp", "password")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnL2tpKeyDomain(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-l2tp", "domain")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnL2tpKeyRequireMppe(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "alias-vpn-l2tp-ppp", "require-mppe")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnL2tpKeyRequireMppe40(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "alias-vpn-l2tp-ppp", "require-mppe-40")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnL2tpKeyRequireMppe128(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "alias-vpn-l2tp-ppp", "require-mppe-128")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnL2tpKeyMppeStateful(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "alias-vpn-l2tp-ppp", "mppe-stateful")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnL2tpKeyRefuseEap(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "alias-vpn-l2tp-ppp", "refuse-eap")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnL2tpKeyRefusePap(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "alias-vpn-l2tp-ppp", "refuse-pap")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnL2tpKeyRefuseChap(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "alias-vpn-l2tp-ppp", "refuse-chap")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnL2tpKeyRefuseMschap(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "alias-vpn-l2tp-ppp", "refuse-mschap")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnL2tpKeyRefuseMschapv2(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "alias-vpn-l2tp-ppp", "refuse-mschapv2")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnL2tpKeyNobsdcomp(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "alias-vpn-l2tp-ppp", "nobsdcomp")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnL2tpKeyNodeflate(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "alias-vpn-l2tp-ppp", "nodeflate")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnL2tpKeyNoVjComp(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "alias-vpn-l2tp-ppp", "no-vj-comp")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnL2tpKeyNoPcomp(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "alias-vpn-l2tp-ppp", "nopcomp")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnL2tpKeyNoAccomp(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "alias-vpn-l2tp-ppp", "noaccomp")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnL2tpKeyLcpEchoFailure(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "alias-vpn-l2tp-ppp", "lcp-echo-failure")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingVpnL2tpKeyLcpEchoInterval(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "alias-vpn-l2tp-ppp", "lcp-echo-interval")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingVpnL2tpKeyIpsecEnable(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "alias-vpn-l2tp-ipsec", "ipsec-enabled")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnL2tpKeyIpsecGroupName(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-l2tp-ipsec", "ipsec-group-name")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnL2tpKeyIpsecGatewayId(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-l2tp-ipsec", "ipsec-gateway-id")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnL2tpKeyIpsecPsk(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-l2tp-ipsec", "ipsec-psk")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnL2tpKeyIpsecIke(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-l2tp-ipsec", "ipsec-ike")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnL2tpKeyIpsecEsp(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-l2tp-ipsec", "ipsec-esp")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnOpenconnectKeyGateway(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-openconnect", "gateway")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnOpenconnectKeyCacert(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-openconnect", "cacert")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnOpenconnectKeyProxy(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-openconnect", "proxy")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnOpenconnectKeyCsdEnable(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "alias-vpn-openconnect", "enable_csd_trojan")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnOpenconnectKeyCsdWrapper(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-openconnect", "csd_wrapper")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnOpenconnectKeyUsercert(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-openconnect", "usercert")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnOpenconnectKeyPrivkey(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-openconnect", "userkey")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnOpenconnectKeyPemPassphraseFsid(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "alias-vpn-openconnect", "pem_passphrase_fsid")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnOpenconnectKeyCookie(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-openconnect", "cookie")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnOpenconnectKeyGwcert(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-openconnect", "gwcert")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnOpenconnectKeyAuthtype(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-openconnect", "authtype")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnOpenconnectKeyMtu(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-openconnect", "mtu")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnOpenconnectKeyStokenSource(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-openconnect", "stoken_source")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnOpenconnectKeyStokenString(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-openconnect", "stoken_string")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnOpenvpnKeyRemote(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-openvpn", "remote")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnOpenvpnKeyConnectionType(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-openvpn", "connection-type")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnOpenvpnKeyUsername(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-openvpn", "username")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnOpenvpnKeyPasswordFlags(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "alias-vpn-openvpn", "password-flags")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingVpnOpenvpnKeyPassword(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-openvpn", "password")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnOpenvpnKeyCa(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-openvpn", "ca")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnOpenvpnKeyCert(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-openvpn", "cert")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnOpenvpnKeyKey(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-openvpn", "key")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnOpenvpnKeyCertpassFlags(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "alias-vpn-openvpn", "cert-pass-flags")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingVpnOpenvpnKeyCertpass(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-openvpn", "cert-pass")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnOpenvpnKeyStaticKey(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-openvpn", "static-key")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnOpenvpnKeyStaticKeyDirection(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "alias-vpn-openvpn", "static-key-direction")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingVpnOpenvpnKeyRemoteIp(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-openvpn", "remote-ip")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnOpenvpnKeyLocalIp(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-openvpn", "local-ip")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnOpenvpnKeyPort(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "alias-vpn-openvpn-advanced", "port")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingVpnOpenvpnKeyRenegSeconds(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "alias-vpn-openvpn-advanced", "reneg-seconds")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingVpnOpenvpnKeyCompLzo(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "alias-vpn-openvpn-advanced", "comp-lzo")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnOpenvpnKeyProtoTcp(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "alias-vpn-openvpn-advanced", "proto-tcp")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnOpenvpnKeyTapDev(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "alias-vpn-openvpn-advanced", "tap-dev")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnOpenvpnKeyTunnelMtu(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "alias-vpn-openvpn-advanced", "tunnel-mtu")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingVpnOpenvpnKeyFragmentSize(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "alias-vpn-openvpn-advanced", "fragment-size")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingVpnOpenvpnKeyMssfix(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "alias-vpn-openvpn-advanced", "mssfix")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnOpenvpnKeyRemoteRandom(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "alias-vpn-openvpn-advanced", "remote-random")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnOpenvpnKeyCipher(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-openvpn-security", "cipher")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnOpenvpnKeyAuth(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-openvpn-security", "auth")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnOpenvpnKeyTlsRemote(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-openvpn-tlsauth", "tls-remote")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnOpenvpnKeyRemoteCertTls(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-openvpn-tlsauth", "remote-cert-tls")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnOpenvpnKeyTa(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-openvpn-tlsauth", "ta")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnOpenvpnKeyTaDir(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "alias-vpn-openvpn-tlsauth", "ta-dir")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingVpnOpenvpnKeyProxyType(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-openvpn-proxies", "proxy-type")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnOpenvpnKeyProxyServer(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-openvpn-proxies", "proxy-server")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnOpenvpnKeyProxyPort(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "alias-vpn-openvpn-proxies", "proxy-port")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingVpnOpenvpnKeyProxyRetry(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "alias-vpn-openvpn-proxies", "proxy-retry")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnOpenvpnKeyHttpProxyUsername(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-openvpn-proxies", "http-proxy-username")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnOpenvpnKeyHttpProxyPassword(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-openvpn-proxies", "http-proxy-password")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnOpenvpnKeyHttpProxyPasswordFlags(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "alias-vpn-openvpn-proxies", "http-proxy-password-flags")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingVpnPptpKeyGateway(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-pptp", "gateway")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnPptpKeyUser(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-pptp", "user")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnPptpKeyPasswordFlags(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "alias-vpn-pptp", "password-flags")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingVpnPptpKeyPassword(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-pptp", "password")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnPptpKeyDomain(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-pptp", "domain")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnPptpKeyRequireMppe(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "alias-vpn-pptp-ppp", "require-mppe")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnPptpKeyRequireMppe40(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "alias-vpn-pptp-ppp", "require-mppe-40")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnPptpKeyRequireMppe128(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "alias-vpn-pptp-ppp", "require-mppe-128")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnPptpKeyMppeStateful(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "alias-vpn-pptp-ppp", "mppe-stateful")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnPptpKeyRefuseEap(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "alias-vpn-pptp-ppp", "refuse-eap")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnPptpKeyRefusePap(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "alias-vpn-pptp-ppp", "refuse-pap")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnPptpKeyRefuseChap(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "alias-vpn-pptp-ppp", "refuse-chap")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnPptpKeyRefuseMschap(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "alias-vpn-pptp-ppp", "refuse-mschap")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnPptpKeyRefuseMschapv2(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "alias-vpn-pptp-ppp", "refuse-mschapv2")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnPptpKeyNobsdcomp(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "alias-vpn-pptp-ppp", "nobsdcomp")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnPptpKeyNodeflate(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "alias-vpn-pptp-ppp", "nodeflate")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnPptpKeyNoVjComp(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "alias-vpn-pptp-ppp", "no-vj-comp")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnPptpKeyLcpEchoFailure(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "alias-vpn-pptp-ppp", "lcp-echo-failure")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingVpnPptpKeyLcpEchoInterval(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "alias-vpn-pptp-ppp", "lcp-echo-interval")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingVpnStrongswanKeyAddress(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-strongswan", "address")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnStrongswanKeyCertificate(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-strongswan", "certificate")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnStrongswanKeyMethod(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-strongswan", "method")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnStrongswanKeyUser(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-strongswan", "user")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnStrongswanKeyUsercert(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-strongswan", "usercert")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnStrongswanKeyUserkey(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-strongswan", "userkey")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnStrongswanKeyPassword(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-strongswan", "password")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnStrongswanKeyPasswordFlags(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "alias-vpn-strongswan", "password-flags")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingVpnStrongswanKeyVirtual(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "alias-vpn-strongswan", "virtual")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnStrongswanKeyEncap(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "alias-vpn-strongswan", "encap")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnStrongswanKeyIpcomp(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "alias-vpn-strongswan", "ipcomp")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnVpncKeyGateway(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-vpnc", "IPSec gateway")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnVpncKeyXauthUser(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-vpnc", "Xauth username")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnVpncKeyXauthPasswordType(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-vpnc", "xauth-password-type")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnVpncKeyXauthPasswordFlags(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "alias-vpn-vpnc", "Xauth password-flags")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingVpnVpncKeyXauthPassword(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-vpnc", "Xauth password")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnVpncKeyId(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-vpnc", "IPSec ID")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnVpncKeySecretType(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-vpnc", "ipsec-secret-type")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnVpncKeySecretFlags(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "alias-vpn-vpnc", "IPSec secret-flags")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingVpnVpncKeySecret(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-vpnc", "IPSec secret")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnVpncKeyAuthmode(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-vpnc", "IKE Authmode")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnVpncKeyCaFile(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-vpnc", "CA-File")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnVpncKeyDomain(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-vpnc-advanced", "Domain")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnVpncKeyVendor(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-vpnc-advanced", "Vendor")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnVpncKeyAppVersion(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-vpnc-advanced", "Application Version")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnVpncKeySingleDes(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "alias-vpn-vpnc-advanced", "Enable Single DES")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnVpncKeyNoEncryption(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "alias-vpn-vpnc-advanced", "Enable no encryption")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnVpncKeyNatTraversalMode(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-vpnc-advanced", "NAT Traversal Mode")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnVpncKeyDhgroup(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-vpnc-advanced", "IKE DH Group")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnVpncKeyPerfectForward(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-vpnc-advanced", "Perfect Forward Secrecy")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnVpncKeyLocalPort(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "alias-vpn-vpnc-advanced", "Local Port")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingVpnVpncKeyDpdIdleTimeout(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "alias-vpn-vpnc-advanced", "DPD idle timeout (our side)")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingVpnVpncKeyCiscoUdpEncapsPort(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "alias-vpn-vpnc-advanced", "Cisco UDP Encapsulation Port")
	value = interfaceToUint32(ivalue)
	return
}

// Setter
func setSetting8021xAltsubjectMatches(data connectionData, value []string) {
	setSettingKey(data, "802-1x", "altsubject-matches", value)
}
func setSetting8021xAnonymousIdentity(data connectionData, value string) {
	setSettingKey(data, "802-1x", "anonymous-identity", value)
}
func setSetting8021xAuthTimeout(data connectionData, value int32) {
	setSettingKey(data, "802-1x", "auth-timeout", value)
}
func setSetting8021xCaCert(data connectionData, value []byte) {
	setSettingKey(data, "802-1x", "ca-cert", value)
}
func setSetting8021xCaCertPassword(data connectionData, value string) {
	setSettingKey(data, "802-1x", "ca-cert-password", value)
}
func setSetting8021xCaCertPasswordFlags(data connectionData, value uint32) {
	setSettingKey(data, "802-1x", "ca-cert-password-flags", value)
}
func setSetting8021xCaPath(data connectionData, value string) {
	setSettingKey(data, "802-1x", "ca-path", value)
}
func setSetting8021xClientCert(data connectionData, value []byte) {
	setSettingKey(data, "802-1x", "client-cert", value)
}
func setSetting8021xClientCertPassword(data connectionData, value string) {
	setSettingKey(data, "802-1x", "client-cert-password", value)
}
func setSetting8021xClientCertPasswordFlags(data connectionData, value uint32) {
	setSettingKey(data, "802-1x", "client-cert-password-flags", value)
}
func setSetting8021xDomainSuffixMatch(data connectionData, value string) {
	setSettingKey(data, "802-1x", "domain-suffix-match", value)
}
func setSetting8021xEap(data connectionData, value []string) {
	setSettingKey(data, "802-1x", "eap", value)
}
func setSetting8021xIdentity(data connectionData, value string) {
	setSettingKey(data, "802-1x", "identity", value)
}
func setSetting8021xPacFile(data connectionData, value string) {
	setSettingKey(data, "802-1x", "pac-file", value)
}
func setSetting8021xPassword(data connectionData, value string) {
	setSettingKey(data, "802-1x", "password", value)
}
func setSetting8021xPasswordFlags(data connectionData, value uint32) {
	setSettingKey(data, "802-1x", "password-flags", value)
}
func setSetting8021xPasswordRaw(data connectionData, value []byte) {
	setSettingKey(data, "802-1x", "password-raw", value)
}
func setSetting8021xPasswordRawFlags(data connectionData, value uint32) {
	setSettingKey(data, "802-1x", "password-raw-flags", value)
}
func setSetting8021xPhase1AuthFlags(data connectionData, value uint32) {
	setSettingKey(data, "802-1x", "phase1-auth-flags", value)
}
func setSetting8021xPhase1FastProvisioning(data connectionData, value string) {
	setSettingKey(data, "802-1x", "phase1-fast-provisioning", value)
}
func setSetting8021xPhase1Peaplabel(data connectionData, value string) {
	setSettingKey(data, "802-1x", "phase1-peaplabel", value)
}
func setSetting8021xPhase1Peapver(data connectionData, value string) {
	setSettingKey(data, "802-1x", "phase1-peapver", value)
}
func setSetting8021xPhase2AltsubjectMatches(data connectionData, value []string) {
	setSettingKey(data, "802-1x", "phase2-altsubject-matches", value)
}
func setSetting8021xPhase2Auth(data connectionData, value string) {
	setSettingKey(data, "802-1x", "phase2-auth", value)
}
func setSetting8021xPhase2Autheap(data connectionData, value string) {
	setSettingKey(data, "802-1x", "phase2-autheap", value)
}
func setSetting8021xPhase2CaCert(data connectionData, value []byte) {
	setSettingKey(data, "802-1x", "phase2-ca-cert", value)
}
func setSetting8021xPhase2CaCertPassword(data connectionData, value string) {
	setSettingKey(data, "802-1x", "phase2-ca-cert-password", value)
}
func setSetting8021xPhase2CaCertPasswordFlags(data connectionData, value uint32) {
	setSettingKey(data, "802-1x", "phase2-ca-cert-password-flags", value)
}
func setSetting8021xPhase2CaPath(data connectionData, value string) {
	setSettingKey(data, "802-1x", "phase2-ca-path", value)
}
func setSetting8021xPhase2ClientCert(data connectionData, value []byte) {
	setSettingKey(data, "802-1x", "phase2-client-cert", value)
}
func setSetting8021xPhase2ClientCertPassword(data connectionData, value string) {
	setSettingKey(data, "802-1x", "phase2-client-cert-password", value)
}
func setSetting8021xPhase2ClientCertPasswordFlags(data connectionData, value uint32) {
	setSettingKey(data, "802-1x", "phase2-client-cert-password-flags", value)
}
func setSetting8021xPhase2DomainSuffixMatch(data connectionData, value string) {
	setSettingKey(data, "802-1x", "phase2-domain-suffix-match", value)
}
func setSetting8021xPhase2PrivateKey(data connectionData, value []byte) {
	setSettingKey(data, "802-1x", "phase2-private-key", value)
}
func setSetting8021xPhase2PrivateKeyPassword(data connectionData, value string) {
	setSettingKey(data, "802-1x", "phase2-private-key-password", value)
}
func setSetting8021xPhase2PrivateKeyPasswordFlags(data connectionData, value uint32) {
	setSettingKey(data, "802-1x", "phase2-private-key-password-flags", value)
}
func setSetting8021xPhase2SubjectMatch(data connectionData, value string) {
	setSettingKey(data, "802-1x", "phase2-subject-match", value)
}
func setSetting8021xPin(data connectionData, value string) {
	setSettingKey(data, "802-1x", "pin", value)
}
func setSetting8021xPinFlags(data connectionData, value uint32) {
	setSettingKey(data, "802-1x", "pin-flags", value)
}
func setSetting8021xPrivateKey(data connectionData, value []byte) {
	setSettingKey(data, "802-1x", "private-key", value)
}
func setSetting8021xPrivateKeyPassword(data connectionData, value string) {
	setSettingKey(data, "802-1x", "private-key-password", value)
}
func setSetting8021xPrivateKeyPasswordFlags(data connectionData, value uint32) {
	setSettingKey(data, "802-1x", "private-key-password-flags", value)
}
func setSetting8021xSubjectMatch(data connectionData, value string) {
	setSettingKey(data, "802-1x", "subject-match", value)
}
func setSetting8021xSystemCaCerts(data connectionData, value bool) {
	setSettingKey(data, "802-1x", "system-ca-certs", value)
}
func setSettingAdslEncapsulation(data connectionData, value string) {
	setSettingKey(data, "adsl", "encapsulation", value)
}
func setSettingAdslPassword(data connectionData, value string) {
	setSettingKey(data, "adsl", "password", value)
}
func setSettingAdslPasswordFlags(data connectionData, value uint32) {
	setSettingKey(data, "adsl", "password-flags", value)
}
func setSettingAdslProtocol(data connectionData, value string) {
	setSettingKey(data, "adsl", "protocol", value)
}
func setSettingAdslUsername(data connectionData, value string) {
	setSettingKey(data, "adsl", "username", value)
}
func setSettingAdslVci(data connectionData, value uint32) {
	setSettingKey(data, "adsl", "vci", value)
}
func setSettingAdslVpi(data connectionData, value uint32) {
	setSettingKey(data, "adsl", "vpi", value)
}
func setSettingBluetoothBdaddr(data connectionData, value []byte) {
	setSettingKey(data, "bluetooth", "bdaddr", value)
}
func setSettingBluetoothType(data connectionData, value string) {
	setSettingKey(data, "bluetooth", "type", value)
}
func setSettingBondOptions(data connectionData, value map[string]string) {
	setSettingKey(data, "bond", "options", value)
}
func setSettingBridgeAgeingTime(data connectionData, value uint32) {
	setSettingKey(data, "bridge", "ageing-time", value)
}
func setSettingBridgeForwardDelay(data connectionData, value uint32) {
	setSettingKey(data, "bridge", "forward-delay", value)
}
func setSettingBridgeGroupForwardMask(data connectionData, value uint32) {
	setSettingKey(data, "bridge", "group-forward-mask", value)
}
func setSettingBridgeHelloTime(data connectionData, value uint32) {
	setSettingKey(data, "bridge", "hello-time", value)
}
func setSettingBridgeMacAddress(data connectionData, value []byte) {
	setSettingKey(data, "bridge", "mac-address", value)
}
func setSettingBridgeMaxAge(data connectionData, value uint32) {
	setSettingKey(data, "bridge", "max-age", value)
}
func setSettingBridgeMulticastSnooping(data connectionData, value bool) {
	setSettingKey(data, "bridge", "multicast-snooping", value)
}
func setSettingBridgePriority(data connectionData, value uint32) {
	setSettingKey(data, "bridge", "priority", value)
}
func setSettingBridgeStp(data connectionData, value bool) {
	setSettingKey(data, "bridge", "stp", value)
}
func setSettingBridgePortHairpinMode(data connectionData, value bool) {
	setSettingKey(data, "bridge-port", "hairpin-mode", value)
}
func setSettingBridgePortPathCost(data connectionData, value uint32) {
	setSettingKey(data, "bridge-port", "path-cost", value)
}
func setSettingBridgePortPriority(data connectionData, value uint32) {
	setSettingKey(data, "bridge-port", "priority", value)
}
func setSettingCdmaMtu(data connectionData, value uint32) {
	setSettingKey(data, "cdma", "mtu", value)
}
func setSettingCdmaNumber(data connectionData, value string) {
	setSettingKey(data, "cdma", "number", value)
}
func setSettingCdmaPassword(data connectionData, value string) {
	setSettingKey(data, "cdma", "password", value)
}
func setSettingCdmaPasswordFlags(data connectionData, value uint32) {
	setSettingKey(data, "cdma", "password-flags", value)
}
func setSettingCdmaUsername(data connectionData, value string) {
	setSettingKey(data, "cdma", "username", value)
}
func setSettingConnectionAuthRetries(data connectionData, value int32) {
	setSettingKey(data, "connection", "auth-retries", value)
}
func setSettingConnectionAutoconnect(data connectionData, value bool) {
	setSettingKey(data, "connection", "autoconnect", value)
}
func setSettingConnectionAutoconnectPriority(data connectionData, value int32) {
	setSettingKey(data, "connection", "autoconnect-priority", value)
}
func setSettingConnectionAutoconnectRetries(data connectionData, value int32) {
	setSettingKey(data, "connection", "autoconnect-retries", value)
}
func setSettingConnectionAutoconnectSlaves(data connectionData, value int32) {
	setSettingKey(data, "connection", "autoconnect-slaves", value)
}
func setSettingConnectionGatewayPingTimeout(data connectionData, value uint32) {
	setSettingKey(data, "connection", "gateway-ping-timeout", value)
}
func setSettingConnectionId(data connectionData, value string) {
	setSettingKey(data, "connection", "id", value)
}
func setSettingConnectionInterfaceName(data connectionData, value string) {
	setSettingKey(data, "connection", "interface-name", value)
}
func setSettingConnectionLldp(data connectionData, value int32) {
	setSettingKey(data, "connection", "lldp", value)
}
func setSettingConnectionMaster(data connectionData, value string) {
	setSettingKey(data, "connection", "master", value)
}
func setSettingConnectionMetered(data connectionData, value int32) {
	setSettingKey(data, "connection", "metered", value)
}
func setSettingConnectionPermissions(data connectionData, value []string) {
	setSettingKey(data, "connection", "permissions", value)
}
func setSettingConnectionReadOnly(data connectionData, value bool) {
	setSettingKey(data, "connection", "read-only", value)
}
func setSettingConnectionSecondaries(data connectionData, value []string) {
	setSettingKey(data, "connection", "secondaries", value)
}
func setSettingConnectionSlaveType(data connectionData, value string) {
	setSettingKey(data, "connection", "slave-type", value)
}
func setSettingConnectionStableId(data connectionData, value string) {
	setSettingKey(data, "connection", "stable-id", value)
}
func setSettingConnectionTimestamp(data connectionData, value uint64) {
	setSettingKey(data, "connection", "timestamp", value)
}
func setSettingConnectionType(data connectionData, value string) {
	setSettingKey(data, "connection", "type", value)
}
func setSettingConnectionUuid(data connectionData, value string) {
	setSettingKey(data, "connection", "uuid", value)
}
func setSettingConnectionZone(data connectionData, value string) {
	setSettingKey(data, "connection", "zone", value)
}
func setSettingDcbAppFcoeFlags(data connectionData, value uint32) {
	setSettingKey(data, "dcb", "app-fcoe-flags", value)
}
func setSettingDcbAppFcoeMode(data connectionData, value string) {
	setSettingKey(data, "dcb", "app-fcoe-mode", value)
}
func setSettingDcbAppFcoePriority(data connectionData, value int32) {
	setSettingKey(data, "dcb", "app-fcoe-priority", value)
}
func setSettingDcbAppFipFlags(data connectionData, value uint32) {
	setSettingKey(data, "dcb", "app-fip-flags", value)
}
func setSettingDcbAppFipPriority(data connectionData, value int32) {
	setSettingKey(data, "dcb", "app-fip-priority", value)
}
func setSettingDcbAppIscsiFlags(data connectionData, value uint32) {
	setSettingKey(data, "dcb", "app-iscsi-flags", value)
}
func setSettingDcbAppIscsiPriority(data connectionData, value int32) {
	setSettingKey(data, "dcb", "app-iscsi-priority", value)
}
func setSettingDcbPriorityBandwidth(data connectionData, value []uint32) {
	setSettingKey(data, "dcb", "priority-bandwidth", value)
}
func setSettingDcbPriorityFlowControl(data connectionData, value []uint32) {
	setSettingKey(data, "dcb", "priority-flow-control", value)
}
func setSettingDcbPriorityFlowControlFlags(data connectionData, value uint32) {
	setSettingKey(data, "dcb", "priority-flow-control-flags", value)
}
func setSettingDcbPriorityGroupBandwidth(data connectionData, value []uint32) {
	setSettingKey(data, "dcb", "priority-group-bandwidth", value)
}
func setSettingDcbPriorityGroupFlags(data connectionData, value uint32) {
	setSettingKey(data, "dcb", "priority-group-flags", value)
}
func setSettingDcbPriorityGroupId(data connectionData, value []uint32) {
	setSettingKey(data, "dcb", "priority-group-id", value)
}
func setSettingDcbPriorityStrictBandwidth(data connectionData, value []uint32) {
	setSettingKey(data, "dcb", "priority-strict-bandwidth", value)
}
func setSettingDcbPriorityTrafficClass(data connectionData, value []uint32) {
	setSettingKey(data, "dcb", "priority-traffic-class", value)
}
func setSettingGsmApn(data connectionData, value string) {
	setSettingKey(data, "gsm", "apn", value)
}
func setSettingGsmDeviceId(data connectionData, value string) {
	setSettingKey(data, "gsm", "device-id", value)
}
func setSettingGsmHomeOnly(data connectionData, value bool) {
	setSettingKey(data, "gsm", "home-only", value)
}
func setSettingGsmMtu(data connectionData, value uint32) {
	setSettingKey(data, "gsm", "mtu", value)
}
func setSettingGsmNetworkId(data connectionData, value string) {
	setSettingKey(data, "gsm", "network-id", value)
}
func setSettingGsmNumber(data connectionData, value string) {
	setSettingKey(data, "gsm", "number", value)
}
func setSettingGsmPassword(data connectionData, value string) {
	setSettingKey(data, "gsm", "password", value)
}
func setSettingGsmPasswordFlags(data connectionData, value uint32) {
	setSettingKey(data, "gsm", "password-flags", value)
}
func setSettingGsmPin(data connectionData, value string) {
	setSettingKey(data, "gsm", "pin", value)
}
func setSettingGsmPinFlags(data connectionData, value uint32) {
	setSettingKey(data, "gsm", "pin-flags", value)
}
func setSettingGsmSimId(data connectionData, value string) {
	setSettingKey(data, "gsm", "sim-id", value)
}
func setSettingGsmSimOperatorId(data connectionData, value string) {
	setSettingKey(data, "gsm", "sim-operator-id", value)
}
func setSettingGsmUsername(data connectionData, value string) {
	setSettingKey(data, "gsm", "username", value)
}
func setSettingInfinibandMacAddress(data connectionData, value []byte) {
	setSettingKey(data, "infiniband", "mac-address", value)
}
func setSettingInfinibandMtu(data connectionData, value uint32) {
	setSettingKey(data, "infiniband", "mtu", value)
}
func setSettingInfinibandPKey(data connectionData, value int32) {
	setSettingKey(data, "infiniband", "p-key", value)
}
func setSettingInfinibandParent(data connectionData, value string) {
	setSettingKey(data, "infiniband", "parent", value)
}
func setSettingInfinibandTransportMode(data connectionData, value string) {
	setSettingKey(data, "infiniband", "transport-mode", value)
}
func setSettingIP4ConfigAddresses(data connectionData, value [][]uint32) {
	setSettingKey(data, "ipv4", "addresses", value)
}
func setSettingIP4ConfigDadTimeout(data connectionData, value int32) {
	setSettingKey(data, "ipv4", "dad-timeout", value)
}
func setSettingIP4ConfigDhcpClientId(data connectionData, value string) {
	setSettingKey(data, "ipv4", "dhcp-client-id", value)
}
func setSettingIP4ConfigDhcpFqdn(data connectionData, value string) {
	setSettingKey(data, "ipv4", "dhcp-fqdn", value)
}
func setSettingIP4ConfigDhcpHostname(data connectionData, value string) {
	setSettingKey(data, "ipv4", "dhcp-hostname", value)
}
func setSettingIP4ConfigDhcpSendHostname(data connectionData, value bool) {
	setSettingKey(data, "ipv4", "dhcp-send-hostname", value)
}
func setSettingIP4ConfigDhcpTimeout(data connectionData, value int32) {
	setSettingKey(data, "ipv4", "dhcp-timeout", value)
}
func setSettingIP4ConfigDns(data connectionData, value []uint32) {
	setSettingKey(data, "ipv4", "dns", value)
}
func setSettingIP4ConfigDnsOptions(data connectionData, value []string) {
	setSettingKey(data, "ipv4", "dns-options", value)
}
func setSettingIP4ConfigDnsPriority(data connectionData, value int32) {
	setSettingKey(data, "ipv4", "dns-priority", value)
}
func setSettingIP4ConfigDnsSearch(data connectionData, value []string) {
	setSettingKey(data, "ipv4", "dns-search", value)
}
func setSettingIP4ConfigGateway(data connectionData, value string) {
	setSettingKey(data, "ipv4", "gateway", value)
}
func setSettingIP4ConfigIgnoreAutoDns(data connectionData, value bool) {
	setSettingKey(data, "ipv4", "ignore-auto-dns", value)
}
func setSettingIP4ConfigIgnoreAutoRoutes(data connectionData, value bool) {
	setSettingKey(data, "ipv4", "ignore-auto-routes", value)
}
func setSettingIP4ConfigMayFail(data connectionData, value bool) {
	setSettingKey(data, "ipv4", "may-fail", value)
}
func setSettingIP4ConfigMethod(data connectionData, value string) {
	setSettingKey(data, "ipv4", "method", value)
}
func setSettingIP4ConfigNeverDefault(data connectionData, value bool) {
	setSettingKey(data, "ipv4", "never-default", value)
}
func setSettingIP4ConfigRouteMetric(data connectionData, value int64) {
	setSettingKey(data, "ipv4", "route-metric", value)
}
func setSettingIP4ConfigRouteTable(data connectionData, value uint32) {
	setSettingKey(data, "ipv4", "route-table", value)
}
func setSettingIP4ConfigRoutes(data connectionData, value [][]uint32) {
	setSettingKey(data, "ipv4", "routes", value)
}
func setSettingIP6ConfigAddrGenMode(data connectionData, value int32) {
	setSettingKey(data, "ipv6", "addr-gen-mode", value)
}
func setSettingIP6ConfigAddresses(data connectionData, value ipv6Addresses) {
	setSettingKey(data, "ipv6", "addresses", value)
}
func setSettingIP6ConfigDadTimeout(data connectionData, value int32) {
	setSettingKey(data, "ipv6", "dad-timeout", value)
}
func setSettingIP6ConfigDhcpHostname(data connectionData, value string) {
	setSettingKey(data, "ipv6", "dhcp-hostname", value)
}
func setSettingIP6ConfigDhcpSendHostname(data connectionData, value bool) {
	setSettingKey(data, "ipv6", "dhcp-send-hostname", value)
}
func setSettingIP6ConfigDhcpTimeout(data connectionData, value int32) {
	setSettingKey(data, "ipv6", "dhcp-timeout", value)
}
func setSettingIP6ConfigDns(data connectionData, value [][]byte) {
	setSettingKey(data, "ipv6", "dns", value)
}
func setSettingIP6ConfigDnsOptions(data connectionData, value []string) {
	setSettingKey(data, "ipv6", "dns-options", value)
}
func setSettingIP6ConfigDnsPriority(data connectionData, value int32) {
	setSettingKey(data, "ipv6", "dns-priority", value)
}
func setSettingIP6ConfigDnsSearch(data connectionData, value []string) {
	setSettingKey(data, "ipv6", "dns-search", value)
}
func setSettingIP6ConfigGateway(data connectionData, value string) {
	setSettingKey(data, "ipv6", "gateway", value)
}
func setSettingIP6ConfigIgnoreAutoDns(data connectionData, value bool) {
	setSettingKey(data, "ipv6", "ignore-auto-dns", value)
}
func setSettingIP6ConfigIgnoreAutoRoutes(data connectionData, value bool) {
	setSettingKey(data, "ipv6", "ignore-auto-routes", value)
}
func setSettingIP6ConfigIp6Privacy(data connectionData, value int32) {
	setSettingKey(data, "ipv6", "ip6-privacy", value)
}
func setSettingIP6ConfigMayFail(data connectionData, value bool) {
	setSettingKey(data, "ipv6", "may-fail", value)
}
func setSettingIP6ConfigMethod(data connectionData, value string) {
	setSettingKey(data, "ipv6", "method", value)
}
func setSettingIP6ConfigNeverDefault(data connectionData, value bool) {
	setSettingKey(data, "ipv6", "never-default", value)
}
func setSettingIP6ConfigRouteMetric(data connectionData, value int64) {
	setSettingKey(data, "ipv6", "route-metric", value)
}
func setSettingIP6ConfigRouteTable(data connectionData, value uint32) {
	setSettingKey(data, "ipv6", "route-table", value)
}
func setSettingIP6ConfigRoutes(data connectionData, value ipv6Routes) {
	setSettingKey(data, "ipv6", "routes", value)
}
func setSettingIP6ConfigToken(data connectionData, value string) {
	setSettingKey(data, "ipv6", "token", value)
}
func setSettingIPTunnelEncapsulationLimit(data connectionData, value uint32) {
	setSettingKey(data, "ip-tunnel", "encapsulation-limit", value)
}
func setSettingIPTunnelFlowLabel(data connectionData, value uint32) {
	setSettingKey(data, "ip-tunnel", "flow-label", value)
}
func setSettingIPTunnelInputKey(data connectionData, value string) {
	setSettingKey(data, "ip-tunnel", "input-key", value)
}
func setSettingIPTunnelLocal(data connectionData, value string) {
	setSettingKey(data, "ip-tunnel", "local", value)
}
func setSettingIPTunnelMode(data connectionData, value uint32) {
	setSettingKey(data, "ip-tunnel", "mode", value)
}
func setSettingIPTunnelMtu(data connectionData, value uint32) {
	setSettingKey(data, "ip-tunnel", "mtu", value)
}
func setSettingIPTunnelOutputKey(data connectionData, value string) {
	setSettingKey(data, "ip-tunnel", "output-key", value)
}
func setSettingIPTunnelParent(data connectionData, value string) {
	setSettingKey(data, "ip-tunnel", "parent", value)
}
func setSettingIPTunnelPathMtuDiscovery(data connectionData, value bool) {
	setSettingKey(data, "ip-tunnel", "path-mtu-discovery", value)
}
func setSettingIPTunnelRemote(data connectionData, value string) {
	setSettingKey(data, "ip-tunnel", "remote", value)
}
func setSettingIPTunnelTos(data connectionData, value uint32) {
	setSettingKey(data, "ip-tunnel", "tos", value)
}
func setSettingIPTunnelTtl(data connectionData, value uint32) {
	setSettingKey(data, "ip-tunnel", "ttl", value)
}
func setSettingMacsecEncrypt(data connectionData, value bool) {
	setSettingKey(data, "macsec", "encrypt", value)
}
func setSettingMacsecMkaCak(data connectionData, value string) {
	setSettingKey(data, "macsec", "mka-cak", value)
}
func setSettingMacsecMkaCakFlags(data connectionData, value uint32) {
	setSettingKey(data, "macsec", "mka-cak-flags", value)
}
func setSettingMacsecMkaCkn(data connectionData, value string) {
	setSettingKey(data, "macsec", "mka-ckn", value)
}
func setSettingMacsecMode(data connectionData, value int32) {
	setSettingKey(data, "macsec", "mode", value)
}
func setSettingMacsecParent(data connectionData, value string) {
	setSettingKey(data, "macsec", "parent", value)
}
func setSettingMacsecPort(data connectionData, value int32) {
	setSettingKey(data, "macsec", "port", value)
}
func setSettingMacsecValidation(data connectionData, value int32) {
	setSettingKey(data, "macsec", "validation", value)
}
func setSettingMacvlanMode(data connectionData, value uint32) {
	setSettingKey(data, "macvlan", "mode", value)
}
func setSettingMacvlanParent(data connectionData, value string) {
	setSettingKey(data, "macvlan", "parent", value)
}
func setSettingMacvlanPromiscuous(data connectionData, value bool) {
	setSettingKey(data, "macvlan", "promiscuous", value)
}
func setSettingMacvlanTap(data connectionData, value bool) {
	setSettingKey(data, "macvlan", "tap", value)
}
func setSettingOlpcMeshChannel(data connectionData, value uint32) {
	setSettingKey(data, "802-11-olpc-mesh", "channel", value)
}
func setSettingOlpcMeshDhcpAnycastAddress(data connectionData, value []byte) {
	setSettingKey(data, "802-11-olpc-mesh", "dhcp-anycast-address", value)
}
func setSettingOlpcMeshSsid(data connectionData, value []byte) {
	setSettingKey(data, "802-11-olpc-mesh", "ssid", value)
}
func setSettingOvsBridgeFailMode(data connectionData, value string) {
	setSettingKey(data, "ovs-bridge", "fail-mode", value)
}
func setSettingOvsBridgeMcastSnoopingEnable(data connectionData, value bool) {
	setSettingKey(data, "ovs-bridge", "mcast-snooping-enable", value)
}
func setSettingOvsBridgeRstpEnable(data connectionData, value bool) {
	setSettingKey(data, "ovs-bridge", "rstp-enable", value)
}
func setSettingOvsBridgeStpEnable(data connectionData, value bool) {
	setSettingKey(data, "ovs-bridge", "stp-enable", value)
}
func setSettingOvsInterfaceType(data connectionData, value string) {
	setSettingKey(data, "ovs-interface", "type", value)
}
func setSettingOvsPatchPeer(data connectionData, value string) {
	setSettingKey(data, "ovs-patch", "peer", value)
}
func setSettingOvsPortBondDowndelay(data connectionData, value uint32) {
	setSettingKey(data, "ovs-port", "bond-downdelay", value)
}
func setSettingOvsPortBondMode(data connectionData, value string) {
	setSettingKey(data, "ovs-port", "bond-mode", value)
}
func setSettingOvsPortBondUpdelay(data connectionData, value uint32) {
	setSettingKey(data, "ovs-port", "bond-updelay", value)
}
func setSettingOvsPortLacp(data connectionData, value string) {
	setSettingKey(data, "ovs-port", "lacp", value)
}
func setSettingOvsPortTag(data connectionData, value uint32) {
	setSettingKey(data, "ovs-port", "tag", value)
}
func setSettingOvsPortVlanMode(data connectionData, value string) {
	setSettingKey(data, "ovs-port", "vlan-mode", value)
}
func setSettingPppBaud(data connectionData, value uint32) {
	setSettingKey(data, "ppp", "baud", value)
}
func setSettingPppCrtscts(data connectionData, value bool) {
	setSettingKey(data, "ppp", "crtscts", value)
}
func setSettingPppLcpEchoFailure(data connectionData, value uint32) {
	setSettingKey(data, "ppp", "lcp-echo-failure", value)
}
func setSettingPppLcpEchoInterval(data connectionData, value uint32) {
	setSettingKey(data, "ppp", "lcp-echo-interval", value)
}
func setSettingPppMppeStateful(data connectionData, value bool) {
	setSettingKey(data, "ppp", "mppe-stateful", value)
}
func setSettingPppMru(data connectionData, value uint32) {
	setSettingKey(data, "ppp", "mru", value)
}
func setSettingPppMtu(data connectionData, value uint32) {
	setSettingKey(data, "ppp", "mtu", value)
}
func setSettingPppNoVjComp(data connectionData, value bool) {
	setSettingKey(data, "ppp", "no-vj-comp", value)
}
func setSettingPppNoauth(data connectionData, value bool) {
	setSettingKey(data, "ppp", "noauth", value)
}
func setSettingPppNobsdcomp(data connectionData, value bool) {
	setSettingKey(data, "ppp", "nobsdcomp", value)
}
func setSettingPppNodeflate(data connectionData, value bool) {
	setSettingKey(data, "ppp", "nodeflate", value)
}
func setSettingPppRefuseChap(data connectionData, value bool) {
	setSettingKey(data, "ppp", "refuse-chap", value)
}
func setSettingPppRefuseEap(data connectionData, value bool) {
	setSettingKey(data, "ppp", "refuse-eap", value)
}
func setSettingPppRefuseMschap(data connectionData, value bool) {
	setSettingKey(data, "ppp", "refuse-mschap", value)
}
func setSettingPppRefuseMschapv2(data connectionData, value bool) {
	setSettingKey(data, "ppp", "refuse-mschapv2", value)
}
func setSettingPppRefusePap(data connectionData, value bool) {
	setSettingKey(data, "ppp", "refuse-pap", value)
}
func setSettingPppRequireMppe(data connectionData, value bool) {
	setSettingKey(data, "ppp", "require-mppe", value)
}
func setSettingPppRequireMppe128(data connectionData, value bool) {
	setSettingKey(data, "ppp", "require-mppe-128", value)
}
func setSettingPppoeParent(data connectionData, value string) {
	setSettingKey(data, "pppoe", "parent", value)
}
func setSettingPppoePassword(data connectionData, value string) {
	setSettingKey(data, "pppoe", "password", value)
}
func setSettingPppoePasswordFlags(data connectionData, value uint32) {
	setSettingKey(data, "pppoe", "password-flags", value)
}
func setSettingPppoeService(data connectionData, value string) {
	setSettingKey(data, "pppoe", "service", value)
}
func setSettingPppoeUsername(data connectionData, value string) {
	setSettingKey(data, "pppoe", "username", value)
}
func setSettingProxyBrowserOnly(data connectionData, value bool) {
	setSettingKey(data, "proxy", "browser-only", value)
}
func setSettingProxyMethod(data connectionData, value int32) {
	setSettingKey(data, "proxy", "method", value)
}
func setSettingProxyPacScript(data connectionData, value string) {
	setSettingKey(data, "proxy", "pac-script", value)
}
func setSettingProxyPacUrl(data connectionData, value string) {
	setSettingKey(data, "proxy", "pac-url", value)
}
func setSettingSerialBaud(data connectionData, value uint32) {
	setSettingKey(data, "serial", "baud", value)
}
func setSettingSerialBits(data connectionData, value uint32) {
	setSettingKey(data, "serial", "bits", value)
}
func setSettingSerialParity(data connectionData, value byte) {
	setSettingKey(data, "serial", "parity", value)
}
func setSettingSerialSendDelay(data connectionData, value uint64) {
	setSettingKey(data, "serial", "send-delay", value)
}
func setSettingSerialStopbits(data connectionData, value uint32) {
	setSettingKey(data, "serial", "stopbits", value)
}
func setSettingTeamConfig(data connectionData, value string) {
	setSettingKey(data, "team", "config", value)
}
func setSettingTeamMcastRejoinCount(data connectionData, value int32) {
	setSettingKey(data, "team", "mcast-rejoin-count", value)
}
func setSettingTeamMcastRejoinInterval(data connectionData, value int32) {
	setSettingKey(data, "team", "mcast-rejoin-interval", value)
}
func setSettingTeamNotifyPeersCount(data connectionData, value int32) {
	setSettingKey(data, "team", "notify-peers-count", value)
}
func setSettingTeamNotifyPeersInterval(data connectionData, value int32) {
	setSettingKey(data, "team", "notify-peers-interval", value)
}
func setSettingTeamRunner(data connectionData, value string) {
	setSettingKey(data, "team", "runner", value)
}
func setSettingTeamRunnerActive(data connectionData, value bool) {
	setSettingKey(data, "team", "runner-active", value)
}
func setSettingTeamRunnerAggSelectPolicy(data connectionData, value string) {
	setSettingKey(data, "team", "runner-agg-select-policy", value)
}
func setSettingTeamRunnerFastRate(data connectionData, value bool) {
	setSettingKey(data, "team", "runner-fast-rate", value)
}
func setSettingTeamRunnerHwaddrPolicy(data connectionData, value string) {
	setSettingKey(data, "team", "runner-hwaddr-policy", value)
}
func setSettingTeamRunnerMinPorts(data connectionData, value int32) {
	setSettingKey(data, "team", "runner-min-ports", value)
}
func setSettingTeamRunnerSysPrio(data connectionData, value int32) {
	setSettingKey(data, "team", "runner-sys-prio", value)
}
func setSettingTeamRunnerTxBalancer(data connectionData, value string) {
	setSettingKey(data, "team", "runner-tx-balancer", value)
}
func setSettingTeamRunnerTxBalancerInterval(data connectionData, value int32) {
	setSettingKey(data, "team", "runner-tx-balancer-interval", value)
}
func setSettingTeamRunnerTxHash(data connectionData, value []string) {
	setSettingKey(data, "team", "runner-tx-hash", value)
}
func setSettingTeamPortConfig(data connectionData, value string) {
	setSettingKey(data, "team-port", "config", value)
}
func setSettingTeamPortLacpKey(data connectionData, value int32) {
	setSettingKey(data, "team-port", "lacp-key", value)
}
func setSettingTeamPortLacpPrio(data connectionData, value int32) {
	setSettingKey(data, "team-port", "lacp-prio", value)
}
func setSettingTeamPortPrio(data connectionData, value int32) {
	setSettingKey(data, "team-port", "prio", value)
}
func setSettingTeamPortQueueId(data connectionData, value int32) {
	setSettingKey(data, "team-port", "queue-id", value)
}
func setSettingTeamPortSticky(data connectionData, value bool) {
	setSettingKey(data, "team-port", "sticky", value)
}
func setSettingTunGroup(data connectionData, value string) {
	setSettingKey(data, "tun", "group", value)
}
func setSettingTunMode(data connectionData, value uint32) {
	setSettingKey(data, "tun", "mode", value)
}
func setSettingTunMultiQueue(data connectionData, value bool) {
	setSettingKey(data, "tun", "multi-queue", value)
}
func setSettingTunOwner(data connectionData, value string) {
	setSettingKey(data, "tun", "owner", value)
}
func setSettingTunPi(data connectionData, value bool) {
	setSettingKey(data, "tun", "pi", value)
}
func setSettingTunVnetHdr(data connectionData, value bool) {
	setSettingKey(data, "tun", "vnet-hdr", value)
}
func setSettingUserData(data connectionData, value map[string]string) {
	setSettingKey(data, "user", "data", value)
}
func setSettingVlanEgressPriorityMap(data connectionData, value []string) {
	setSettingKey(data, "vlan", "egress-priority-map", value)
}
func setSettingVlanFlags(data connectionData, value uint32) {
	setSettingKey(data, "vlan", "flags", value)
}
func setSettingVlanId(data connectionData, value uint32) {
	setSettingKey(data, "vlan", "id", value)
}
func setSettingVlanIngressPriorityMap(data connectionData, value []string) {
	setSettingKey(data, "vlan", "ingress-priority-map", value)
}
func setSettingVlanParent(data connectionData, value string) {
	setSettingKey(data, "vlan", "parent", value)
}
func setSettingVpnData(data connectionData, value map[string]string) {
	setSettingKey(data, "vpn", "data", value)
}
func setSettingVpnPersistent(data connectionData, value bool) {
	setSettingKey(data, "vpn", "persistent", value)
}
func setSettingVpnSecrets(data connectionData, value map[string]string) {
	setSettingKey(data, "vpn", "secrets", value)
}
func setSettingVpnServiceType(data connectionData, value string) {
	setSettingKey(data, "vpn", "service-type", value)
}
func setSettingVpnTimeout(data connectionData, value uint32) {
	setSettingKey(data, "vpn", "timeout", value)
}
func setSettingVpnUserName(data connectionData, value string) {
	setSettingKey(data, "vpn", "user-name", value)
}
func setSettingVxlanAgeing(data connectionData, value uint32) {
	setSettingKey(data, "vxlan", "ageing", value)
}
func setSettingVxlanDestinationPort(data connectionData, value uint32) {
	setSettingKey(data, "vxlan", "destination-port", value)
}
func setSettingVxlanId(data connectionData, value uint32) {
	setSettingKey(data, "vxlan", "id", value)
}
func setSettingVxlanL2Miss(data connectionData, value bool) {
	setSettingKey(data, "vxlan", "l2-miss", value)
}
func setSettingVxlanL3Miss(data connectionData, value bool) {
	setSettingKey(data, "vxlan", "l3-miss", value)
}
func setSettingVxlanLearning(data connectionData, value bool) {
	setSettingKey(data, "vxlan", "learning", value)
}
func setSettingVxlanLimit(data connectionData, value uint32) {
	setSettingKey(data, "vxlan", "limit", value)
}
func setSettingVxlanLocal(data connectionData, value string) {
	setSettingKey(data, "vxlan", "local", value)
}
func setSettingVxlanParent(data connectionData, value string) {
	setSettingKey(data, "vxlan", "parent", value)
}
func setSettingVxlanProxy(data connectionData, value bool) {
	setSettingKey(data, "vxlan", "proxy", value)
}
func setSettingVxlanRemote(data connectionData, value string) {
	setSettingKey(data, "vxlan", "remote", value)
}
func setSettingVxlanRsc(data connectionData, value bool) {
	setSettingKey(data, "vxlan", "rsc", value)
}
func setSettingVxlanSourcePortMax(data connectionData, value uint32) {
	setSettingKey(data, "vxlan", "source-port-max", value)
}
func setSettingVxlanSourcePortMin(data connectionData, value uint32) {
	setSettingKey(data, "vxlan", "source-port-min", value)
}
func setSettingVxlanTos(data connectionData, value uint32) {
	setSettingKey(data, "vxlan", "tos", value)
}
func setSettingVxlanTtl(data connectionData, value uint32) {
	setSettingKey(data, "vxlan", "ttl", value)
}
func setSettingWimaxMacAddress(data connectionData, value []byte) {
	setSettingKey(data, "wimax", "mac-address", value)
}
func setSettingWimaxNetworkName(data connectionData, value string) {
	setSettingKey(data, "wimax", "network-name", value)
}
func setSettingWiredAutoNegotiate(data connectionData, value bool) {
	setSettingKey(data, "802-3-ethernet", "auto-negotiate", value)
}
func setSettingWiredClonedMacAddress(data connectionData, value []byte) {
	setSettingKey(data, "802-3-ethernet", "cloned-mac-address", value)
}
func setSettingWiredDuplex(data connectionData, value string) {
	setSettingKey(data, "802-3-ethernet", "duplex", value)
}
func setSettingWiredGenerateMacAddressMask(data connectionData, value string) {
	setSettingKey(data, "802-3-ethernet", "generate-mac-address-mask", value)
}
func setSettingWiredMacAddress(data connectionData, value []byte) {
	setSettingKey(data, "802-3-ethernet", "mac-address", value)
}
func setSettingWiredMacAddressBlacklist(data connectionData, value []string) {
	setSettingKey(data, "802-3-ethernet", "mac-address-blacklist", value)
}
func setSettingWiredMtu(data connectionData, value uint32) {
	setSettingKey(data, "802-3-ethernet", "mtu", value)
}
func setSettingWiredPort(data connectionData, value string) {
	setSettingKey(data, "802-3-ethernet", "port", value)
}
func setSettingWiredS390Nettype(data connectionData, value string) {
	setSettingKey(data, "802-3-ethernet", "s390-nettype", value)
}
func setSettingWiredS390Options(data connectionData, value map[string]string) {
	setSettingKey(data, "802-3-ethernet", "s390-options", value)
}
func setSettingWiredS390Subchannels(data connectionData, value []string) {
	setSettingKey(data, "802-3-ethernet", "s390-subchannels", value)
}
func setSettingWiredSpeed(data connectionData, value uint32) {
	setSettingKey(data, "802-3-ethernet", "speed", value)
}
func setSettingWiredWakeOnLan(data connectionData, value uint32) {
	setSettingKey(data, "802-3-ethernet", "wake-on-lan", value)
}
func setSettingWiredWakeOnLanPassword(data connectionData, value string) {
	setSettingKey(data, "802-3-ethernet", "wake-on-lan-password", value)
}
func setSettingWirelessBand(data connectionData, value string) {
	setSettingKey(data, "802-11-wireless", "band", value)
}
func setSettingWirelessBssid(data connectionData, value []byte) {
	setSettingKey(data, "802-11-wireless", "bssid", value)
}
func setSettingWirelessChannel(data connectionData, value uint32) {
	setSettingKey(data, "802-11-wireless", "channel", value)
}
func setSettingWirelessClonedMacAddress(data connectionData, value []byte) {
	setSettingKey(data, "802-11-wireless", "cloned-mac-address", value)
}
func setSettingWirelessGenerateMacAddressMask(data connectionData, value string) {
	setSettingKey(data, "802-11-wireless", "generate-mac-address-mask", value)
}
func setSettingWirelessHidden(data connectionData, value bool) {
	setSettingKey(data, "802-11-wireless", "hidden", value)
}
func setSettingWirelessMacAddress(data connectionData, value []byte) {
	setSettingKey(data, "802-11-wireless", "mac-address", value)
}
func setSettingWirelessMacAddressBlacklist(data connectionData, value []string) {
	setSettingKey(data, "802-11-wireless", "mac-address-blacklist", value)
}
func setSettingWirelessMacAddressRandomization(data connectionData, value uint32) {
	setSettingKey(data, "802-11-wireless", "mac-address-randomization", value)
}
func setSettingWirelessMode(data connectionData, value string) {
	setSettingKey(data, "802-11-wireless", "mode", value)
}
func setSettingWirelessMtu(data connectionData, value uint32) {
	setSettingKey(data, "802-11-wireless", "mtu", value)
}
func setSettingWirelessPowersave(data connectionData, value uint32) {
	setSettingKey(data, "802-11-wireless", "powersave", value)
}
func setSettingWirelessRate(data connectionData, value uint32) {
	setSettingKey(data, "802-11-wireless", "rate", value)
}
func setSettingWirelessSeenBssids(data connectionData, value []string) {
	setSettingKey(data, "802-11-wireless", "seen-bssids", value)
}
func setSettingWirelessSsid(data connectionData, value []byte) {
	setSettingKey(data, "802-11-wireless", "ssid", value)
}
func setSettingWirelessTxPower(data connectionData, value uint32) {
	setSettingKey(data, "802-11-wireless", "tx-power", value)
}
func setSettingWirelessSecurityAuthAlg(data connectionData, value string) {
	setSettingKey(data, "802-11-wireless-security", "auth-alg", value)
}
func setSettingWirelessSecurityGroup(data connectionData, value []string) {
	setSettingKey(data, "802-11-wireless-security", "group", value)
}
func setSettingWirelessSecurityKeyMgmt(data connectionData, value string) {
	setSettingKey(data, "802-11-wireless-security", "key-mgmt", value)
}
func setSettingWirelessSecurityLeapPassword(data connectionData, value string) {
	setSettingKey(data, "802-11-wireless-security", "leap-password", value)
}
func setSettingWirelessSecurityLeapPasswordFlags(data connectionData, value uint32) {
	setSettingKey(data, "802-11-wireless-security", "leap-password-flags", value)
}
func setSettingWirelessSecurityLeapUsername(data connectionData, value string) {
	setSettingKey(data, "802-11-wireless-security", "leap-username", value)
}
func setSettingWirelessSecurityPairwise(data connectionData, value []string) {
	setSettingKey(data, "802-11-wireless-security", "pairwise", value)
}
func setSettingWirelessSecurityPmf(data connectionData, value int32) {
	setSettingKey(data, "802-11-wireless-security", "pmf", value)
}
func setSettingWirelessSecurityProto(data connectionData, value []string) {
	setSettingKey(data, "802-11-wireless-security", "proto", value)
}
func setSettingWirelessSecurityPsk(data connectionData, value string) {
	setSettingKey(data, "802-11-wireless-security", "psk", value)
}
func setSettingWirelessSecurityPskFlags(data connectionData, value uint32) {
	setSettingKey(data, "802-11-wireless-security", "psk-flags", value)
}
func setSettingWirelessSecurityWepKeyFlags(data connectionData, value uint32) {
	setSettingKey(data, "802-11-wireless-security", "wep-key-flags", value)
}
func setSettingWirelessSecurityWepKeyType(data connectionData, value uint32) {
	setSettingKey(data, "802-11-wireless-security", "wep-key-type", value)
}
func setSettingWirelessSecurityWepKey0(data connectionData, value string) {
	setSettingKey(data, "802-11-wireless-security", "wep-key0", value)
}
func setSettingWirelessSecurityWepKey1(data connectionData, value string) {
	setSettingKey(data, "802-11-wireless-security", "wep-key1", value)
}
func setSettingWirelessSecurityWepKey2(data connectionData, value string) {
	setSettingKey(data, "802-11-wireless-security", "wep-key2", value)
}
func setSettingWirelessSecurityWepKey3(data connectionData, value string) {
	setSettingKey(data, "802-11-wireless-security", "wep-key3", value)
}
func setSettingWirelessSecurityWepTxKeyidx(data connectionData, value uint32) {
	setSettingKey(data, "802-11-wireless-security", "wep-tx-keyidx", value)
}
func setSettingWirelessSecurityWpsMethod(data connectionData, value uint32) {
	setSettingKey(data, "802-11-wireless-security", "wps-method", value)
}
func setSettingVpnL2tpKeyGateway(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-l2tp", "gateway", value)
}
func setSettingVpnL2tpKeyUser(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-l2tp", "user", value)
}
func setSettingVpnL2tpKeyPasswordFlags(data connectionData, value uint32) {
	setSettingKey(data, "alias-vpn-l2tp", "password-flags", value)
}
func setSettingVpnL2tpKeyPassword(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-l2tp", "password", value)
}
func setSettingVpnL2tpKeyDomain(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-l2tp", "domain", value)
}
func setSettingVpnL2tpKeyRequireMppe(data connectionData, value bool) {
	setSettingKey(data, "alias-vpn-l2tp-ppp", "require-mppe", value)
}
func setSettingVpnL2tpKeyRequireMppe40(data connectionData, value bool) {
	setSettingKey(data, "alias-vpn-l2tp-ppp", "require-mppe-40", value)
}
func setSettingVpnL2tpKeyRequireMppe128(data connectionData, value bool) {
	setSettingKey(data, "alias-vpn-l2tp-ppp", "require-mppe-128", value)
}
func setSettingVpnL2tpKeyMppeStateful(data connectionData, value bool) {
	setSettingKey(data, "alias-vpn-l2tp-ppp", "mppe-stateful", value)
}
func setSettingVpnL2tpKeyRefuseEap(data connectionData, value bool) {
	setSettingKey(data, "alias-vpn-l2tp-ppp", "refuse-eap", value)
}
func setSettingVpnL2tpKeyRefusePap(data connectionData, value bool) {
	setSettingKey(data, "alias-vpn-l2tp-ppp", "refuse-pap", value)
}
func setSettingVpnL2tpKeyRefuseChap(data connectionData, value bool) {
	setSettingKey(data, "alias-vpn-l2tp-ppp", "refuse-chap", value)
}
func setSettingVpnL2tpKeyRefuseMschap(data connectionData, value bool) {
	setSettingKey(data, "alias-vpn-l2tp-ppp", "refuse-mschap", value)
}
func setSettingVpnL2tpKeyRefuseMschapv2(data connectionData, value bool) {
	setSettingKey(data, "alias-vpn-l2tp-ppp", "refuse-mschapv2", value)
}
func setSettingVpnL2tpKeyNobsdcomp(data connectionData, value bool) {
	setSettingKey(data, "alias-vpn-l2tp-ppp", "nobsdcomp", value)
}
func setSettingVpnL2tpKeyNodeflate(data connectionData, value bool) {
	setSettingKey(data, "alias-vpn-l2tp-ppp", "nodeflate", value)
}
func setSettingVpnL2tpKeyNoVjComp(data connectionData, value bool) {
	setSettingKey(data, "alias-vpn-l2tp-ppp", "no-vj-comp", value)
}
func setSettingVpnL2tpKeyNoPcomp(data connectionData, value bool) {
	setSettingKey(data, "alias-vpn-l2tp-ppp", "nopcomp", value)
}
func setSettingVpnL2tpKeyNoAccomp(data connectionData, value bool) {
	setSettingKey(data, "alias-vpn-l2tp-ppp", "noaccomp", value)
}
func setSettingVpnL2tpKeyLcpEchoFailure(data connectionData, value uint32) {
	setSettingKey(data, "alias-vpn-l2tp-ppp", "lcp-echo-failure", value)
}
func setSettingVpnL2tpKeyLcpEchoInterval(data connectionData, value uint32) {
	setSettingKey(data, "alias-vpn-l2tp-ppp", "lcp-echo-interval", value)
}
func setSettingVpnL2tpKeyIpsecEnable(data connectionData, value bool) {
	setSettingKey(data, "alias-vpn-l2tp-ipsec", "ipsec-enabled", value)
}
func setSettingVpnL2tpKeyIpsecGroupName(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-l2tp-ipsec", "ipsec-group-name", value)
}
func setSettingVpnL2tpKeyIpsecGatewayId(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-l2tp-ipsec", "ipsec-gateway-id", value)
}
func setSettingVpnL2tpKeyIpsecPsk(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-l2tp-ipsec", "ipsec-psk", value)
}
func setSettingVpnL2tpKeyIpsecIke(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-l2tp-ipsec", "ipsec-ike", value)
}
func setSettingVpnL2tpKeyIpsecEsp(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-l2tp-ipsec", "ipsec-esp", value)
}
func setSettingVpnOpenconnectKeyGateway(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-openconnect", "gateway", value)
}
func setSettingVpnOpenconnectKeyCacert(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-openconnect", "cacert", value)
}
func setSettingVpnOpenconnectKeyProxy(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-openconnect", "proxy", value)
}
func setSettingVpnOpenconnectKeyCsdEnable(data connectionData, value bool) {
	setSettingKey(data, "alias-vpn-openconnect", "enable_csd_trojan", value)
}
func setSettingVpnOpenconnectKeyCsdWrapper(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-openconnect", "csd_wrapper", value)
}
func setSettingVpnOpenconnectKeyUsercert(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-openconnect", "usercert", value)
}
func setSettingVpnOpenconnectKeyPrivkey(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-openconnect", "userkey", value)
}
func setSettingVpnOpenconnectKeyPemPassphraseFsid(data connectionData, value bool) {
	setSettingKey(data, "alias-vpn-openconnect", "pem_passphrase_fsid", value)
}
func setSettingVpnOpenconnectKeyCookie(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-openconnect", "cookie", value)
}
func setSettingVpnOpenconnectKeyGwcert(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-openconnect", "gwcert", value)
}
func setSettingVpnOpenconnectKeyAuthtype(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-openconnect", "authtype", value)
}
func setSettingVpnOpenconnectKeyMtu(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-openconnect", "mtu", value)
}
func setSettingVpnOpenconnectKeyStokenSource(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-openconnect", "stoken_source", value)
}
func setSettingVpnOpenconnectKeyStokenString(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-openconnect", "stoken_string", value)
}
func setSettingVpnOpenvpnKeyRemote(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-openvpn", "remote", value)
}
func setSettingVpnOpenvpnKeyConnectionType(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-openvpn", "connection-type", value)
}
func setSettingVpnOpenvpnKeyUsername(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-openvpn", "username", value)
}
func setSettingVpnOpenvpnKeyPasswordFlags(data connectionData, value uint32) {
	setSettingKey(data, "alias-vpn-openvpn", "password-flags", value)
}
func setSettingVpnOpenvpnKeyPassword(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-openvpn", "password", value)
}
func setSettingVpnOpenvpnKeyCa(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-openvpn", "ca", value)
}
func setSettingVpnOpenvpnKeyCert(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-openvpn", "cert", value)
}
func setSettingVpnOpenvpnKeyKey(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-openvpn", "key", value)
}
func setSettingVpnOpenvpnKeyCertpassFlags(data connectionData, value uint32) {
	setSettingKey(data, "alias-vpn-openvpn", "cert-pass-flags", value)
}
func setSettingVpnOpenvpnKeyCertpass(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-openvpn", "cert-pass", value)
}
func setSettingVpnOpenvpnKeyStaticKey(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-openvpn", "static-key", value)
}
func setSettingVpnOpenvpnKeyStaticKeyDirection(data connectionData, value uint32) {
	setSettingKey(data, "alias-vpn-openvpn", "static-key-direction", value)
}
func setSettingVpnOpenvpnKeyRemoteIp(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-openvpn", "remote-ip", value)
}
func setSettingVpnOpenvpnKeyLocalIp(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-openvpn", "local-ip", value)
}
func setSettingVpnOpenvpnKeyPort(data connectionData, value uint32) {
	setSettingKey(data, "alias-vpn-openvpn-advanced", "port", value)
}
func setSettingVpnOpenvpnKeyRenegSeconds(data connectionData, value uint32) {
	setSettingKey(data, "alias-vpn-openvpn-advanced", "reneg-seconds", value)
}
func setSettingVpnOpenvpnKeyCompLzo(data connectionData, value bool) {
	setSettingKey(data, "alias-vpn-openvpn-advanced", "comp-lzo", value)
}
func setSettingVpnOpenvpnKeyProtoTcp(data connectionData, value bool) {
	setSettingKey(data, "alias-vpn-openvpn-advanced", "proto-tcp", value)
}
func setSettingVpnOpenvpnKeyTapDev(data connectionData, value bool) {
	setSettingKey(data, "alias-vpn-openvpn-advanced", "tap-dev", value)
}
func setSettingVpnOpenvpnKeyTunnelMtu(data connectionData, value uint32) {
	setSettingKey(data, "alias-vpn-openvpn-advanced", "tunnel-mtu", value)
}
func setSettingVpnOpenvpnKeyFragmentSize(data connectionData, value uint32) {
	setSettingKey(data, "alias-vpn-openvpn-advanced", "fragment-size", value)
}
func setSettingVpnOpenvpnKeyMssfix(data connectionData, value bool) {
	setSettingKey(data, "alias-vpn-openvpn-advanced", "mssfix", value)
}
func setSettingVpnOpenvpnKeyRemoteRandom(data connectionData, value bool) {
	setSettingKey(data, "alias-vpn-openvpn-advanced", "remote-random", value)
}
func setSettingVpnOpenvpnKeyCipher(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-openvpn-security", "cipher", value)
}
func setSettingVpnOpenvpnKeyAuth(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-openvpn-security", "auth", value)
}
func setSettingVpnOpenvpnKeyTlsRemote(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-openvpn-tlsauth", "tls-remote", value)
}
func setSettingVpnOpenvpnKeyRemoteCertTls(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-openvpn-tlsauth", "remote-cert-tls", value)
}
func setSettingVpnOpenvpnKeyTa(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-openvpn-tlsauth", "ta", value)
}
func setSettingVpnOpenvpnKeyTaDir(data connectionData, value uint32) {
	setSettingKey(data, "alias-vpn-openvpn-tlsauth", "ta-dir", value)
}
func setSettingVpnOpenvpnKeyProxyType(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-openvpn-proxies", "proxy-type", value)
}
func setSettingVpnOpenvpnKeyProxyServer(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-openvpn-proxies", "proxy-server", value)
}
func setSettingVpnOpenvpnKeyProxyPort(data connectionData, value uint32) {
	setSettingKey(data, "alias-vpn-openvpn-proxies", "proxy-port", value)
}
func setSettingVpnOpenvpnKeyProxyRetry(data connectionData, value bool) {
	setSettingKey(data, "alias-vpn-openvpn-proxies", "proxy-retry", value)
}
func setSettingVpnOpenvpnKeyHttpProxyUsername(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-openvpn-proxies", "http-proxy-username", value)
}
func setSettingVpnOpenvpnKeyHttpProxyPassword(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-openvpn-proxies", "http-proxy-password", value)
}
func setSettingVpnOpenvpnKeyHttpProxyPasswordFlags(data connectionData, value uint32) {
	setSettingKey(data, "alias-vpn-openvpn-proxies", "http-proxy-password-flags", value)
}
func setSettingVpnPptpKeyGateway(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-pptp", "gateway", value)
}
func setSettingVpnPptpKeyUser(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-pptp", "user", value)
}
func setSettingVpnPptpKeyPasswordFlags(data connectionData, value uint32) {
	setSettingKey(data, "alias-vpn-pptp", "password-flags", value)
}
func setSettingVpnPptpKeyPassword(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-pptp", "password", value)
}
func setSettingVpnPptpKeyDomain(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-pptp", "domain", value)
}
func setSettingVpnPptpKeyRequireMppe(data connectionData, value bool) {
	setSettingKey(data, "alias-vpn-pptp-ppp", "require-mppe", value)
}
func setSettingVpnPptpKeyRequireMppe40(data connectionData, value bool) {
	setSettingKey(data, "alias-vpn-pptp-ppp", "require-mppe-40", value)
}
func setSettingVpnPptpKeyRequireMppe128(data connectionData, value bool) {
	setSettingKey(data, "alias-vpn-pptp-ppp", "require-mppe-128", value)
}
func setSettingVpnPptpKeyMppeStateful(data connectionData, value bool) {
	setSettingKey(data, "alias-vpn-pptp-ppp", "mppe-stateful", value)
}
func setSettingVpnPptpKeyRefuseEap(data connectionData, value bool) {
	setSettingKey(data, "alias-vpn-pptp-ppp", "refuse-eap", value)
}
func setSettingVpnPptpKeyRefusePap(data connectionData, value bool) {
	setSettingKey(data, "alias-vpn-pptp-ppp", "refuse-pap", value)
}
func setSettingVpnPptpKeyRefuseChap(data connectionData, value bool) {
	setSettingKey(data, "alias-vpn-pptp-ppp", "refuse-chap", value)
}
func setSettingVpnPptpKeyRefuseMschap(data connectionData, value bool) {
	setSettingKey(data, "alias-vpn-pptp-ppp", "refuse-mschap", value)
}
func setSettingVpnPptpKeyRefuseMschapv2(data connectionData, value bool) {
	setSettingKey(data, "alias-vpn-pptp-ppp", "refuse-mschapv2", value)
}
func setSettingVpnPptpKeyNobsdcomp(data connectionData, value bool) {
	setSettingKey(data, "alias-vpn-pptp-ppp", "nobsdcomp", value)
}
func setSettingVpnPptpKeyNodeflate(data connectionData, value bool) {
	setSettingKey(data, "alias-vpn-pptp-ppp", "nodeflate", value)
}
func setSettingVpnPptpKeyNoVjComp(data connectionData, value bool) {
	setSettingKey(data, "alias-vpn-pptp-ppp", "no-vj-comp", value)
}
func setSettingVpnPptpKeyLcpEchoFailure(data connectionData, value uint32) {
	setSettingKey(data, "alias-vpn-pptp-ppp", "lcp-echo-failure", value)
}
func setSettingVpnPptpKeyLcpEchoInterval(data connectionData, value uint32) {
	setSettingKey(data, "alias-vpn-pptp-ppp", "lcp-echo-interval", value)
}
func setSettingVpnStrongswanKeyAddress(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-strongswan", "address", value)
}
func setSettingVpnStrongswanKeyCertificate(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-strongswan", "certificate", value)
}
func setSettingVpnStrongswanKeyMethod(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-strongswan", "method", value)
}
func setSettingVpnStrongswanKeyUser(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-strongswan", "user", value)
}
func setSettingVpnStrongswanKeyUsercert(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-strongswan", "usercert", value)
}
func setSettingVpnStrongswanKeyUserkey(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-strongswan", "userkey", value)
}
func setSettingVpnStrongswanKeyPassword(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-strongswan", "password", value)
}
func setSettingVpnStrongswanKeyPasswordFlags(data connectionData, value uint32) {
	setSettingKey(data, "alias-vpn-strongswan", "password-flags", value)
}
func setSettingVpnStrongswanKeyVirtual(data connectionData, value bool) {
	setSettingKey(data, "alias-vpn-strongswan", "virtual", value)
}
func setSettingVpnStrongswanKeyEncap(data connectionData, value bool) {
	setSettingKey(data, "alias-vpn-strongswan", "encap", value)
}
func setSettingVpnStrongswanKeyIpcomp(data connectionData, value bool) {
	setSettingKey(data, "alias-vpn-strongswan", "ipcomp", value)
}
func setSettingVpnVpncKeyGateway(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-vpnc", "IPSec gateway", value)
}
func setSettingVpnVpncKeyXauthUser(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-vpnc", "Xauth username", value)
}
func setSettingVpnVpncKeyXauthPasswordType(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-vpnc", "xauth-password-type", value)
}
func setSettingVpnVpncKeyXauthPasswordFlags(data connectionData, value uint32) {
	setSettingKey(data, "alias-vpn-vpnc", "Xauth password-flags", value)
}
func setSettingVpnVpncKeyXauthPassword(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-vpnc", "Xauth password", value)
}
func setSettingVpnVpncKeyId(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-vpnc", "IPSec ID", value)
}
func setSettingVpnVpncKeySecretType(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-vpnc", "ipsec-secret-type", value)
}
func setSettingVpnVpncKeySecretFlags(data connectionData, value uint32) {
	setSettingKey(data, "alias-vpn-vpnc", "IPSec secret-flags", value)
}
func setSettingVpnVpncKeySecret(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-vpnc", "IPSec secret", value)
}
func setSettingVpnVpncKeyAuthmode(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-vpnc", "IKE Authmode", value)
}
func setSettingVpnVpncKeyCaFile(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-vpnc", "CA-File", value)
}
func setSettingVpnVpncKeyDomain(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-vpnc-advanced", "Domain", value)
}
func setSettingVpnVpncKeyVendor(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-vpnc-advanced", "Vendor", value)
}
func setSettingVpnVpncKeyAppVersion(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-vpnc-advanced", "Application Version", value)
}
func setSettingVpnVpncKeySingleDes(data connectionData, value bool) {
	setSettingKey(data, "alias-vpn-vpnc-advanced", "Enable Single DES", value)
}
func setSettingVpnVpncKeyNoEncryption(data connectionData, value bool) {
	setSettingKey(data, "alias-vpn-vpnc-advanced", "Enable no encryption", value)
}
func setSettingVpnVpncKeyNatTraversalMode(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-vpnc-advanced", "NAT Traversal Mode", value)
}
func setSettingVpnVpncKeyDhgroup(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-vpnc-advanced", "IKE DH Group", value)
}
func setSettingVpnVpncKeyPerfectForward(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-vpnc-advanced", "Perfect Forward Secrecy", value)
}
func setSettingVpnVpncKeyLocalPort(data connectionData, value uint32) {
	setSettingKey(data, "alias-vpn-vpnc-advanced", "Local Port", value)
}
func setSettingVpnVpncKeyDpdIdleTimeout(data connectionData, value uint32) {
	setSettingKey(data, "alias-vpn-vpnc-advanced", "DPD idle timeout (our side)", value)
}
func setSettingVpnVpncKeyCiscoUdpEncapsPort(data connectionData, value uint32) {
	setSettingKey(data, "alias-vpn-vpnc-advanced", "Cisco UDP Encapsulation Port", value)
}

// Remover
func removeSetting8021xAltsubjectMatches(data connectionData) {
	removeSettingKey(data, "802-1x", "altsubject-matches")
}
func removeSetting8021xAnonymousIdentity(data connectionData) {
	removeSettingKey(data, "802-1x", "anonymous-identity")
}
func removeSetting8021xAuthTimeout(data connectionData) {
	removeSettingKey(data, "802-1x", "auth-timeout")
}
func removeSetting8021xCaCert(data connectionData) {
	removeSettingKey(data, "802-1x", "ca-cert")
}
func removeSetting8021xCaCertPassword(data connectionData) {
	removeSettingKey(data, "802-1x", "ca-cert-password")
}
func removeSetting8021xCaCertPasswordFlags(data connectionData) {
	removeSettingKey(data, "802-1x", "ca-cert-password-flags")
}
func removeSetting8021xCaPath(data connectionData) {
	removeSettingKey(data, "802-1x", "ca-path")
}
func removeSetting8021xClientCert(data connectionData) {
	removeSettingKey(data, "802-1x", "client-cert")
}
func removeSetting8021xClientCertPassword(data connectionData) {
	removeSettingKey(data, "802-1x", "client-cert-password")
}
func removeSetting8021xClientCertPasswordFlags(data connectionData) {
	removeSettingKey(data, "802-1x", "client-cert-password-flags")
}
func removeSetting8021xDomainSuffixMatch(data connectionData) {
	removeSettingKey(data, "802-1x", "domain-suffix-match")
}
func removeSetting8021xEap(data connectionData) {
	removeSettingKey(data, "802-1x", "eap")
}
func removeSetting8021xIdentity(data connectionData) {
	removeSettingKey(data, "802-1x", "identity")
}
func removeSetting8021xPacFile(data connectionData) {
	removeSettingKey(data, "802-1x", "pac-file")
}
func removeSetting8021xPassword(data connectionData) {
	removeSettingKey(data, "802-1x", "password")
}
func removeSetting8021xPasswordFlags(data connectionData) {
	removeSettingKey(data, "802-1x", "password-flags")
}
func removeSetting8021xPasswordRaw(data connectionData) {
	removeSettingKey(data, "802-1x", "password-raw")
}
func removeSetting8021xPasswordRawFlags(data connectionData) {
	removeSettingKey(data, "802-1x", "password-raw-flags")
}
func removeSetting8021xPhase1AuthFlags(data connectionData) {
	removeSettingKey(data, "802-1x", "phase1-auth-flags")
}
func removeSetting8021xPhase1FastProvisioning(data connectionData) {
	removeSettingKey(data, "802-1x", "phase1-fast-provisioning")
}
func removeSetting8021xPhase1Peaplabel(data connectionData) {
	removeSettingKey(data, "802-1x", "phase1-peaplabel")
}
func removeSetting8021xPhase1Peapver(data connectionData) {
	removeSettingKey(data, "802-1x", "phase1-peapver")
}
func removeSetting8021xPhase2AltsubjectMatches(data connectionData) {
	removeSettingKey(data, "802-1x", "phase2-altsubject-matches")
}
func removeSetting8021xPhase2Auth(data connectionData) {
	removeSettingKey(data, "802-1x", "phase2-auth")
}
func removeSetting8021xPhase2Autheap(data connectionData) {
	removeSettingKey(data, "802-1x", "phase2-autheap")
}
func removeSetting8021xPhase2CaCert(data connectionData) {
	removeSettingKey(data, "802-1x", "phase2-ca-cert")
}
func removeSetting8021xPhase2CaCertPassword(data connectionData) {
	removeSettingKey(data, "802-1x", "phase2-ca-cert-password")
}
func removeSetting8021xPhase2CaCertPasswordFlags(data connectionData) {
	removeSettingKey(data, "802-1x", "phase2-ca-cert-password-flags")
}
func removeSetting8021xPhase2CaPath(data connectionData) {
	removeSettingKey(data, "802-1x", "phase2-ca-path")
}
func removeSetting8021xPhase2ClientCert(data connectionData) {
	removeSettingKey(data, "802-1x", "phase2-client-cert")
}
func removeSetting8021xPhase2ClientCertPassword(data connectionData) {
	removeSettingKey(data, "802-1x", "phase2-client-cert-password")
}
func removeSetting8021xPhase2ClientCertPasswordFlags(data connectionData) {
	removeSettingKey(data, "802-1x", "phase2-client-cert-password-flags")
}
func removeSetting8021xPhase2DomainSuffixMatch(data connectionData) {
	removeSettingKey(data, "802-1x", "phase2-domain-suffix-match")
}
func removeSetting8021xPhase2PrivateKey(data connectionData) {
	removeSettingKey(data, "802-1x", "phase2-private-key")
}
func removeSetting8021xPhase2PrivateKeyPassword(data connectionData) {
	removeSettingKey(data, "802-1x", "phase2-private-key-password")
}
func removeSetting8021xPhase2PrivateKeyPasswordFlags(data connectionData) {
	removeSettingKey(data, "802-1x", "phase2-private-key-password-flags")
}
func removeSetting8021xPhase2SubjectMatch(data connectionData) {
	removeSettingKey(data, "802-1x", "phase2-subject-match")
}
func removeSetting8021xPin(data connectionData) {
	removeSettingKey(data, "802-1x", "pin")
}
func removeSetting8021xPinFlags(data connectionData) {
	removeSettingKey(data, "802-1x", "pin-flags")
}
func removeSetting8021xPrivateKey(data connectionData) {
	removeSettingKey(data, "802-1x", "private-key")
}
func removeSetting8021xPrivateKeyPassword(data connectionData) {
	removeSettingKey(data, "802-1x", "private-key-password")
}
func removeSetting8021xPrivateKeyPasswordFlags(data connectionData) {
	removeSettingKey(data, "802-1x", "private-key-password-flags")
}
func removeSetting8021xSubjectMatch(data connectionData) {
	removeSettingKey(data, "802-1x", "subject-match")
}
func removeSetting8021xSystemCaCerts(data connectionData) {
	removeSettingKey(data, "802-1x", "system-ca-certs")
}
func removeSettingAdslEncapsulation(data connectionData) {
	removeSettingKey(data, "adsl", "encapsulation")
}
func removeSettingAdslPassword(data connectionData) {
	removeSettingKey(data, "adsl", "password")
}
func removeSettingAdslPasswordFlags(data connectionData) {
	removeSettingKey(data, "adsl", "password-flags")
}
func removeSettingAdslProtocol(data connectionData) {
	removeSettingKey(data, "adsl", "protocol")
}
func removeSettingAdslUsername(data connectionData) {
	removeSettingKey(data, "adsl", "username")
}
func removeSettingAdslVci(data connectionData) {
	removeSettingKey(data, "adsl", "vci")
}
func removeSettingAdslVpi(data connectionData) {
	removeSettingKey(data, "adsl", "vpi")
}
func removeSettingBluetoothBdaddr(data connectionData) {
	removeSettingKey(data, "bluetooth", "bdaddr")
}
func removeSettingBluetoothType(data connectionData) {
	removeSettingKey(data, "bluetooth", "type")
}
func removeSettingBondOptions(data connectionData) {
	removeSettingKey(data, "bond", "options")
}
func removeSettingBridgeAgeingTime(data connectionData) {
	removeSettingKey(data, "bridge", "ageing-time")
}
func removeSettingBridgeForwardDelay(data connectionData) {
	removeSettingKey(data, "bridge", "forward-delay")
}
func removeSettingBridgeGroupForwardMask(data connectionData) {
	removeSettingKey(data, "bridge", "group-forward-mask")
}
func removeSettingBridgeHelloTime(data connectionData) {
	removeSettingKey(data, "bridge", "hello-time")
}
func removeSettingBridgeMacAddress(data connectionData) {
	removeSettingKey(data, "bridge", "mac-address")
}
func removeSettingBridgeMaxAge(data connectionData) {
	removeSettingKey(data, "bridge", "max-age")
}
func removeSettingBridgeMulticastSnooping(data connectionData) {
	removeSettingKey(data, "bridge", "multicast-snooping")
}
func removeSettingBridgePriority(data connectionData) {
	removeSettingKey(data, "bridge", "priority")
}
func removeSettingBridgeStp(data connectionData) {
	removeSettingKey(data, "bridge", "stp")
}
func removeSettingBridgePortHairpinMode(data connectionData) {
	removeSettingKey(data, "bridge-port", "hairpin-mode")
}
func removeSettingBridgePortPathCost(data connectionData) {
	removeSettingKey(data, "bridge-port", "path-cost")
}
func removeSettingBridgePortPriority(data connectionData) {
	removeSettingKey(data, "bridge-port", "priority")
}
func removeSettingCdmaMtu(data connectionData) {
	removeSettingKey(data, "cdma", "mtu")
}
func removeSettingCdmaNumber(data connectionData) {
	removeSettingKey(data, "cdma", "number")
}
func removeSettingCdmaPassword(data connectionData) {
	removeSettingKey(data, "cdma", "password")
}
func removeSettingCdmaPasswordFlags(data connectionData) {
	removeSettingKey(data, "cdma", "password-flags")
}
func removeSettingCdmaUsername(data connectionData) {
	removeSettingKey(data, "cdma", "username")
}
func removeSettingConnectionAuthRetries(data connectionData) {
	removeSettingKey(data, "connection", "auth-retries")
}
func removeSettingConnectionAutoconnect(data connectionData) {
	removeSettingKey(data, "connection", "autoconnect")
}
func removeSettingConnectionAutoconnectPriority(data connectionData) {
	removeSettingKey(data, "connection", "autoconnect-priority")
}
func removeSettingConnectionAutoconnectRetries(data connectionData) {
	removeSettingKey(data, "connection", "autoconnect-retries")
}
func removeSettingConnectionAutoconnectSlaves(data connectionData) {
	removeSettingKey(data, "connection", "autoconnect-slaves")
}
func removeSettingConnectionGatewayPingTimeout(data connectionData) {
	removeSettingKey(data, "connection", "gateway-ping-timeout")
}
func removeSettingConnectionId(data connectionData) {
	removeSettingKey(data, "connection", "id")
}
func removeSettingConnectionInterfaceName(data connectionData) {
	removeSettingKey(data, "connection", "interface-name")
}
func removeSettingConnectionLldp(data connectionData) {
	removeSettingKey(data, "connection", "lldp")
}
func removeSettingConnectionMaster(data connectionData) {
	removeSettingKey(data, "connection", "master")
}
func removeSettingConnectionMetered(data connectionData) {
	removeSettingKey(data, "connection", "metered")
}
func removeSettingConnectionPermissions(data connectionData) {
	removeSettingKey(data, "connection", "permissions")
}
func removeSettingConnectionReadOnly(data connectionData) {
	removeSettingKey(data, "connection", "read-only")
}
func removeSettingConnectionSecondaries(data connectionData) {
	removeSettingKey(data, "connection", "secondaries")
}
func removeSettingConnectionSlaveType(data connectionData) {
	removeSettingKey(data, "connection", "slave-type")
}
func removeSettingConnectionStableId(data connectionData) {
	removeSettingKey(data, "connection", "stable-id")
}
func removeSettingConnectionTimestamp(data connectionData) {
	removeSettingKey(data, "connection", "timestamp")
}
func removeSettingConnectionType(data connectionData) {
	removeSettingKey(data, "connection", "type")
}
func removeSettingConnectionUuid(data connectionData) {
	removeSettingKey(data, "connection", "uuid")
}
func removeSettingConnectionZone(data connectionData) {
	removeSettingKey(data, "connection", "zone")
}
func removeSettingDcbAppFcoeFlags(data connectionData) {
	removeSettingKey(data, "dcb", "app-fcoe-flags")
}
func removeSettingDcbAppFcoeMode(data connectionData) {
	removeSettingKey(data, "dcb", "app-fcoe-mode")
}
func removeSettingDcbAppFcoePriority(data connectionData) {
	removeSettingKey(data, "dcb", "app-fcoe-priority")
}
func removeSettingDcbAppFipFlags(data connectionData) {
	removeSettingKey(data, "dcb", "app-fip-flags")
}
func removeSettingDcbAppFipPriority(data connectionData) {
	removeSettingKey(data, "dcb", "app-fip-priority")
}
func removeSettingDcbAppIscsiFlags(data connectionData) {
	removeSettingKey(data, "dcb", "app-iscsi-flags")
}
func removeSettingDcbAppIscsiPriority(data connectionData) {
	removeSettingKey(data, "dcb", "app-iscsi-priority")
}
func removeSettingDcbPriorityBandwidth(data connectionData) {
	removeSettingKey(data, "dcb", "priority-bandwidth")
}
func removeSettingDcbPriorityFlowControl(data connectionData) {
	removeSettingKey(data, "dcb", "priority-flow-control")
}
func removeSettingDcbPriorityFlowControlFlags(data connectionData) {
	removeSettingKey(data, "dcb", "priority-flow-control-flags")
}
func removeSettingDcbPriorityGroupBandwidth(data connectionData) {
	removeSettingKey(data, "dcb", "priority-group-bandwidth")
}
func removeSettingDcbPriorityGroupFlags(data connectionData) {
	removeSettingKey(data, "dcb", "priority-group-flags")
}
func removeSettingDcbPriorityGroupId(data connectionData) {
	removeSettingKey(data, "dcb", "priority-group-id")
}
func removeSettingDcbPriorityStrictBandwidth(data connectionData) {
	removeSettingKey(data, "dcb", "priority-strict-bandwidth")
}
func removeSettingDcbPriorityTrafficClass(data connectionData) {
	removeSettingKey(data, "dcb", "priority-traffic-class")
}
func removeSettingGsmApn(data connectionData) {
	removeSettingKey(data, "gsm", "apn")
}
func removeSettingGsmDeviceId(data connectionData) {
	removeSettingKey(data, "gsm", "device-id")
}
func removeSettingGsmHomeOnly(data connectionData) {
	removeSettingKey(data, "gsm", "home-only")
}
func removeSettingGsmMtu(data connectionData) {
	removeSettingKey(data, "gsm", "mtu")
}
func removeSettingGsmNetworkId(data connectionData) {
	removeSettingKey(data, "gsm", "network-id")
}
func removeSettingGsmNumber(data connectionData) {
	removeSettingKey(data, "gsm", "number")
}
func removeSettingGsmPassword(data connectionData) {
	removeSettingKey(data, "gsm", "password")
}
func removeSettingGsmPasswordFlags(data connectionData) {
	removeSettingKey(data, "gsm", "password-flags")
}
func removeSettingGsmPin(data connectionData) {
	removeSettingKey(data, "gsm", "pin")
}
func removeSettingGsmPinFlags(data connectionData) {
	removeSettingKey(data, "gsm", "pin-flags")
}
func removeSettingGsmSimId(data connectionData) {
	removeSettingKey(data, "gsm", "sim-id")
}
func removeSettingGsmSimOperatorId(data connectionData) {
	removeSettingKey(data, "gsm", "sim-operator-id")
}
func removeSettingGsmUsername(data connectionData) {
	removeSettingKey(data, "gsm", "username")
}
func removeSettingInfinibandMacAddress(data connectionData) {
	removeSettingKey(data, "infiniband", "mac-address")
}
func removeSettingInfinibandMtu(data connectionData) {
	removeSettingKey(data, "infiniband", "mtu")
}
func removeSettingInfinibandPKey(data connectionData) {
	removeSettingKey(data, "infiniband", "p-key")
}
func removeSettingInfinibandParent(data connectionData) {
	removeSettingKey(data, "infiniband", "parent")
}
func removeSettingInfinibandTransportMode(data connectionData) {
	removeSettingKey(data, "infiniband", "transport-mode")
}
func removeSettingIP4ConfigAddresses(data connectionData) {
	removeSettingKey(data, "ipv4", "addresses")
}
func removeSettingIP4ConfigDadTimeout(data connectionData) {
	removeSettingKey(data, "ipv4", "dad-timeout")
}
func removeSettingIP4ConfigDhcpClientId(data connectionData) {
	removeSettingKey(data, "ipv4", "dhcp-client-id")
}
func removeSettingIP4ConfigDhcpFqdn(data connectionData) {
	removeSettingKey(data, "ipv4", "dhcp-fqdn")
}
func removeSettingIP4ConfigDhcpHostname(data connectionData) {
	removeSettingKey(data, "ipv4", "dhcp-hostname")
}
func removeSettingIP4ConfigDhcpSendHostname(data connectionData) {
	removeSettingKey(data, "ipv4", "dhcp-send-hostname")
}
func removeSettingIP4ConfigDhcpTimeout(data connectionData) {
	removeSettingKey(data, "ipv4", "dhcp-timeout")
}
func removeSettingIP4ConfigDns(data connectionData) {
	removeSettingKey(data, "ipv4", "dns")
}
func removeSettingIP4ConfigDnsOptions(data connectionData) {
	removeSettingKey(data, "ipv4", "dns-options")
}
func removeSettingIP4ConfigDnsPriority(data connectionData) {
	removeSettingKey(data, "ipv4", "dns-priority")
}
func removeSettingIP4ConfigDnsSearch(data connectionData) {
	removeSettingKey(data, "ipv4", "dns-search")
}
func removeSettingIP4ConfigGateway(data connectionData) {
	removeSettingKey(data, "ipv4", "gateway")
}
func removeSettingIP4ConfigIgnoreAutoDns(data connectionData) {
	removeSettingKey(data, "ipv4", "ignore-auto-dns")
}
func removeSettingIP4ConfigIgnoreAutoRoutes(data connectionData) {
	removeSettingKey(data, "ipv4", "ignore-auto-routes")
}
func removeSettingIP4ConfigMayFail(data connectionData) {
	removeSettingKey(data, "ipv4", "may-fail")
}
func removeSettingIP4ConfigMethod(data connectionData) {
	removeSettingKey(data, "ipv4", "method")
}
func removeSettingIP4ConfigNeverDefault(data connectionData) {
	removeSettingKey(data, "ipv4", "never-default")
}
func removeSettingIP4ConfigRouteMetric(data connectionData) {
	removeSettingKey(data, "ipv4", "route-metric")
}
func removeSettingIP4ConfigRouteTable(data connectionData) {
	removeSettingKey(data, "ipv4", "route-table")
}
func removeSettingIP4ConfigRoutes(data connectionData) {
	removeSettingKey(data, "ipv4", "routes")
}
func removeSettingIP6ConfigAddrGenMode(data connectionData) {
	removeSettingKey(data, "ipv6", "addr-gen-mode")
}
func removeSettingIP6ConfigAddresses(data connectionData) {
	removeSettingKey(data, "ipv6", "addresses")
}
func removeSettingIP6ConfigDadTimeout(data connectionData) {
	removeSettingKey(data, "ipv6", "dad-timeout")
}
func removeSettingIP6ConfigDhcpHostname(data connectionData) {
	removeSettingKey(data, "ipv6", "dhcp-hostname")
}
func removeSettingIP6ConfigDhcpSendHostname(data connectionData) {
	removeSettingKey(data, "ipv6", "dhcp-send-hostname")
}
func removeSettingIP6ConfigDhcpTimeout(data connectionData) {
	removeSettingKey(data, "ipv6", "dhcp-timeout")
}
func removeSettingIP6ConfigDns(data connectionData) {
	removeSettingKey(data, "ipv6", "dns")
}
func removeSettingIP6ConfigDnsOptions(data connectionData) {
	removeSettingKey(data, "ipv6", "dns-options")
}
func removeSettingIP6ConfigDnsPriority(data connectionData) {
	removeSettingKey(data, "ipv6", "dns-priority")
}
func removeSettingIP6ConfigDnsSearch(data connectionData) {
	removeSettingKey(data, "ipv6", "dns-search")
}
func removeSettingIP6ConfigGateway(data connectionData) {
	removeSettingKey(data, "ipv6", "gateway")
}
func removeSettingIP6ConfigIgnoreAutoDns(data connectionData) {
	removeSettingKey(data, "ipv6", "ignore-auto-dns")
}
func removeSettingIP6ConfigIgnoreAutoRoutes(data connectionData) {
	removeSettingKey(data, "ipv6", "ignore-auto-routes")
}
func removeSettingIP6ConfigIp6Privacy(data connectionData) {
	removeSettingKey(data, "ipv6", "ip6-privacy")
}
func removeSettingIP6ConfigMayFail(data connectionData) {
	removeSettingKey(data, "ipv6", "may-fail")
}
func removeSettingIP6ConfigMethod(data connectionData) {
	removeSettingKey(data, "ipv6", "method")
}
func removeSettingIP6ConfigNeverDefault(data connectionData) {
	removeSettingKey(data, "ipv6", "never-default")
}
func removeSettingIP6ConfigRouteMetric(data connectionData) {
	removeSettingKey(data, "ipv6", "route-metric")
}
func removeSettingIP6ConfigRouteTable(data connectionData) {
	removeSettingKey(data, "ipv6", "route-table")
}
func removeSettingIP6ConfigRoutes(data connectionData) {
	removeSettingKey(data, "ipv6", "routes")
}
func removeSettingIP6ConfigToken(data connectionData) {
	removeSettingKey(data, "ipv6", "token")
}
func removeSettingIPTunnelEncapsulationLimit(data connectionData) {
	removeSettingKey(data, "ip-tunnel", "encapsulation-limit")
}
func removeSettingIPTunnelFlowLabel(data connectionData) {
	removeSettingKey(data, "ip-tunnel", "flow-label")
}
func removeSettingIPTunnelInputKey(data connectionData) {
	removeSettingKey(data, "ip-tunnel", "input-key")
}
func removeSettingIPTunnelLocal(data connectionData) {
	removeSettingKey(data, "ip-tunnel", "local")
}
func removeSettingIPTunnelMode(data connectionData) {
	removeSettingKey(data, "ip-tunnel", "mode")
}
func removeSettingIPTunnelMtu(data connectionData) {
	removeSettingKey(data, "ip-tunnel", "mtu")
}
func removeSettingIPTunnelOutputKey(data connectionData) {
	removeSettingKey(data, "ip-tunnel", "output-key")
}
func removeSettingIPTunnelParent(data connectionData) {
	removeSettingKey(data, "ip-tunnel", "parent")
}
func removeSettingIPTunnelPathMtuDiscovery(data connectionData) {
	removeSettingKey(data, "ip-tunnel", "path-mtu-discovery")
}
func removeSettingIPTunnelRemote(data connectionData) {
	removeSettingKey(data, "ip-tunnel", "remote")
}
func removeSettingIPTunnelTos(data connectionData) {
	removeSettingKey(data, "ip-tunnel", "tos")
}
func removeSettingIPTunnelTtl(data connectionData) {
	removeSettingKey(data, "ip-tunnel", "ttl")
}
func removeSettingMacsecEncrypt(data connectionData) {
	removeSettingKey(data, "macsec", "encrypt")
}
func removeSettingMacsecMkaCak(data connectionData) {
	removeSettingKey(data, "macsec", "mka-cak")
}
func removeSettingMacsecMkaCakFlags(data connectionData) {
	removeSettingKey(data, "macsec", "mka-cak-flags")
}
func removeSettingMacsecMkaCkn(data connectionData) {
	removeSettingKey(data, "macsec", "mka-ckn")
}
func removeSettingMacsecMode(data connectionData) {
	removeSettingKey(data, "macsec", "mode")
}
func removeSettingMacsecParent(data connectionData) {
	removeSettingKey(data, "macsec", "parent")
}
func removeSettingMacsecPort(data connectionData) {
	removeSettingKey(data, "macsec", "port")
}
func removeSettingMacsecValidation(data connectionData) {
	removeSettingKey(data, "macsec", "validation")
}
func removeSettingMacvlanMode(data connectionData) {
	removeSettingKey(data, "macvlan", "mode")
}
func removeSettingMacvlanParent(data connectionData) {
	removeSettingKey(data, "macvlan", "parent")
}
func removeSettingMacvlanPromiscuous(data connectionData) {
	removeSettingKey(data, "macvlan", "promiscuous")
}
func removeSettingMacvlanTap(data connectionData) {
	removeSettingKey(data, "macvlan", "tap")
}
func removeSettingOlpcMeshChannel(data connectionData) {
	removeSettingKey(data, "802-11-olpc-mesh", "channel")
}
func removeSettingOlpcMeshDhcpAnycastAddress(data connectionData) {
	removeSettingKey(data, "802-11-olpc-mesh", "dhcp-anycast-address")
}
func removeSettingOlpcMeshSsid(data connectionData) {
	removeSettingKey(data, "802-11-olpc-mesh", "ssid")
}
func removeSettingOvsBridgeFailMode(data connectionData) {
	removeSettingKey(data, "ovs-bridge", "fail-mode")
}
func removeSettingOvsBridgeMcastSnoopingEnable(data connectionData) {
	removeSettingKey(data, "ovs-bridge", "mcast-snooping-enable")
}
func removeSettingOvsBridgeRstpEnable(data connectionData) {
	removeSettingKey(data, "ovs-bridge", "rstp-enable")
}
func removeSettingOvsBridgeStpEnable(data connectionData) {
	removeSettingKey(data, "ovs-bridge", "stp-enable")
}
func removeSettingOvsInterfaceType(data connectionData) {
	removeSettingKey(data, "ovs-interface", "type")
}
func removeSettingOvsPatchPeer(data connectionData) {
	removeSettingKey(data, "ovs-patch", "peer")
}
func removeSettingOvsPortBondDowndelay(data connectionData) {
	removeSettingKey(data, "ovs-port", "bond-downdelay")
}
func removeSettingOvsPortBondMode(data connectionData) {
	removeSettingKey(data, "ovs-port", "bond-mode")
}
func removeSettingOvsPortBondUpdelay(data connectionData) {
	removeSettingKey(data, "ovs-port", "bond-updelay")
}
func removeSettingOvsPortLacp(data connectionData) {
	removeSettingKey(data, "ovs-port", "lacp")
}
func removeSettingOvsPortTag(data connectionData) {
	removeSettingKey(data, "ovs-port", "tag")
}
func removeSettingOvsPortVlanMode(data connectionData) {
	removeSettingKey(data, "ovs-port", "vlan-mode")
}
func removeSettingPppBaud(data connectionData) {
	removeSettingKey(data, "ppp", "baud")
}
func removeSettingPppCrtscts(data connectionData) {
	removeSettingKey(data, "ppp", "crtscts")
}
func removeSettingPppLcpEchoFailure(data connectionData) {
	removeSettingKey(data, "ppp", "lcp-echo-failure")
}
func removeSettingPppLcpEchoInterval(data connectionData) {
	removeSettingKey(data, "ppp", "lcp-echo-interval")
}
func removeSettingPppMppeStateful(data connectionData) {
	removeSettingKey(data, "ppp", "mppe-stateful")
}
func removeSettingPppMru(data connectionData) {
	removeSettingKey(data, "ppp", "mru")
}
func removeSettingPppMtu(data connectionData) {
	removeSettingKey(data, "ppp", "mtu")
}
func removeSettingPppNoVjComp(data connectionData) {
	removeSettingKey(data, "ppp", "no-vj-comp")
}
func removeSettingPppNoauth(data connectionData) {
	removeSettingKey(data, "ppp", "noauth")
}
func removeSettingPppNobsdcomp(data connectionData) {
	removeSettingKey(data, "ppp", "nobsdcomp")
}
func removeSettingPppNodeflate(data connectionData) {
	removeSettingKey(data, "ppp", "nodeflate")
}
func removeSettingPppRefuseChap(data connectionData) {
	removeSettingKey(data, "ppp", "refuse-chap")
}
func removeSettingPppRefuseEap(data connectionData) {
	removeSettingKey(data, "ppp", "refuse-eap")
}
func removeSettingPppRefuseMschap(data connectionData) {
	removeSettingKey(data, "ppp", "refuse-mschap")
}
func removeSettingPppRefuseMschapv2(data connectionData) {
	removeSettingKey(data, "ppp", "refuse-mschapv2")
}
func removeSettingPppRefusePap(data connectionData) {
	removeSettingKey(data, "ppp", "refuse-pap")
}
func removeSettingPppRequireMppe(data connectionData) {
	removeSettingKey(data, "ppp", "require-mppe")
}
func removeSettingPppRequireMppe128(data connectionData) {
	removeSettingKey(data, "ppp", "require-mppe-128")
}
func removeSettingPppoeParent(data connectionData) {
	removeSettingKey(data, "pppoe", "parent")
}
func removeSettingPppoePassword(data connectionData) {
	removeSettingKey(data, "pppoe", "password")
}
func removeSettingPppoePasswordFlags(data connectionData) {
	removeSettingKey(data, "pppoe", "password-flags")
}
func removeSettingPppoeService(data connectionData) {
	removeSettingKey(data, "pppoe", "service")
}
func removeSettingPppoeUsername(data connectionData) {
	removeSettingKey(data, "pppoe", "username")
}
func removeSettingProxyBrowserOnly(data connectionData) {
	removeSettingKey(data, "proxy", "browser-only")
}
func removeSettingProxyMethod(data connectionData) {
	removeSettingKey(data, "proxy", "method")
}
func removeSettingProxyPacScript(data connectionData) {
	removeSettingKey(data, "proxy", "pac-script")
}
func removeSettingProxyPacUrl(data connectionData) {
	removeSettingKey(data, "proxy", "pac-url")
}
func removeSettingSerialBaud(data connectionData) {
	removeSettingKey(data, "serial", "baud")
}
func removeSettingSerialBits(data connectionData) {
	removeSettingKey(data, "serial", "bits")
}
func removeSettingSerialParity(data connectionData) {
	removeSettingKey(data, "serial", "parity")
}
func removeSettingSerialSendDelay(data connectionData) {
	removeSettingKey(data, "serial", "send-delay")
}
func removeSettingSerialStopbits(data connectionData) {
	removeSettingKey(data, "serial", "stopbits")
}
func removeSettingTeamConfig(data connectionData) {
	removeSettingKey(data, "team", "config")
}
func removeSettingTeamMcastRejoinCount(data connectionData) {
	removeSettingKey(data, "team", "mcast-rejoin-count")
}
func removeSettingTeamMcastRejoinInterval(data connectionData) {
	removeSettingKey(data, "team", "mcast-rejoin-interval")
}
func removeSettingTeamNotifyPeersCount(data connectionData) {
	removeSettingKey(data, "team", "notify-peers-count")
}
func removeSettingTeamNotifyPeersInterval(data connectionData) {
	removeSettingKey(data, "team", "notify-peers-interval")
}
func removeSettingTeamRunner(data connectionData) {
	removeSettingKey(data, "team", "runner")
}
func removeSettingTeamRunnerActive(data connectionData) {
	removeSettingKey(data, "team", "runner-active")
}
func removeSettingTeamRunnerAggSelectPolicy(data connectionData) {
	removeSettingKey(data, "team", "runner-agg-select-policy")
}
func removeSettingTeamRunnerFastRate(data connectionData) {
	removeSettingKey(data, "team", "runner-fast-rate")
}
func removeSettingTeamRunnerHwaddrPolicy(data connectionData) {
	removeSettingKey(data, "team", "runner-hwaddr-policy")
}
func removeSettingTeamRunnerMinPorts(data connectionData) {
	removeSettingKey(data, "team", "runner-min-ports")
}
func removeSettingTeamRunnerSysPrio(data connectionData) {
	removeSettingKey(data, "team", "runner-sys-prio")
}
func removeSettingTeamRunnerTxBalancer(data connectionData) {
	removeSettingKey(data, "team", "runner-tx-balancer")
}
func removeSettingTeamRunnerTxBalancerInterval(data connectionData) {
	removeSettingKey(data, "team", "runner-tx-balancer-interval")
}
func removeSettingTeamRunnerTxHash(data connectionData) {
	removeSettingKey(data, "team", "runner-tx-hash")
}
func removeSettingTeamPortConfig(data connectionData) {
	removeSettingKey(data, "team-port", "config")
}
func removeSettingTeamPortLacpKey(data connectionData) {
	removeSettingKey(data, "team-port", "lacp-key")
}
func removeSettingTeamPortLacpPrio(data connectionData) {
	removeSettingKey(data, "team-port", "lacp-prio")
}
func removeSettingTeamPortPrio(data connectionData) {
	removeSettingKey(data, "team-port", "prio")
}
func removeSettingTeamPortQueueId(data connectionData) {
	removeSettingKey(data, "team-port", "queue-id")
}
func removeSettingTeamPortSticky(data connectionData) {
	removeSettingKey(data, "team-port", "sticky")
}
func removeSettingTunGroup(data connectionData) {
	removeSettingKey(data, "tun", "group")
}
func removeSettingTunMode(data connectionData) {
	removeSettingKey(data, "tun", "mode")
}
func removeSettingTunMultiQueue(data connectionData) {
	removeSettingKey(data, "tun", "multi-queue")
}
func removeSettingTunOwner(data connectionData) {
	removeSettingKey(data, "tun", "owner")
}
func removeSettingTunPi(data connectionData) {
	removeSettingKey(data, "tun", "pi")
}
func removeSettingTunVnetHdr(data connectionData) {
	removeSettingKey(data, "tun", "vnet-hdr")
}
func removeSettingUserData(data connectionData) {
	removeSettingKey(data, "user", "data")
}
func removeSettingVlanEgressPriorityMap(data connectionData) {
	removeSettingKey(data, "vlan", "egress-priority-map")
}
func removeSettingVlanFlags(data connectionData) {
	removeSettingKey(data, "vlan", "flags")
}
func removeSettingVlanId(data connectionData) {
	removeSettingKey(data, "vlan", "id")
}
func removeSettingVlanIngressPriorityMap(data connectionData) {
	removeSettingKey(data, "vlan", "ingress-priority-map")
}
func removeSettingVlanParent(data connectionData) {
	removeSettingKey(data, "vlan", "parent")
}
func removeSettingVpnData(data connectionData) {
	removeSettingKey(data, "vpn", "data")
}
func removeSettingVpnPersistent(data connectionData) {
	removeSettingKey(data, "vpn", "persistent")
}
func removeSettingVpnSecrets(data connectionData) {
	removeSettingKey(data, "vpn", "secrets")
}
func removeSettingVpnServiceType(data connectionData) {
	removeSettingKey(data, "vpn", "service-type")
}
func removeSettingVpnTimeout(data connectionData) {
	removeSettingKey(data, "vpn", "timeout")
}
func removeSettingVpnUserName(data connectionData) {
	removeSettingKey(data, "vpn", "user-name")
}
func removeSettingVxlanAgeing(data connectionData) {
	removeSettingKey(data, "vxlan", "ageing")
}
func removeSettingVxlanDestinationPort(data connectionData) {
	removeSettingKey(data, "vxlan", "destination-port")
}
func removeSettingVxlanId(data connectionData) {
	removeSettingKey(data, "vxlan", "id")
}
func removeSettingVxlanL2Miss(data connectionData) {
	removeSettingKey(data, "vxlan", "l2-miss")
}
func removeSettingVxlanL3Miss(data connectionData) {
	removeSettingKey(data, "vxlan", "l3-miss")
}
func removeSettingVxlanLearning(data connectionData) {
	removeSettingKey(data, "vxlan", "learning")
}
func removeSettingVxlanLimit(data connectionData) {
	removeSettingKey(data, "vxlan", "limit")
}
func removeSettingVxlanLocal(data connectionData) {
	removeSettingKey(data, "vxlan", "local")
}
func removeSettingVxlanParent(data connectionData) {
	removeSettingKey(data, "vxlan", "parent")
}
func removeSettingVxlanProxy(data connectionData) {
	removeSettingKey(data, "vxlan", "proxy")
}
func removeSettingVxlanRemote(data connectionData) {
	removeSettingKey(data, "vxlan", "remote")
}
func removeSettingVxlanRsc(data connectionData) {
	removeSettingKey(data, "vxlan", "rsc")
}
func removeSettingVxlanSourcePortMax(data connectionData) {
	removeSettingKey(data, "vxlan", "source-port-max")
}
func removeSettingVxlanSourcePortMin(data connectionData) {
	removeSettingKey(data, "vxlan", "source-port-min")
}
func removeSettingVxlanTos(data connectionData) {
	removeSettingKey(data, "vxlan", "tos")
}
func removeSettingVxlanTtl(data connectionData) {
	removeSettingKey(data, "vxlan", "ttl")
}
func removeSettingWimaxMacAddress(data connectionData) {
	removeSettingKey(data, "wimax", "mac-address")
}
func removeSettingWimaxNetworkName(data connectionData) {
	removeSettingKey(data, "wimax", "network-name")
}
func removeSettingWiredAutoNegotiate(data connectionData) {
	removeSettingKey(data, "802-3-ethernet", "auto-negotiate")
}
func removeSettingWiredClonedMacAddress(data connectionData) {
	removeSettingKey(data, "802-3-ethernet", "cloned-mac-address")
}
func removeSettingWiredDuplex(data connectionData) {
	removeSettingKey(data, "802-3-ethernet", "duplex")
}
func removeSettingWiredGenerateMacAddressMask(data connectionData) {
	removeSettingKey(data, "802-3-ethernet", "generate-mac-address-mask")
}
func removeSettingWiredMacAddress(data connectionData) {
	removeSettingKey(data, "802-3-ethernet", "mac-address")
}
func removeSettingWiredMacAddressBlacklist(data connectionData) {
	removeSettingKey(data, "802-3-ethernet", "mac-address-blacklist")
}
func removeSettingWiredMtu(data connectionData) {
	removeSettingKey(data, "802-3-ethernet", "mtu")
}
func removeSettingWiredPort(data connectionData) {
	removeSettingKey(data, "802-3-ethernet", "port")
}
func removeSettingWiredS390Nettype(data connectionData) {
	removeSettingKey(data, "802-3-ethernet", "s390-nettype")
}
func removeSettingWiredS390Options(data connectionData) {
	removeSettingKey(data, "802-3-ethernet", "s390-options")
}
func removeSettingWiredS390Subchannels(data connectionData) {
	removeSettingKey(data, "802-3-ethernet", "s390-subchannels")
}
func removeSettingWiredSpeed(data connectionData) {
	removeSettingKey(data, "802-3-ethernet", "speed")
}
func removeSettingWiredWakeOnLan(data connectionData) {
	removeSettingKey(data, "802-3-ethernet", "wake-on-lan")
}
func removeSettingWiredWakeOnLanPassword(data connectionData) {
	removeSettingKey(data, "802-3-ethernet", "wake-on-lan-password")
}
func removeSettingWirelessBand(data connectionData) {
	removeSettingKey(data, "802-11-wireless", "band")
}
func removeSettingWirelessBssid(data connectionData) {
	removeSettingKey(data, "802-11-wireless", "bssid")
}
func removeSettingWirelessChannel(data connectionData) {
	removeSettingKey(data, "802-11-wireless", "channel")
}
func removeSettingWirelessClonedMacAddress(data connectionData) {
	removeSettingKey(data, "802-11-wireless", "cloned-mac-address")
}
func removeSettingWirelessGenerateMacAddressMask(data connectionData) {
	removeSettingKey(data, "802-11-wireless", "generate-mac-address-mask")
}
func removeSettingWirelessHidden(data connectionData) {
	removeSettingKey(data, "802-11-wireless", "hidden")
}
func removeSettingWirelessMacAddress(data connectionData) {
	removeSettingKey(data, "802-11-wireless", "mac-address")
}
func removeSettingWirelessMacAddressBlacklist(data connectionData) {
	removeSettingKey(data, "802-11-wireless", "mac-address-blacklist")
}
func removeSettingWirelessMacAddressRandomization(data connectionData) {
	removeSettingKey(data, "802-11-wireless", "mac-address-randomization")
}
func removeSettingWirelessMode(data connectionData) {
	removeSettingKey(data, "802-11-wireless", "mode")
}
func removeSettingWirelessMtu(data connectionData) {
	removeSettingKey(data, "802-11-wireless", "mtu")
}
func removeSettingWirelessPowersave(data connectionData) {
	removeSettingKey(data, "802-11-wireless", "powersave")
}
func removeSettingWirelessRate(data connectionData) {
	removeSettingKey(data, "802-11-wireless", "rate")
}
func removeSettingWirelessSeenBssids(data connectionData) {
	removeSettingKey(data, "802-11-wireless", "seen-bssids")
}
func removeSettingWirelessSsid(data connectionData) {
	removeSettingKey(data, "802-11-wireless", "ssid")
}
func removeSettingWirelessTxPower(data connectionData) {
	removeSettingKey(data, "802-11-wireless", "tx-power")
}
func removeSettingWirelessSecurityAuthAlg(data connectionData) {
	removeSettingKey(data, "802-11-wireless-security", "auth-alg")
}
func removeSettingWirelessSecurityGroup(data connectionData) {
	removeSettingKey(data, "802-11-wireless-security", "group")
}
func removeSettingWirelessSecurityKeyMgmt(data connectionData) {
	removeSettingKey(data, "802-11-wireless-security", "key-mgmt")
}
func removeSettingWirelessSecurityLeapPassword(data connectionData) {
	removeSettingKey(data, "802-11-wireless-security", "leap-password")
}
func removeSettingWirelessSecurityLeapPasswordFlags(data connectionData) {
	removeSettingKey(data, "802-11-wireless-security", "leap-password-flags")
}
func removeSettingWirelessSecurityLeapUsername(data connectionData) {
	removeSettingKey(data, "802-11-wireless-security", "leap-username")
}
func removeSettingWirelessSecurityPairwise(data connectionData) {
	removeSettingKey(data, "802-11-wireless-security", "pairwise")
}
func removeSettingWirelessSecurityPmf(data connectionData) {
	removeSettingKey(data, "802-11-wireless-security", "pmf")
}
func removeSettingWirelessSecurityProto(data connectionData) {
	removeSettingKey(data, "802-11-wireless-security", "proto")
}
func removeSettingWirelessSecurityPsk(data connectionData) {
	removeSettingKey(data, "802-11-wireless-security", "psk")
}
func removeSettingWirelessSecurityPskFlags(data connectionData) {
	removeSettingKey(data, "802-11-wireless-security", "psk-flags")
}
func removeSettingWirelessSecurityWepKeyFlags(data connectionData) {
	removeSettingKey(data, "802-11-wireless-security", "wep-key-flags")
}
func removeSettingWirelessSecurityWepKeyType(data connectionData) {
	removeSettingKey(data, "802-11-wireless-security", "wep-key-type")
}
func removeSettingWirelessSecurityWepKey0(data connectionData) {
	removeSettingKey(data, "802-11-wireless-security", "wep-key0")
}
func removeSettingWirelessSecurityWepKey1(data connectionData) {
	removeSettingKey(data, "802-11-wireless-security", "wep-key1")
}
func removeSettingWirelessSecurityWepKey2(data connectionData) {
	removeSettingKey(data, "802-11-wireless-security", "wep-key2")
}
func removeSettingWirelessSecurityWepKey3(data connectionData) {
	removeSettingKey(data, "802-11-wireless-security", "wep-key3")
}
func removeSettingWirelessSecurityWepTxKeyidx(data connectionData) {
	removeSettingKey(data, "802-11-wireless-security", "wep-tx-keyidx")
}
func removeSettingWirelessSecurityWpsMethod(data connectionData) {
	removeSettingKey(data, "802-11-wireless-security", "wps-method")
}
func removeSettingVpnL2tpKeyGateway(data connectionData) {
	removeSettingKey(data, "alias-vpn-l2tp", "gateway")
}
func removeSettingVpnL2tpKeyUser(data connectionData) {
	removeSettingKey(data, "alias-vpn-l2tp", "user")
}
func removeSettingVpnL2tpKeyPasswordFlags(data connectionData) {
	removeSettingKey(data, "alias-vpn-l2tp", "password-flags")
}
func removeSettingVpnL2tpKeyPassword(data connectionData) {
	removeSettingKey(data, "alias-vpn-l2tp", "password")
}
func removeSettingVpnL2tpKeyDomain(data connectionData) {
	removeSettingKey(data, "alias-vpn-l2tp", "domain")
}
func removeSettingVpnL2tpKeyRequireMppe(data connectionData) {
	removeSettingKey(data, "alias-vpn-l2tp-ppp", "require-mppe")
}
func removeSettingVpnL2tpKeyRequireMppe40(data connectionData) {
	removeSettingKey(data, "alias-vpn-l2tp-ppp", "require-mppe-40")
}
func removeSettingVpnL2tpKeyRequireMppe128(data connectionData) {
	removeSettingKey(data, "alias-vpn-l2tp-ppp", "require-mppe-128")
}
func removeSettingVpnL2tpKeyMppeStateful(data connectionData) {
	removeSettingKey(data, "alias-vpn-l2tp-ppp", "mppe-stateful")
}
func removeSettingVpnL2tpKeyRefuseEap(data connectionData) {
	removeSettingKey(data, "alias-vpn-l2tp-ppp", "refuse-eap")
}
func removeSettingVpnL2tpKeyRefusePap(data connectionData) {
	removeSettingKey(data, "alias-vpn-l2tp-ppp", "refuse-pap")
}
func removeSettingVpnL2tpKeyRefuseChap(data connectionData) {
	removeSettingKey(data, "alias-vpn-l2tp-ppp", "refuse-chap")
}
func removeSettingVpnL2tpKeyRefuseMschap(data connectionData) {
	removeSettingKey(data, "alias-vpn-l2tp-ppp", "refuse-mschap")
}
func removeSettingVpnL2tpKeyRefuseMschapv2(data connectionData) {
	removeSettingKey(data, "alias-vpn-l2tp-ppp", "refuse-mschapv2")
}
func removeSettingVpnL2tpKeyNobsdcomp(data connectionData) {
	removeSettingKey(data, "alias-vpn-l2tp-ppp", "nobsdcomp")
}
func removeSettingVpnL2tpKeyNodeflate(data connectionData) {
	removeSettingKey(data, "alias-vpn-l2tp-ppp", "nodeflate")
}
func removeSettingVpnL2tpKeyNoVjComp(data connectionData) {
	removeSettingKey(data, "alias-vpn-l2tp-ppp", "no-vj-comp")
}
func removeSettingVpnL2tpKeyNoPcomp(data connectionData) {
	removeSettingKey(data, "alias-vpn-l2tp-ppp", "nopcomp")
}
func removeSettingVpnL2tpKeyNoAccomp(data connectionData) {
	removeSettingKey(data, "alias-vpn-l2tp-ppp", "noaccomp")
}
func removeSettingVpnL2tpKeyLcpEchoFailure(data connectionData) {
	removeSettingKey(data, "alias-vpn-l2tp-ppp", "lcp-echo-failure")
}
func removeSettingVpnL2tpKeyLcpEchoInterval(data connectionData) {
	removeSettingKey(data, "alias-vpn-l2tp-ppp", "lcp-echo-interval")
}
func removeSettingVpnL2tpKeyIpsecEnable(data connectionData) {
	removeSettingKey(data, "alias-vpn-l2tp-ipsec", "ipsec-enabled")
}
func removeSettingVpnL2tpKeyIpsecGroupName(data connectionData) {
	removeSettingKey(data, "alias-vpn-l2tp-ipsec", "ipsec-group-name")
}
func removeSettingVpnL2tpKeyIpsecGatewayId(data connectionData) {
	removeSettingKey(data, "alias-vpn-l2tp-ipsec", "ipsec-gateway-id")
}
func removeSettingVpnL2tpKeyIpsecPsk(data connectionData) {
	removeSettingKey(data, "alias-vpn-l2tp-ipsec", "ipsec-psk")
}
func removeSettingVpnL2tpKeyIpsecIke(data connectionData) {
	removeSettingKey(data, "alias-vpn-l2tp-ipsec", "ipsec-ike")
}
func removeSettingVpnL2tpKeyIpsecEsp(data connectionData) {
	removeSettingKey(data, "alias-vpn-l2tp-ipsec", "ipsec-esp")
}
func removeSettingVpnOpenconnectKeyGateway(data connectionData) {
	removeSettingKey(data, "alias-vpn-openconnect", "gateway")
}
func removeSettingVpnOpenconnectKeyCacert(data connectionData) {
	removeSettingKey(data, "alias-vpn-openconnect", "cacert")
}
func removeSettingVpnOpenconnectKeyProxy(data connectionData) {
	removeSettingKey(data, "alias-vpn-openconnect", "proxy")
}
func removeSettingVpnOpenconnectKeyCsdEnable(data connectionData) {
	removeSettingKey(data, "alias-vpn-openconnect", "enable_csd_trojan")
}
func removeSettingVpnOpenconnectKeyCsdWrapper(data connectionData) {
	removeSettingKey(data, "alias-vpn-openconnect", "csd_wrapper")
}
func removeSettingVpnOpenconnectKeyUsercert(data connectionData) {
	removeSettingKey(data, "alias-vpn-openconnect", "usercert")
}
func removeSettingVpnOpenconnectKeyPrivkey(data connectionData) {
	removeSettingKey(data, "alias-vpn-openconnect", "userkey")
}
func removeSettingVpnOpenconnectKeyPemPassphraseFsid(data connectionData) {
	removeSettingKey(data, "alias-vpn-openconnect", "pem_passphrase_fsid")
}
func removeSettingVpnOpenconnectKeyCookie(data connectionData) {
	removeSettingKey(data, "alias-vpn-openconnect", "cookie")
}
func removeSettingVpnOpenconnectKeyGwcert(data connectionData) {
	removeSettingKey(data, "alias-vpn-openconnect", "gwcert")
}
func removeSettingVpnOpenconnectKeyAuthtype(data connectionData) {
	removeSettingKey(data, "alias-vpn-openconnect", "authtype")
}
func removeSettingVpnOpenconnectKeyMtu(data connectionData) {
	removeSettingKey(data, "alias-vpn-openconnect", "mtu")
}
func removeSettingVpnOpenconnectKeyStokenSource(data connectionData) {
	removeSettingKey(data, "alias-vpn-openconnect", "stoken_source")
}
func removeSettingVpnOpenconnectKeyStokenString(data connectionData) {
	removeSettingKey(data, "alias-vpn-openconnect", "stoken_string")
}
func removeSettingVpnOpenvpnKeyRemote(data connectionData) {
	removeSettingKey(data, "alias-vpn-openvpn", "remote")
}
func removeSettingVpnOpenvpnKeyConnectionType(data connectionData) {
	removeSettingKey(data, "alias-vpn-openvpn", "connection-type")
}
func removeSettingVpnOpenvpnKeyUsername(data connectionData) {
	removeSettingKey(data, "alias-vpn-openvpn", "username")
}
func removeSettingVpnOpenvpnKeyPasswordFlags(data connectionData) {
	removeSettingKey(data, "alias-vpn-openvpn", "password-flags")
}
func removeSettingVpnOpenvpnKeyPassword(data connectionData) {
	removeSettingKey(data, "alias-vpn-openvpn", "password")
}
func removeSettingVpnOpenvpnKeyCa(data connectionData) {
	removeSettingKey(data, "alias-vpn-openvpn", "ca")
}
func removeSettingVpnOpenvpnKeyCert(data connectionData) {
	removeSettingKey(data, "alias-vpn-openvpn", "cert")
}
func removeSettingVpnOpenvpnKeyKey(data connectionData) {
	removeSettingKey(data, "alias-vpn-openvpn", "key")
}
func removeSettingVpnOpenvpnKeyCertpassFlags(data connectionData) {
	removeSettingKey(data, "alias-vpn-openvpn", "cert-pass-flags")
}
func removeSettingVpnOpenvpnKeyCertpass(data connectionData) {
	removeSettingKey(data, "alias-vpn-openvpn", "cert-pass")
}
func removeSettingVpnOpenvpnKeyStaticKey(data connectionData) {
	removeSettingKey(data, "alias-vpn-openvpn", "static-key")
}
func removeSettingVpnOpenvpnKeyStaticKeyDirection(data connectionData) {
	removeSettingKey(data, "alias-vpn-openvpn", "static-key-direction")
}
func removeSettingVpnOpenvpnKeyRemoteIp(data connectionData) {
	removeSettingKey(data, "alias-vpn-openvpn", "remote-ip")
}
func removeSettingVpnOpenvpnKeyLocalIp(data connectionData) {
	removeSettingKey(data, "alias-vpn-openvpn", "local-ip")
}
func removeSettingVpnOpenvpnKeyPort(data connectionData) {
	removeSettingKey(data, "alias-vpn-openvpn-advanced", "port")
}
func removeSettingVpnOpenvpnKeyRenegSeconds(data connectionData) {
	removeSettingKey(data, "alias-vpn-openvpn-advanced", "reneg-seconds")
}
func removeSettingVpnOpenvpnKeyCompLzo(data connectionData) {
	removeSettingKey(data, "alias-vpn-openvpn-advanced", "comp-lzo")
}
func removeSettingVpnOpenvpnKeyProtoTcp(data connectionData) {
	removeSettingKey(data, "alias-vpn-openvpn-advanced", "proto-tcp")
}
func removeSettingVpnOpenvpnKeyTapDev(data connectionData) {
	removeSettingKey(data, "alias-vpn-openvpn-advanced", "tap-dev")
}
func removeSettingVpnOpenvpnKeyTunnelMtu(data connectionData) {
	removeSettingKey(data, "alias-vpn-openvpn-advanced", "tunnel-mtu")
}
func removeSettingVpnOpenvpnKeyFragmentSize(data connectionData) {
	removeSettingKey(data, "alias-vpn-openvpn-advanced", "fragment-size")
}
func removeSettingVpnOpenvpnKeyMssfix(data connectionData) {
	removeSettingKey(data, "alias-vpn-openvpn-advanced", "mssfix")
}
func removeSettingVpnOpenvpnKeyRemoteRandom(data connectionData) {
	removeSettingKey(data, "alias-vpn-openvpn-advanced", "remote-random")
}
func removeSettingVpnOpenvpnKeyCipher(data connectionData) {
	removeSettingKey(data, "alias-vpn-openvpn-security", "cipher")
}
func removeSettingVpnOpenvpnKeyAuth(data connectionData) {
	removeSettingKey(data, "alias-vpn-openvpn-security", "auth")
}
func removeSettingVpnOpenvpnKeyTlsRemote(data connectionData) {
	removeSettingKey(data, "alias-vpn-openvpn-tlsauth", "tls-remote")
}
func removeSettingVpnOpenvpnKeyRemoteCertTls(data connectionData) {
	removeSettingKey(data, "alias-vpn-openvpn-tlsauth", "remote-cert-tls")
}
func removeSettingVpnOpenvpnKeyTa(data connectionData) {
	removeSettingKey(data, "alias-vpn-openvpn-tlsauth", "ta")
}
func removeSettingVpnOpenvpnKeyTaDir(data connectionData) {
	removeSettingKey(data, "alias-vpn-openvpn-tlsauth", "ta-dir")
}
func removeSettingVpnOpenvpnKeyProxyType(data connectionData) {
	removeSettingKey(data, "alias-vpn-openvpn-proxies", "proxy-type")
}
func removeSettingVpnOpenvpnKeyProxyServer(data connectionData) {
	removeSettingKey(data, "alias-vpn-openvpn-proxies", "proxy-server")
}
func removeSettingVpnOpenvpnKeyProxyPort(data connectionData) {
	removeSettingKey(data, "alias-vpn-openvpn-proxies", "proxy-port")
}
func removeSettingVpnOpenvpnKeyProxyRetry(data connectionData) {
	removeSettingKey(data, "alias-vpn-openvpn-proxies", "proxy-retry")
}
func removeSettingVpnOpenvpnKeyHttpProxyUsername(data connectionData) {
	removeSettingKey(data, "alias-vpn-openvpn-proxies", "http-proxy-username")
}
func removeSettingVpnOpenvpnKeyHttpProxyPassword(data connectionData) {
	removeSettingKey(data, "alias-vpn-openvpn-proxies", "http-proxy-password")
}
func removeSettingVpnOpenvpnKeyHttpProxyPasswordFlags(data connectionData) {
	removeSettingKey(data, "alias-vpn-openvpn-proxies", "http-proxy-password-flags")
}
func removeSettingVpnPptpKeyGateway(data connectionData) {
	removeSettingKey(data, "alias-vpn-pptp", "gateway")
}
func removeSettingVpnPptpKeyUser(data connectionData) {
	removeSettingKey(data, "alias-vpn-pptp", "user")
}
func removeSettingVpnPptpKeyPasswordFlags(data connectionData) {
	removeSettingKey(data, "alias-vpn-pptp", "password-flags")
}
func removeSettingVpnPptpKeyPassword(data connectionData) {
	removeSettingKey(data, "alias-vpn-pptp", "password")
}
func removeSettingVpnPptpKeyDomain(data connectionData) {
	removeSettingKey(data, "alias-vpn-pptp", "domain")
}
func removeSettingVpnPptpKeyRequireMppe(data connectionData) {
	removeSettingKey(data, "alias-vpn-pptp-ppp", "require-mppe")
}
func removeSettingVpnPptpKeyRequireMppe40(data connectionData) {
	removeSettingKey(data, "alias-vpn-pptp-ppp", "require-mppe-40")
}
func removeSettingVpnPptpKeyRequireMppe128(data connectionData) {
	removeSettingKey(data, "alias-vpn-pptp-ppp", "require-mppe-128")
}
func removeSettingVpnPptpKeyMppeStateful(data connectionData) {
	removeSettingKey(data, "alias-vpn-pptp-ppp", "mppe-stateful")
}
func removeSettingVpnPptpKeyRefuseEap(data connectionData) {
	removeSettingKey(data, "alias-vpn-pptp-ppp", "refuse-eap")
}
func removeSettingVpnPptpKeyRefusePap(data connectionData) {
	removeSettingKey(data, "alias-vpn-pptp-ppp", "refuse-pap")
}
func removeSettingVpnPptpKeyRefuseChap(data connectionData) {
	removeSettingKey(data, "alias-vpn-pptp-ppp", "refuse-chap")
}
func removeSettingVpnPptpKeyRefuseMschap(data connectionData) {
	removeSettingKey(data, "alias-vpn-pptp-ppp", "refuse-mschap")
}
func removeSettingVpnPptpKeyRefuseMschapv2(data connectionData) {
	removeSettingKey(data, "alias-vpn-pptp-ppp", "refuse-mschapv2")
}
func removeSettingVpnPptpKeyNobsdcomp(data connectionData) {
	removeSettingKey(data, "alias-vpn-pptp-ppp", "nobsdcomp")
}
func removeSettingVpnPptpKeyNodeflate(data connectionData) {
	removeSettingKey(data, "alias-vpn-pptp-ppp", "nodeflate")
}
func removeSettingVpnPptpKeyNoVjComp(data connectionData) {
	removeSettingKey(data, "alias-vpn-pptp-ppp", "no-vj-comp")
}
func removeSettingVpnPptpKeyLcpEchoFailure(data connectionData) {
	removeSettingKey(data, "alias-vpn-pptp-ppp", "lcp-echo-failure")
}
func removeSettingVpnPptpKeyLcpEchoInterval(data connectionData) {
	removeSettingKey(data, "alias-vpn-pptp-ppp", "lcp-echo-interval")
}
func removeSettingVpnStrongswanKeyAddress(data connectionData) {
	removeSettingKey(data, "alias-vpn-strongswan", "address")
}
func removeSettingVpnStrongswanKeyCertificate(data connectionData) {
	removeSettingKey(data, "alias-vpn-strongswan", "certificate")
}
func removeSettingVpnStrongswanKeyMethod(data connectionData) {
	removeSettingKey(data, "alias-vpn-strongswan", "method")
}
func removeSettingVpnStrongswanKeyUser(data connectionData) {
	removeSettingKey(data, "alias-vpn-strongswan", "user")
}
func removeSettingVpnStrongswanKeyUsercert(data connectionData) {
	removeSettingKey(data, "alias-vpn-strongswan", "usercert")
}
func removeSettingVpnStrongswanKeyUserkey(data connectionData) {
	removeSettingKey(data, "alias-vpn-strongswan", "userkey")
}
func removeSettingVpnStrongswanKeyPassword(data connectionData) {
	removeSettingKey(data, "alias-vpn-strongswan", "password")
}
func removeSettingVpnStrongswanKeyPasswordFlags(data connectionData) {
	removeSettingKey(data, "alias-vpn-strongswan", "password-flags")
}
func removeSettingVpnStrongswanKeyVirtual(data connectionData) {
	removeSettingKey(data, "alias-vpn-strongswan", "virtual")
}
func removeSettingVpnStrongswanKeyEncap(data connectionData) {
	removeSettingKey(data, "alias-vpn-strongswan", "encap")
}
func removeSettingVpnStrongswanKeyIpcomp(data connectionData) {
	removeSettingKey(data, "alias-vpn-strongswan", "ipcomp")
}
func removeSettingVpnVpncKeyGateway(data connectionData) {
	removeSettingKey(data, "alias-vpn-vpnc", "IPSec gateway")
}
func removeSettingVpnVpncKeyXauthUser(data connectionData) {
	removeSettingKey(data, "alias-vpn-vpnc", "Xauth username")
}
func removeSettingVpnVpncKeyXauthPasswordType(data connectionData) {
	removeSettingKey(data, "alias-vpn-vpnc", "xauth-password-type")
}
func removeSettingVpnVpncKeyXauthPasswordFlags(data connectionData) {
	removeSettingKey(data, "alias-vpn-vpnc", "Xauth password-flags")
}
func removeSettingVpnVpncKeyXauthPassword(data connectionData) {
	removeSettingKey(data, "alias-vpn-vpnc", "Xauth password")
}
func removeSettingVpnVpncKeyId(data connectionData) {
	removeSettingKey(data, "alias-vpn-vpnc", "IPSec ID")
}
func removeSettingVpnVpncKeySecretType(data connectionData) {
	removeSettingKey(data, "alias-vpn-vpnc", "ipsec-secret-type")
}
func removeSettingVpnVpncKeySecretFlags(data connectionData) {
	removeSettingKey(data, "alias-vpn-vpnc", "IPSec secret-flags")
}
func removeSettingVpnVpncKeySecret(data connectionData) {
	removeSettingKey(data, "alias-vpn-vpnc", "IPSec secret")
}
func removeSettingVpnVpncKeyAuthmode(data connectionData) {
	removeSettingKey(data, "alias-vpn-vpnc", "IKE Authmode")
}
func removeSettingVpnVpncKeyCaFile(data connectionData) {
	removeSettingKey(data, "alias-vpn-vpnc", "CA-File")
}
func removeSettingVpnVpncKeyDomain(data connectionData) {
	removeSettingKey(data, "alias-vpn-vpnc-advanced", "Domain")
}
func removeSettingVpnVpncKeyVendor(data connectionData) {
	removeSettingKey(data, "alias-vpn-vpnc-advanced", "Vendor")
}
func removeSettingVpnVpncKeyAppVersion(data connectionData) {
	removeSettingKey(data, "alias-vpn-vpnc-advanced", "Application Version")
}
func removeSettingVpnVpncKeySingleDes(data connectionData) {
	removeSettingKey(data, "alias-vpn-vpnc-advanced", "Enable Single DES")
}
func removeSettingVpnVpncKeyNoEncryption(data connectionData) {
	removeSettingKey(data, "alias-vpn-vpnc-advanced", "Enable no encryption")
}
func removeSettingVpnVpncKeyNatTraversalMode(data connectionData) {
	removeSettingKey(data, "alias-vpn-vpnc-advanced", "NAT Traversal Mode")
}
func removeSettingVpnVpncKeyDhgroup(data connectionData) {
	removeSettingKey(data, "alias-vpn-vpnc-advanced", "IKE DH Group")
}
func removeSettingVpnVpncKeyPerfectForward(data connectionData) {
	removeSettingKey(data, "alias-vpn-vpnc-advanced", "Perfect Forward Secrecy")
}
func removeSettingVpnVpncKeyLocalPort(data connectionData) {
	removeSettingKey(data, "alias-vpn-vpnc-advanced", "Local Port")
}
func removeSettingVpnVpncKeyDpdIdleTimeout(data connectionData) {
	removeSettingKey(data, "alias-vpn-vpnc-advanced", "DPD idle timeout (our side)")
}
func removeSettingVpnVpncKeyCiscoUdpEncapsPort(data connectionData) {
	removeSettingKey(data, "alias-vpn-vpnc-advanced", "Cisco UDP Encapsulation Port")
}
