diff --git a/bin/backlight_helper/ddcci/ddcci.go b/bin/backlight_helper/ddcci/ddcci.go
deleted file mode 100644
index b96fe16e..00000000
--- a/bin/backlight_helper/ddcci/ddcci.go
+++ /dev/null
@@ -1,281 +0,0 @@
-package ddcci
-
-// #cgo pkg-config: ddcutil
-// #include <ddcutil_c_api.h>
-import "C"
-import (
-	"bytes"
-	"encoding/base64"
-	"fmt"
-	"reflect"
-	"sync"
-	"unsafe"
-
-	"github.com/linuxdeepin/go-lib/utils"
-)
-
-type ddcci struct {
-	listPointer *C.DDCA_Display_Info_List
-	listMu      sync.Mutex
-
-	displayHandleMap map[string]*displayHandle //index -> handle
-	//displayMap       map[string]int         //edidBase64 --> ddcutil monitor index
-}
-
-type displayHandle struct {
-	ddcci  *ddcci
-	idx    int
-	edid   [128]byte
-	info   *C.DDCA_Display_Info
-	handle C.DDCA_Display_Handle
-	val    int
-	state  int
-}
-
-func (d *ddcci) newDisplayHandle(idx int) *displayHandle {
-	dh := &displayHandle{
-		idx: idx,
-	}
-	dh.info = d.getDisplayInfoByIdx(idx)
-	return dh
-}
-
-func (d *displayHandle) Open() error {
-	if d.state > 0 {
-		return nil
-	}
-	status := C.ddca_open_display2(d.info.dref, C.bool(true), &d.handle)
-	if status != C.int(0) {
-		logger.Info("doing ddca_open_display2 error")
-		return fmt.Errorf("brightness,init: failed to open monitor=%d", status)
-	}
-	d.state = 1
-	return nil
-}
-
-func (d *displayHandle) Close() error {
-	if d.state == 0 {
-		return nil
-	}
-	C.ddca_close_display(d.handle)
-	d.state = 0
-	return nil
-}
-
-func (d *displayHandle) getState() int {
-	return d.state
-}
-
-func (d *displayHandle) initEdid() {
-	edid := C.GoBytes(unsafe.Pointer(&d.info.edid_bytes), 128)
-	copy(d.edid[:], edid)
-}
-
-func (d *displayHandle) getEdidBase64() string {
-	return base64.StdEncoding.EncodeToString(d.edid[:])
-}
-
-func (d *displayHandle) setBrightness(percent int) error {
-	status := C.ddca_set_non_table_vcp_value(d.handle, brightnessVCP, 0, C.uchar(percent))
-	if status != C.int(0) {
-		return fmt.Errorf("brightness: failed to set brightness via DDC/CI: %d", status)
-	}
-	return nil
-}
-
-const (
-	brightnessVCP = 0x10
-)
-
-func newDDCCI() (*ddcci, error) {
-	ddc := &ddcci{
-		displayHandleMap: make(map[string]*displayHandle),
-	}
-
-	status := C.ddca_set_max_tries(C.DDCA_MULTI_PART_TRIES, 5)
-	if status < C.int(0) {
-		return nil, fmt.Errorf("brightness: Error setting retries: %d", status)
-	}
-
-	err := ddc.RefreshDisplays()
-	if err != nil {
-		return nil, err
-	}
-
-	return ddc, nil
-}
-
-func (d *ddcci) freeList() {
-	//logger.Debug("brightness: freeList, clear all display cache d.lisPointer", d.listPointer)
-	for _, handle := range d.displayHandleMap {
-		handle.Close()
-	}
-
-	d.displayHandleMap = make(map[string]*displayHandle)
-
-	if d.listPointer != nil {
-		C.ddca_free_display_info_list(d.listPointer)
-		C.ddca_free_all_displays()
-		d.listPointer = nil
-	}
-}
-
-func (d *ddcci) RefreshDisplays() error {
-	d.listMu.Lock()
-	defer d.listMu.Unlock()
-
-	d.freeList()
-
-	status := C.ddca_get_display_info_list2(C.bool(true), &d.listPointer)
-	if status != C.int(0) {
-		return fmt.Errorf("brightness: failed to get display info list: %d", status)
-	}
-	logger.Debug("brightness: display-number=", int(d.listPointer.ct))
-	for i := 0; i < int(d.listPointer.ct); i++ {
-		err := d.initDisplay(i)
-		if err != nil {
-			logger.Warning(err)
-		}
-	}
-
-	return nil
-}
-
-func (d *ddcci) initDisplay(idx int) error {
-	logger.Debug("brightness: initDisplay enter, index=", idx)
-	dh := d.newDisplayHandle(idx)
-	dh.Open()
-	dh.initEdid()
-	d.displayHandleMap[dh.getEdidBase64()] = dh
-	return nil
-}
-
-func (d *ddcci) SupportBrightness(edidBase64 string) bool {
-	d.listMu.Lock()
-	defer d.listMu.Unlock()
-
-	index, find := d.findMonitorIndex(edidBase64)
-	logger.Debug("brightness: SupportBrightness", index, find, edidBase64)
-	return find
-}
-
-func (d *ddcci) GetBrightness(edidBase64 string) (brightness int, err error) {
-	d.listMu.Lock()
-	defer d.listMu.Unlock()
-
-	handle, ok := d.displayHandleMap[edidBase64]
-	if !ok || handle == nil {
-		err = fmt.Errorf("brightness: failed to find monitor handle")
-		return
-	}
-
-	var val C.DDCA_Non_Table_Vcp_Value
-	status := C.ddca_get_non_table_vcp_value(handle.handle, brightnessVCP, &val)
-	if status != C.int(0) {
-		err = fmt.Errorf("brightness: failed to get brightness: %d", status)
-		return
-	}
-
-	brightness = int(val.sl)
-	return
-}
-
-func (d *ddcci) SetBrightness(edidBase64 string, percent int) error {
-	d.listMu.Lock()
-	defer d.listMu.Unlock()
-
-	// 开启结果验证，防止返回设置成功，但实际上没有生效的情况
-	// 此方法仅对当前线程生效
-	C.ddca_enable_verify(false)
-	dh, ok := d.displayHandleMap[edidBase64]
-	if !ok || dh == nil {
-		//ignore any bytes
-		idx, find := d.findMonitorIndex(edidBase64)
-		if find {
-			dh = d.getDisplayHandleByIdx(idx)
-			logger.Info("get display handle by index---------", idx)
-		} else {
-			return fmt.Errorf("brightness: failed to find monitor")
-		}
-	}
-
-	if dh.getState() == 0 {
-		dh.Open()
-	}
-	return dh.setBrightness(percent)
-}
-
-func (d *ddcci) getDisplayHandleByIdx(idx int) *displayHandle {
-	for _, handle := range d.displayHandleMap {
-		if handle.idx == idx {
-			logger.Debugf("getDisplayHandleByIdx:=== %d\n", idx)
-			return handle
-		}
-	}
-	return nil
-}
-
-func zeroEdidMonitorName(byBuf []byte) bool {
-	if len(byBuf) < 128 {
-		logger.Infof("zeroEdidMonitorName: len error, %d\n", len(byBuf))
-		return false
-	}
-	hasModify := false
-	//解释几个数字: edid长度128,头部长54，扩展部分18字节一段，54 + 18 * 4 = 126
-	for i := 0; i < 4; i++ {
-		offset := 0x36 + i*18
-		//fmt.Printf("zeroEdidMonitorName: idx=%d, %x\n", i, byBuf[offset: offset + 5])
-		if reflect.DeepEqual(byBuf[offset:offset+3], []byte{0, 0, 0}) {
-			if byBuf[offset+3] == 0xfc {
-				//logger.Debugf("brightness: zeroEdidMonitorName, block index=%d\n", i)
-				hasModify = true
-				zeroStart := offset + 5
-				zeroLen := 13
-				for j := 0; j < zeroLen; j++ {
-					byBuf[zeroStart+j] = 0
-				}
-			}
-		}
-	}
-	return hasModify
-}
-
-func (d *ddcci) findMonitorIndex(edidBase64 string) (int, bool) {
-	logger.Debug("edidBase64:", edidBase64)
-	dh, find := d.displayHandleMap[edidBase64]
-	if find {
-		logger.Info("find df for edidBase64:", edidBase64)
-		return dh.idx, find
-	}
-
-	idx := 0
-	bufInput, _ := base64.StdEncoding.DecodeString(edidBase64)
-	zeroEdidMonitorName(bufInput)
-	for edidIter, idxIter := range d.displayHandleMap {
-		//logger.Debugf("edid:", edidIter)
-		bufIter, _ := base64.StdEncoding.DecodeString(edidIter)
-		zeroEdidMonitorName(bufIter)
-		if bytes.Equal(bufInput, bufIter) {
-			idx = idxIter.idx
-			find = true
-			//logger.Debugf("brightness: DeepEqual\n")
-		}
-	}
-	return idx, find
-}
-
-func (d *ddcci) getDisplayInfoByIdx(idx int) *C.DDCA_Display_Info {
-	start := unsafe.Pointer(uintptr(unsafe.Pointer(d.listPointer)) + uintptr(C.sizeof_DDCA_Display_Info_List))
-	size := uintptr(C.sizeof_DDCA_Display_Info)
-
-	return (*C.DDCA_Display_Info)(unsafe.Pointer(uintptr(start) + size*uintptr(idx)))
-}
-
-func getEDIDChecksum(edid []byte) string {
-	if len(edid) < 128 {
-		return ""
-	}
-
-	id, _ := utils.SumStrMd5(string(edid[:128]))
-	return id
-}
diff --git a/bin/backlight_helper/ddcci/exported_methods_auto.go b/bin/backlight_helper/ddcci/exported_methods_auto.go
deleted file mode 100644
index f5252191..00000000
--- a/bin/backlight_helper/ddcci/exported_methods_auto.go
+++ /dev/null
@@ -1,33 +0,0 @@
-// Code generated by "dbusutil-gen em -type Manager"; DO NOT EDIT.
-
-package ddcci
-
-import (
-	"github.com/linuxdeepin/go-lib/dbusutil"
-)
-
-func (v *Manager) GetExportedMethods() dbusutil.ExportedMethods {
-	return dbusutil.ExportedMethods{
-		{
-			Name:    "CheckSupport",
-			Fn:      v.CheckSupport,
-			InArgs:  []string{"edidBase64"},
-			OutArgs: []string{"outArg0"},
-		},
-		{
-			Name:    "GetBrightness",
-			Fn:      v.GetBrightness,
-			InArgs:  []string{"edidBase64"},
-			OutArgs: []string{"outArg0"},
-		},
-		{
-			Name: "RefreshDisplays",
-			Fn:   v.RefreshDisplays,
-		},
-		{
-			Name:   "SetBrightness",
-			Fn:     v.SetBrightness,
-			InArgs: []string{"edidBase64", "value"},
-		},
-	}
-}
diff --git a/bin/backlight_helper/ddcci/manager.go b/bin/backlight_helper/ddcci/manager.go
deleted file mode 100644
index 4fdafcdd..00000000
--- a/bin/backlight_helper/ddcci/manager.go
+++ /dev/null
@@ -1,113 +0,0 @@
-package ddcci
-
-import (
-	"fmt"
-	"sync"
-
-	"github.com/godbus/dbus"
-	"github.com/linuxdeepin/go-lib/dbusutil"
-	"github.com/linuxdeepin/go-lib/log"
-	x "github.com/linuxdeepin/go-x11-client"
-)
-
-const (
-	DbusPath        = "/com/deepin/daemon/helper/Backlight/DDCCI"
-	dbusInterface   = "com.deepin.daemon.helper.Backlight.DDCCI"
-	configManagerId = "org.desktopspec.ConfigManager"
-)
-
-var logger = log.NewLogger("backlight_helper/ddcci")
-
-//go:generate dbusutil-gen em -type Manager
-type Manager struct {
-	service *dbusutil.Service
-	ddcci   *ddcci
-
-	PropsMu         sync.RWMutex
-	configTimestamp x.Timestamp
-
-	// 亮度调节方式，策略组配置
-	supportDdcci bool
-
-	configManagerPath dbus.ObjectPath
-}
-
-func NewManager(service *dbusutil.Service) (*Manager, error) {
-	m := &Manager{}
-	m.service = service
-
-	systemConnObj := service.Conn().Object(configManagerId, "/")
-	err := systemConnObj.Call(configManagerId+".acquireManager", 0, "org.deepin.dde.daemon", "org.deepin.dde.daemon.brightness", "").Store(&m.configManagerPath)
-	if err != nil {
-		logger.Warning(err)
-	}
-	m.supportDdcci = m.getSupportDdcci()
-
-	if m.supportDdcci {
-		var err error
-		m.ddcci, err = newDDCCI()
-		if err != nil {
-			return nil, fmt.Errorf("brightness: failed to init ddc/ci: %s", err)
-		}
-	}
-
-	return m, nil
-}
-
-func (m *Manager) getSupportDdcci() bool {
-	systemConnObj := m.service.Conn().Object("org.desktopspec.ConfigManager", m.configManagerPath)
-	var value bool
-	err := systemConnObj.Call("org.desktopspec.ConfigManager.Manager.value", 0, "supportDdcci").Store(&value)
-	if err != nil {
-		logger.Warning(err)
-		return false
-	}
-	return value
-}
-
-func (*Manager) GetInterfaceName() string {
-	return dbusInterface
-}
-
-func (m *Manager) CheckSupport(edidBase64 string) (bool, *dbus.Error) {
-	if m.ddcci == nil {
-		return false, nil
-	}
-
-	return m.ddcci.SupportBrightness(edidBase64), nil
-}
-
-func (m *Manager) GetBrightness(edidBase64 string) (int32, *dbus.Error) {
-	if m.ddcci == nil {
-		return 0, nil
-	}
-
-	if !m.ddcci.SupportBrightness(edidBase64) {
-		err := fmt.Errorf("brightness: not support ddc/ci: %s", edidBase64)
-		return 0, dbusutil.ToError(err)
-	}
-
-	brightness, err := m.ddcci.GetBrightness(edidBase64)
-	return int32(brightness), dbusutil.ToError(err)
-}
-
-func (m *Manager) SetBrightness(edidBase64 string, value int32) *dbus.Error {
-	if m.ddcci == nil {
-		return nil
-	}
-	if !m.ddcci.SupportBrightness(edidBase64) {
-		err := fmt.Errorf("brightness: not support ddc/ci: %s", edidBase64)
-		return dbusutil.ToError(err)
-	}
-
-	err := m.ddcci.SetBrightness(edidBase64, int(value))
-	return dbusutil.ToError(err)
-}
-
-func (m *Manager) RefreshDisplays() *dbus.Error {
-	if m.ddcci == nil {
-		return nil
-	}
-	err := m.ddcci.RefreshDisplays()
-	return dbusutil.ToError(err)
-}
diff --git a/bin/backlight_helper/main.go b/bin/backlight_helper/main.go
index f55feb94..715a8f00 100644
--- a/bin/backlight_helper/main.go
+++ b/bin/backlight_helper/main.go
@@ -28,7 +28,6 @@ import (
 	"time"
 
 	dbus "github.com/godbus/dbus"
-	"github.com/linuxdeepin/dde-daemon/bin/backlight_helper/ddcci"
 	"github.com/linuxdeepin/go-lib/dbusutil"
 	"github.com/linuxdeepin/go-lib/log"
 )
@@ -112,16 +111,6 @@ func main() {
 		logger.Fatal("failed to export:", err)
 	}
 
-	ddcciManager, err := ddcci.NewManager(service)
-	if err != nil {
-		logger.Warning(err)
-	} else {
-		err = service.Export(ddcci.DbusPath, ddcciManager)
-		if err != nil {
-			logger.Warning("failed to export:", err)
-		}
-	}
-
 	err = service.RequestName(dbusServiceName)
 	if err != nil {
 		logger.Fatal("failed to request name:", err)
diff --git a/debian/control b/debian/control
index a825ec02..c3fca773 100644
--- a/debian/control
+++ b/debian/control
@@ -50,7 +50,6 @@ Build-Depends:
  libxi-dev,
  libxkbfile-dev,
  libxtst-dev,
- libddcutil-dev,
  python3,
 Standards-Version: 4.5.1
 Homepage: http://www.deepin.org
diff --git a/misc/dsg-configs/org.deepin.dde.daemon.brightness.json b/misc/dsg-configs/org.deepin.dde.daemon.brightness.json
deleted file mode 100644
index 65581099..00000000
--- a/misc/dsg-configs/org.deepin.dde.daemon.brightness.json
+++ /dev/null
@@ -1,17 +0,0 @@
-{
-    "magic": "dsg.config.meta",
-    "version": "1.0",
-    "contents": {
-        "supportDdcci": {
-            "value": false,
-            "serial": 0,
-            "flags": [],
-            "global": true,
-            "name": "SupportDdcci",
-            "name[zh_CN]": "支持ddcci亮度调节",
-            "description": "brightness ddcci support",
-            "permissions": "readwrite",
-            "visibility": "private"
-        }
-    }
-}  
\ No newline at end of file
